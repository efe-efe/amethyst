{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/actions.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/allianceBar.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/alliances.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/commonComponents/health.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/commonComponents/multipleBars.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/controllers/cameraController.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/controllers/mousePositionController.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/customAbilities.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/customEntities.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/heroController.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/heroInfoCard.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/index.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/layout/layoutController.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/overhead/castpoint.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/overhead/charges.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/overhead/cooldown.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/overhead/heroOverhead.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/overhead/overhead.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/overhead/player.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/overhead/recast.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/overhead/stacks.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/overhead/status.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/overhead/unitOverhead.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/progressBar.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/pve.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/readyBar.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/server.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/targetIndicator.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/types.js","webpack:///C:/Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/util.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAA8C;AACW;AACzD,eAAe,gEAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC;AACA;AACA;AACA;AACA,CAAC,oCAAoC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,sBAAsB,GAAG,iBAAiB;AAC7F;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,+DAA+D,EAAE;AACjE;AACA,+DAA+D,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAc;AACtB;AACA;AACA,QAAQ,uDAAc;AACtB;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAc;AACtB;AACA;AACA;AACA,QAAQ,uDAAc;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAc;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5PA;AAAA;AAAA;AAAA;AAAA;AAAoC;AACW;AACP;AACxC,kBAAkB,kDAAS;AACZ;AACf;AACA;AACA,qBAAqB,4CAAM;AAC3B,qBAAqB,4CAAM;AAC3B,2BAA2B,4CAAM;AACjC,2BAA2B,4CAAM;AACjC,+BAA+B,4CAAM;AACrC,oCAAoC,4CAAM;AAC1C,6CAA6C,4CAAM;AACnD,oCAAoC,4CAAM;AAC1C,kCAAkC,4CAAM;AACxC,gCAAgC,4CAAM;AACtC,uBAAuB,OAAO;AAC9B,+BAA+B,4CAAM;AACrC;AACA,+CAA+C,4CAAM;AACrD;AACA,8CAA8C,OAAO;AACrD;AACA,0BAA0B,gEAAM;AAChC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAyC;AACA;AAC1B;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4CAAM;AACjC,0BAA0B,4CAAM;AAChC,0BAA0B,4CAAM;AAChC;AACA;AACA;AACA,qCAAqC,oDAAW;AAChD,8BAA8B,4CAAM;AACpC;AACA;AACA;AACA,SAAS;AACT,qCAAqC,oDAAW;AAChD,8BAA8B,4CAAM,UAAU,4CAAM;AACpD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,aAAa;AAC3D;AACA,wDAAwD,8DAA8D;AACtH,wDAAwD,4DAA4D;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,aAAa;AAC/D,kDAAkD,YAAY;AAC9D;AACA,4DAA4D,kCAAkC;AAC9F,4DAA4D,gCAAgC;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4CAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClKA;AAAA;AAAA;AAAA;AAAyC;AACR;AAClB;AACf;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,4CAAM,UAAU,4CAAM;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,gCAAgC,+BAA+B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oDAAW,+DAA+D,mBAAmB,4CAAM,UAAU,4CAAM,QAAQ;AAC3J;AACA,mCAAmC,YAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtEa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;ACxFY;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;;;;;;;;;;;;;AClBD;AAAA;AAAA;AAAgC;AACjB;AACf;AACA;AACA;AACA,QAAQ,4CAAM;AACd;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAgC;AACjB;AACf;AACA;AACA;AACA;AACA,QAAQ,4CAAM;AACd;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChEA;AAAA;AAAA;AAA8B;AACf;AACf;AACA,QAAQ,+CAAM;AACd;AACA;AACA,QAAQ,+CAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+CAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoC;AACW;AACY;AACnB;AACxC,kBAAkB,kDAAS;AACZ;AACf;AACA;AACA,qBAAqB,4CAAM;AAC3B,8BAA8B,4CAAM;AACpC,yBAAyB,4CAAM;AAC/B,0BAA0B,4CAAM;AAChC,4BAA4B,4CAAM;AAClC,4BAA4B,4CAAM;AAClC,4BAA4B,4CAAM;AAClC,8BAA8B,4CAAM;AACpC;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA,aAAa;AACb;AACA,2BAA2B,4CAAM;AACjC,+BAA+B,4CAAM;AACrC,2BAA2B,4CAAM;AACjC,yBAAyB,4CAAM;AAC/B;AACA,4BAA4B,sEAAY;AACxC;AACA;AACA;AACA,2BAA2B,4CAAM,UAAU,4CAAM;AACjD;AACA,aAAa;AACb;AACA,0BAA0B,gEAAM;AAChC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yCAAyC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACO;AACU;AACN;AACT;AACF;AACF;AACvB;AACY;AACR;AAC2B;AACJ;AACJ;AACa;AACnD;AACA,2BAA2B,wDAAc;AACzC,mBAAmB,gEAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,iBAAiB;AACvD,oCAAoC,gCAAgC;AACpE;AACA;AACA;AACA;AACA;AACA,iDAAiD,8DAAY;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,qDAAY;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,+DAAY;AAC7D;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI,4CAAM;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,oDAAW;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI,4CAAM;AACV;AACA;AACA,kCAAkC,uDAAe;AACjD;AACA,qBAAqB,uDAAe;AACpC,gBAAgB,mDAAQ;AACxB;AACA,qBAAqB,uDAAe;AACpC;AACA;AACA;AACA,qBAAqB,uDAAe;AACpC;AACA;AACA,KAAK;AACL,IAAI,4CAAM;AACV;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,4CAAM;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,aAAa,OAAO,MAAM;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,yBAAyB,6CAAI;AAC7B;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,yBAAyB,6CAAI;AAC7B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;;;;;;;;;;;;ACxQD;AAAA;AAAA;AAAA;AAA+C;AACE;AACjD,uBAAuB,uDAAc;AACrC,wBAAwB,wDAAe;AACxB;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClMA;AAAA;AAAA;AAAA;AAAyC;AACL;AACrB;AACf;AACA,+BAA+B,oDAAW,yCAAyC;AACnF;AACA;AACA;AACA;AACA;AACA,4BAA4B,+CAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAA4C;AAC7B;AACf;AACA,qBAAqB,4CAAM;AAC3B;AACA;AACA,8BAA8B,4CAAM;AACpC,4BAA4B,4CAAM;AAClC,+BAA+B,4CAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+CAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAA4C;AAC7B;AACf;AACA,qBAAqB,4CAAM;AAC3B;AACA;AACA,+BAA+B,4CAAM;AACrC,+BAA+B,4CAAM;AACrC;AACA;AACA;AACA,4BAA4B,+CAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACJ;AACA;AACiB;AACjB;AACE;AACE;AACJ;AACkB;AACX;AACD;AACwB;AAC5D;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC,kBAAkB,kDAAS;AACZ,2BAA2B,iDAAQ;AAClD;AACA;AACA;AACA;AACA;AACA,qBAAqB,4CAAM;AAC3B,wBAAwB,4CAAM;AAC9B,wBAAwB,4CAAM;AAC9B,wBAAwB,4CAAM;AAC9B,4BAA4B,4CAAM;AAClC,+BAA+B,4CAAM;AACrC,2BAA2B,4CAAM;AACjC,yBAAyB,4CAAM;AAC/B,2BAA2B,4CAAM;AACjC,8BAA8B,4CAAM;AACpC,yBAAyB,4CAAM;AAC/B,8BAA8B,4CAAM;AACpC,6BAA6B,4CAAM;AACnC;AACA,4BAA4B,uEAAY;AACxC;AACA;AACA;AACA,2BAA2B,4CAAM,UAAU,4CAAM;AACjD;AACA,aAAa;AACb,8BAA8B,uEAAY;AAC1C;AACA;AACA;AACA,2BAA2B,4CAAM,UAAU,4CAAM;AACjD;AACA,aAAa;AACb;AACA,0BAA0B,+CAAM;AAChC,0BAA0B,+CAAM;AAChC,2BAA2B,+CAAM;AACjC,0BAA0B,gEAAM;AAChC;AACA;AACA,SAAS;AACT,6BAA6B,mDAAS;AACtC;AACA;AACA;AACA,gCAAgC,iDAAQ;AACxC;AACA;AACA;AACA,8BAA8B,+CAAM;AACpC;AACA;AACA;AACA,+BAA+B,gDAAO;AACtC;AACA;AACA;AACA;AACA,gBAAgB,6CAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,6CAAI;AACjB,kCAAkC,6CAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iEAAiE;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvKA;AAAA;AAAA;AAAA;AAAsD;AACI;AAC1D;AACA;AACA;AACe;AACf;AACA;AACA;AACA,uBAAuB,gEAAgB;AACvC;AACA,8BAA8B,4CAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+CAAS;AAC9B,kDAAkD,8CAAQ;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzEA;AAAA;AAAA;AAAyC;AAC1B;AACf;AACA,qBAAqB,4CAAM;AAC3B,0BAA0B,4CAAM;AAChC;AACA,gCAAgC,4CAAM;AACtC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAiC;AAClB;AACf;AACA,qBAAqB,4CAAM;AAC3B,0BAA0B,4CAAM;AAChC,yBAAyB,4CAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAA4C;AAC7B;AACf;AACA,qBAAqB,4CAAM;AAC3B;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B,6BAA6B,4CAAM;AACnC;AACA;AACA;AACA;AACA,4BAA4B,+CAAS;AACrC;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACG;AACrC;AACP;AACA;AACA;AACA,CAAC,sCAAsC;AAChC;AACP;AACA;AACA;AACA,CAAC,sCAAsC;AACxB;AACf;AACA;AACA,qBAAqB,4CAAM;AAC3B;AACA,yBAAyB,4CAAM;AAC/B,yBAAyB,4CAAM;AAC/B,6BAA6B,4CAAM;AACnC,yBAAyB,4CAAM;AAC/B,+BAA+B,oDAAW;AAC1C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,+CAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,kBAAkB;AAClB,kBAAkB;AAClB,sBAAsB;AACtB,oBAAoB;AACpB,qBAAqB;AACrB,wBAAwB;AACxB,oBAAoB;AACpB,qBAAqB;AACrB,kBAAkB;AAClB,kBAAkB;AAClB,kBAAkB;AAClB,wBAAwB;AACxB,uBAAuB;AACvB,uBAAuB;AACvB,qBAAqB;AACrB,oBAAoB;AACpB,qBAAqB;AACrB,uBAAuB;AACvB,qBAAqB;AACrB,uBAAuB;AACvB,qBAAqB;AACrB,kBAAkB;AAClB,wBAAwB;AACxB,wBAAwB;AACxB,uBAAuB;AACvB,sBAAsB;AACtB,2BAA2B;AAC3B,kBAAkB;AAClB,wBAAwB;AACxB,4BAA4B;AAC5B,sBAAsB;AACtB,sBAAsB;AACtB,kBAAkB;AAClB,sBAAsB;AACtB,mBAAmB;AACnB,sBAAsB;AACtB,qBAAqB;AACrB;AACA,2CAA2C;AAC3C;;;;;;;;;;;;;AC/JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACJ;AACiB;AACC;AAChD;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC;AACA;AACA;AACA;AACA,CAAC,4BAA4B;AACd,2BAA2B,iDAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,4CAAM;AAC3B,wBAAwB,4CAAM;AAC9B,wBAAwB,4CAAM;AAC9B,wBAAwB,4CAAM;AAC9B,+BAA+B,4CAAM;AACrC,2BAA2B,4CAAM;AACjC,0BAA0B,+CAAM;AAChC,0BAA0B,gEAAM;AAChC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6CAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iEAAiE;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrIA;AAAA;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F;AAC1F;AACA;AACA,4FAA4F;AAC5F;AACA;AACA,wFAAwF;AACxF;AACA;AACA,8FAA8F;AAC9F;AACA;AACA;AACA;AACA,kFAAkF;AAClF,kFAAkF;AAClF,6EAA6E;AAC7E;AACA;AACA,gFAAgF;AAChF,gFAAgF;AAChF,2EAA2E;AAC3E;AACA;AACA,wFAAwF;AACxF,wFAAwF;AACxF,mFAAmF;AACnF;AACA;AACA,sFAAsF;AACtF,sFAAsF;AACtF,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClIA;AAAA;AAAA;AAAyD;AACnB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC;AACA,mBAAmB,gEAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6CAAI;AACjC;AACA;AACA,0BAA0B;AAC1B,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,0BAA0B,OAAO;AACjC;AACA,SAAS;AACT;AACA,0BAA0B,OAAO;AACjC,SAAS;AACT;AACA,0BAA0B,OAAO;AACjC;AACA,SAAS;AACT;AACA,0BAA0B,OAAO;AACjC,SAAS;AACT;AACA,0BAA0B,OAAO;AACjC;AACA,SAAS;AACT;AACA,0BAA0B,OAAO;AACjC,SAAS;AACT;AACA,0BAA0B,OAAO;AACjC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,6CAAI;AACzC;AACA;AACA,kCAAkC;AAClC,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6CAAI;AACrC;AACA;AACA,8BAA8B;AAC9B,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,IAAI,4CAAM;AACV,yBAAyB,6CAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,4CAAM;AACV,yBAAyB,6CAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;;;;;;;;;;;;;ACpLD;AAAA;AAAA;AAAyD;AACzD,eAAe,gEAAgB;AACxB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;AC1BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACe,qEAAM,EAAC;;;;;;;;;;;;;ACxCtB;AAAA;AAAA;AAAyC;AACO;AAChD;AACA,4BAA4B,wDAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+CAAS;AAC1C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,0CAAI;AACjC;AACA,yCAAyC,+CAAS;AAClD,0CAA0C,+CAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;AC1JD;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0CAA0C;;;;;;;;;;;;;ACV3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACe,oEAAK,EAAC;AACd;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,2FAA2F;AAC3F;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA,uBAAuB,uCAAuC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/index.js\");\n","import HeroController from \"./heroController\";\r\nimport LayoutController from \"./layout/layoutController\";\r\nconst layout = LayoutController.GetInstance();\r\nvar HeroActions;\r\n(function (HeroActions) {\r\n    HeroActions[HeroActions[\"MOVE_UP\"] = 0] = \"MOVE_UP\";\r\n    HeroActions[HeroActions[\"MOVE_LEFT\"] = 1] = \"MOVE_LEFT\";\r\n    HeroActions[HeroActions[\"MOVE_DOWN\"] = 2] = \"MOVE_DOWN\";\r\n    HeroActions[HeroActions[\"MOVE_RIGHT\"] = 3] = \"MOVE_RIGHT\";\r\n    HeroActions[HeroActions[\"BASIC_ATTACK\"] = 4] = \"BASIC_ATTACK\";\r\n    HeroActions[HeroActions[\"SECOND_ATTACK\"] = 5] = \"SECOND_ATTACK\";\r\n    HeroActions[HeroActions[\"MOBILITY\"] = 6] = \"MOBILITY\";\r\n    HeroActions[HeroActions[\"COUNTER\"] = 7] = \"COUNTER\";\r\n    HeroActions[HeroActions[\"SPECIAL_ATTACK\"] = 8] = \"SPECIAL_ATTACK\";\r\n    HeroActions[HeroActions[\"EXTRA\"] = 9] = \"EXTRA\";\r\n    HeroActions[HeroActions[\"ULTIMATE\"] = 10] = \"ULTIMATE\";\r\n    HeroActions[HeroActions[\"EX_ONE\"] = 11] = \"EX_ONE\";\r\n    HeroActions[HeroActions[\"EX_TWO\"] = 12] = \"EX_TWO\";\r\n    HeroActions[HeroActions[\"CANCEL\"] = 13] = \"CANCEL\";\r\n})(HeroActions || (HeroActions = {}));\r\nvar MouseButtons;\r\n(function (MouseButtons) {\r\n    MouseButtons[MouseButtons[\"LEFT_CLICK\"] = 0] = \"LEFT_CLICK\";\r\n    MouseButtons[MouseButtons[\"RIGHT_CLICK\"] = 1] = \"RIGHT_CLICK\";\r\n})(MouseButtons || (MouseButtons = {}));\r\nclass MouseClickController {\r\n    constructor() {\r\n        GameUI.SetMouseCallback((event, value) => {\r\n            if (event === \"pressed\") {\r\n                if (value === MouseButtons.LEFT_CLICK && this.onLeftClickPressed) {\r\n                    //TODO: It should be managed by the action, not by the mouse controller\r\n                    if (GameUI.IsControlDown()) {\r\n                        return false;\r\n                    }\r\n                    this.onLeftClickPressed();\r\n                    const reTry = () => {\r\n                        if (GameUI.IsMouseDown(MouseButtons.LEFT_CLICK) &&\r\n                            this.onLeftClickPressed) {\r\n                            this.onLeftClickPressed();\r\n                            $.Schedule(0.05, reTry);\r\n                        }\r\n                    };\r\n                    $.Schedule(0.05, reTry);\r\n                    return true;\r\n                }\r\n                else if (value === MouseButtons.RIGHT_CLICK &&\r\n                    this.onRightClickPressed) {\r\n                    this.onRightClickPressed();\r\n                    return true;\r\n                }\r\n            }\r\n            else if (event === \"released\") {\r\n                if (value === MouseButtons.LEFT_CLICK && this.onLeftClickReleased) {\r\n                    this.onLeftClickReleased();\r\n                    return true;\r\n                }\r\n                else if (value === MouseButtons.RIGHT_CLICK &&\r\n                    this.onRightClickReleased) {\r\n                    this.onRightClickReleased();\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        });\r\n    }\r\n    static GetInstance() {\r\n        if (!MouseClickController.instance) {\r\n            MouseClickController.instance = new MouseClickController();\r\n        }\r\n        return MouseClickController.instance;\r\n    }\r\n    SetOnLeftClickPressed(onPressed) {\r\n        this.onLeftClickPressed = onPressed;\r\n    }\r\n    SetOnRightClickPressed(onPressed) {\r\n        this.onRightClickPressed = onPressed;\r\n    }\r\n    SetOnLeftClickReleased(onReleased) {\r\n        this.onLeftClickReleased = onReleased;\r\n    }\r\n    SetOnRightClickReleased(onReleased) {\r\n        this.onRightClickReleased = onReleased;\r\n    }\r\n}\r\nclass Key {\r\n    constructor(keyCode, label) {\r\n        this.state = \"neverPressed\";\r\n        this.keyCode = keyCode;\r\n        this.label = label ? label : keyCode;\r\n    }\r\n    SetState(state) {\r\n        this.state = state;\r\n    }\r\n}\r\nconst GetKeyByKeyCode = (keys, keyCode) => {\r\n    return keys.find((key) => key.keyCode == keyCode);\r\n};\r\nclass Command {\r\n    constructor(key, action) {\r\n        this.mouseClickController = MouseClickController.GetInstance();\r\n        this.key = key;\r\n        this.action = action;\r\n        this.mouseClickController = MouseClickController.GetInstance();\r\n        this.Bind();\r\n    }\r\n    Bind() {\r\n        if (this.key.keyCode == \"MOUSE_1\") {\r\n            this.mouseClickController.SetOnLeftClickPressed(() => this.action.OnStart());\r\n            this.mouseClickController.SetOnLeftClickReleased(() => this.action.OnEnd());\r\n        }\r\n        else if (this.key.keyCode == \"MOUSE_2\") {\r\n            this.mouseClickController.SetOnRightClickPressed(() => this.action.OnStart());\r\n            this.mouseClickController.SetOnRightClickReleased(() => this.action.OnEnd());\r\n        }\r\n        else {\r\n            const commandName = `Custom_Key_Bind_${Date.now().toString()}_${this.key.keyCode}`;\r\n            Game.AddCommand(\"+\" + commandName, () => {\r\n                if (this.key.state == \"neverPressed\") {\r\n                    this.key.SetState(\"pressedAtLeastOnce\");\r\n                }\r\n                this.action.OnStart();\r\n            }, \"\", 0);\r\n            Game.AddCommand(\"-\" + commandName, () => {\r\n                if (this.key.state == \"neverPressed\") {\r\n                    return;\r\n                }\r\n                this.action.OnEnd();\r\n            }, \"\", 0);\r\n            Game.CreateCustomKeyBind(this.key.keyCode, \"+\" + commandName);\r\n        }\r\n    }\r\n    Unbind() {\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        Game.AddCommand(\"+\" + this.key.keyCode + \"Key\", () => { }, \"\", 0);\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        Game.AddCommand(\"-\" + this.key.keyCode + \"Key\", () => { }, \"\", 0);\r\n        this.key.SetState(\"neverPressed\");\r\n    }\r\n}\r\nconst GetActionByActionCode = (actions, actionCode) => {\r\n    return actions.filter((action) => action.actionCode == actionCode)[0];\r\n};\r\nclass Action {\r\n    constructor(name, actionCode) {\r\n        this.actionCode = actionCode;\r\n        this.name = name;\r\n    }\r\n    OnStart() {\r\n        $.Msg(\"Im starting the action: \", this.name);\r\n    }\r\n    OnEnd() {\r\n        $.Msg(\"Im ending the action: \", this.name);\r\n    }\r\n}\r\nclass AbilityAction extends Action {\r\n    constructor(name, actionCode, slotIndex, showEffects = true) {\r\n        super(name, actionCode);\r\n        this.slotIndex = slotIndex;\r\n        this.showEffects = showEffects;\r\n    }\r\n    OnStart() {\r\n        HeroController.CastAbility(this.slotIndex, this.showEffects);\r\n    }\r\n    OnEnd() {\r\n        HeroController.StopCastAbility(this.slotIndex);\r\n    }\r\n}\r\nclass MovementAction extends Action {\r\n    OnStart() {\r\n        const direction = this.GetDirectionFromActionCode(this.actionCode);\r\n        HeroController.StartMoving(direction);\r\n    }\r\n    OnEnd() {\r\n        const direction = this.GetDirectionFromActionCode(this.actionCode);\r\n        HeroController.StopMoving(direction);\r\n    }\r\n    GetDirectionFromActionCode(actionCode) {\r\n        let direction = [0, 0];\r\n        if (actionCode == HeroActions.MOVE_UP) {\r\n            direction = [0, 1];\r\n        }\r\n        if (actionCode == HeroActions.MOVE_DOWN) {\r\n            direction = [0, -1];\r\n        }\r\n        if (actionCode == HeroActions.MOVE_LEFT) {\r\n            direction = [-1, 0];\r\n        }\r\n        if (actionCode == HeroActions.MOVE_RIGHT) {\r\n            direction = [1, 0];\r\n        }\r\n        return direction;\r\n    }\r\n}\r\nclass CancelAction extends Action {\r\n    OnStart() {\r\n        HeroController.Cancel();\r\n    }\r\n}\r\nconst allActions = [\r\n    new MovementAction(\"Move up\", HeroActions.MOVE_UP),\r\n    new MovementAction(\"Move down\", HeroActions.MOVE_DOWN),\r\n    new MovementAction(\"Move left\", HeroActions.MOVE_LEFT),\r\n    new MovementAction(\"Move right\", HeroActions.MOVE_RIGHT),\r\n    new AbilityAction(\"Basic attack\", HeroActions.BASIC_ATTACK, 0, false),\r\n    new AbilityAction(\"Second attack\", HeroActions.SECOND_ATTACK, 1),\r\n    new AbilityAction(\"Mobility\", HeroActions.MOBILITY, 2),\r\n    new AbilityAction(\"Counter\", HeroActions.COUNTER, 3),\r\n    new AbilityAction(\"Special attack\", HeroActions.SPECIAL_ATTACK, 4),\r\n    new AbilityAction(\"Extra attack\", HeroActions.EXTRA, 5),\r\n    new AbilityAction(\"Ultimate\", HeroActions.ULTIMATE, 6),\r\n    new AbilityAction(\"EX one\", HeroActions.EX_ONE, 7),\r\n    new AbilityAction(\"EX two\", HeroActions.EX_TWO, 8),\r\n    new CancelAction(\"Cancel\", HeroActions.CANCEL),\r\n];\r\nconst allKeys = [\r\n    new Key(\"W\"),\r\n    new Key(\"A\"),\r\n    new Key(\"S\"),\r\n    new Key(\"D\"),\r\n    new Key(\"R\"),\r\n    new Key(\"E\"),\r\n    new Key(\"F\"),\r\n    new Key(\"Q\"),\r\n    new Key(\"C\"),\r\n    new Key(\"1\"),\r\n    new Key(\"2\"),\r\n    new Key(\"Space\", \"SPACE\"),\r\n    new Key(\"MOUSE_1\", \"LMB\"),\r\n    new Key(\"MOUSE_2\", \"RMB\"),\r\n];\r\nconst CreateCommandByKeyAndActionCodes = (keyCode, actionCode, isAbility = false) => {\r\n    const key = GetKeyByKeyCode(allKeys, keyCode);\r\n    const action = GetActionByActionCode(allActions, actionCode);\r\n    if (isAbility) {\r\n        const actionAsSpell = action;\r\n        layout.ChangeAbilityTextBySlotIndex(key.label, actionAsSpell.slotIndex);\r\n    }\r\n    return new Command(key, action);\r\n};\r\nCreateCommandByKeyAndActionCodes(\"W\", HeroActions.MOVE_UP);\r\nCreateCommandByKeyAndActionCodes(\"A\", HeroActions.MOVE_LEFT);\r\nCreateCommandByKeyAndActionCodes(\"S\", HeroActions.MOVE_DOWN);\r\nCreateCommandByKeyAndActionCodes(\"D\", HeroActions.MOVE_RIGHT);\r\nCreateCommandByKeyAndActionCodes(\"R\", HeroActions.ULTIMATE, true);\r\nCreateCommandByKeyAndActionCodes(\"F\", HeroActions.EXTRA, true);\r\nCreateCommandByKeyAndActionCodes(\"E\", HeroActions.SPECIAL_ATTACK, true);\r\nCreateCommandByKeyAndActionCodes(\"Q\", HeroActions.COUNTER, true);\r\nCreateCommandByKeyAndActionCodes(\"C\", HeroActions.CANCEL);\r\nCreateCommandByKeyAndActionCodes(\"1\", HeroActions.EX_ONE, true);\r\nCreateCommandByKeyAndActionCodes(\"2\", HeroActions.EX_TWO, true);\r\nCreateCommandByKeyAndActionCodes(\"Space\", HeroActions.MOBILITY, true);\r\nCreateCommandByKeyAndActionCodes(\"MOUSE_1\", HeroActions.BASIC_ATTACK, true);\r\nCreateCommandByKeyAndActionCodes(\"MOUSE_2\", HeroActions.SECOND_ATTACK, true);\r\n","import Alliances from \"./alliances\";\r\nimport Health from \"./commonComponents/health\";\r\nimport { colors, panels } from \"./util\";\r\nconst alliances = Alliances.GetInstance();\r\nexport default class AllianceBar {\r\n    constructor(container, allianceData) {\r\n        const alliance = alliances.findAllianceByName(allianceData.name);\r\n        this.color = colors[alliance.GetColor()];\r\n        this.panel = panels.createPanelSimple(container, \"alliance-bar\");\r\n        this.healthPanel = panels.createPanelSimple(this.panel, \"alliance-bar__health\");\r\n        this.bottomPanel = panels.createPanelSimple(this.panel, \"alliance-bar__bottom\");\r\n        const amethystsPanel = panels.createPanelSimple(this.bottomPanel, \"alliance-bar__amethysts\");\r\n        const scoreContainerPanel = panels.createPanelSimple(this.bottomPanel, \"alliance-bar__score-container\");\r\n        const amethystsImageContainerPanel = panels.createPanelSimple(amethystsPanel, \"alliance-bar__amethysts-image-container\");\r\n        const amethystsImagePanel = panels.createPanelSimple(amethystsImageContainerPanel, \"alliance-bar__amethysts-image\", \"Image\");\r\n        this.amethystsTextPanel = panels.createPanelSimple(amethystsPanel, \"alliance-bar__amethysts-text\", \"Label\");\r\n        this.scorePointsPanel = panels.createPanelSimple(scoreContainerPanel, \"alliance-bar__score-points\");\r\n        for (let i = 0; i < 5; i++) {\r\n            const pointPanel = panels.createPanelSimple(this.scorePointsPanel, \"alliance-bar__score-point\");\r\n            pointPanel.SetHasClass(\"alliance-bar__score-point--disabled\", true);\r\n            pointPanel.style.backgroundColor = colors.Gradient(this.color);\r\n        }\r\n        amethystsImagePanel.SetImage(\"file://{images}/custom_game/amethyst.png\");\r\n        this.amethystsTextPanel.text = \"X0\";\r\n        this.health = new Health(this.healthPanel, {\r\n            color: this.color,\r\n            fontSize: \"15px\",\r\n            usePercentage: true,\r\n            showValue: true\r\n        });\r\n        this.UpdateData(allianceData);\r\n    }\r\n    UpdateData(allianceData) {\r\n        this.UpdateAmethysts(allianceData.amethysts);\r\n        this.health.Update(allianceData.health, 30, allianceData.max_health, allianceData.shield);\r\n        for (let i = 0; i < allianceData.score; i++) {\r\n            this.scorePointsPanel.GetChild(i).SetHasClass(\"alliance-bar__score-point--inactive\", false);\r\n            this.scorePointsPanel.GetChild(i).SetHasClass(\"alliance-bar__score-point--active\", true);\r\n        }\r\n    }\r\n    UpdateMaxScore(maxScore) {\r\n        for (let i = 0; i < maxScore; i++) {\r\n            if (!this.scorePointsPanel.GetChild(i).BHasClass(\"alliance-bar__score-point--active\")) {\r\n                this.scorePointsPanel.GetChild(i).SetHasClass(\"alliance-bar__score-point--disabled\", false);\r\n                this.scorePointsPanel.GetChild(i).SetHasClass(\"alliance-bar__score-point--inactive\", true);\r\n            }\r\n        }\r\n    }\r\n    UpdateAmethysts(amount) {\r\n        this.amethystsTextPanel.text = \"X\" + amount.toString();\r\n    }\r\n}\r\n","class Alliance {\r\n    constructor(name, color, teams) {\r\n        this.name = name;\r\n        this.color = color;\r\n        this.teams = teams;\r\n    }\r\n    GetName() {\r\n        return this.name;\r\n    }\r\n    IsLocal() {\r\n        const localPlayerId = Game.GetLocalPlayerID();\r\n        const localPlayerTeam = Players.GetTeam(localPlayerId);\r\n        let isLocal = false;\r\n        this.teams.forEach((team) => {\r\n            if (team == localPlayerTeam) {\r\n                isLocal = true;\r\n            }\r\n        });\r\n        return isLocal;\r\n    }\r\n    GetColor() {\r\n        return this.IsLocal() ? \"local\" : this.color;\r\n    }\r\n}\r\nexport default class Alliances {\r\n    constructor() {\r\n        this.alliances = [\r\n            new Alliance(\"DOTA_ALLIANCE_RADIANT\", \"orange\", [DOTATeam_t.DOTA_TEAM_GOODGUYS, DOTATeam_t.DOTA_TEAM_BADGUYS]),\r\n            new Alliance(\"DOTA_ALLIANCE_DIRE\", \"yellow\", [DOTATeam_t.DOTA_TEAM_CUSTOM_1, DOTATeam_t.DOTA_TEAM_CUSTOM_2]),\r\n            new Alliance(\"DOTA_ALLIANCE_LEGION\", \"blue\", [DOTATeam_t.DOTA_TEAM_CUSTOM_3, DOTATeam_t.DOTA_TEAM_CUSTOM_4]),\r\n            new Alliance(\"DOTA_ALLIANCE_VOID\", \"pink\", [DOTATeam_t.DOTA_TEAM_CUSTOM_5, DOTATeam_t.DOTA_TEAM_CUSTOM_6]),\r\n        ];\r\n        //\r\n    }\r\n    static GetInstance() {\r\n        if (!Alliances.instance) {\r\n            Alliances.instance = new Alliances();\r\n        }\r\n        return Alliances.instance;\r\n    }\r\n    findAllianceByName(name) {\r\n        return this.alliances.filter(alliance => alliance.name == name)[0];\r\n    }\r\n    findAllianceByTeam(team) {\r\n        let returnAlliance = undefined;\r\n        this.alliances.forEach((alliance) => {\r\n            alliance.teams.forEach((allianceTeam) => {\r\n                if (allianceTeam == team) {\r\n                    returnAlliance = alliance;\r\n                }\r\n            });\r\n        });\r\n        return returnAlliance;\r\n    }\r\n}\r\nAlliances.GetInstance();\r\n","import ProgressBar from \"../progressBar\";\r\nimport { colors, panels } from \"../util\";\r\nexport default class Health {\r\n    constructor(container, data) {\r\n        this.cellsPanels = [];\r\n        this.borderRadius = \"3\";\r\n        this.active = true;\r\n        const fontSize = (data.fontSize) ? data.fontSize : \"13px\";\r\n        const showValue = (data.showValue) ? data.showValue : false;\r\n        const usePercentage = (data.usePercentage) ? data.usePercentage : false;\r\n        this.rounded = (data.rounded) ? data.rounded : false;\r\n        this.maxTreshold = (data.maxTreshold) ? data.maxTreshold : 30;\r\n        this.shieldOnFront = (data.shieldOnFront) ? data.shieldOnFront : false;\r\n        this.color = data.color;\r\n        this.showValue = showValue;\r\n        this.usePercentage = usePercentage;\r\n        this.healthPanel = panels.createPanelSimple(container, \"health\");\r\n        this.cellsPanel = panels.createPanelSimple(container, \"health__cells\");\r\n        this.valuePanel = panels.createPanelSimple(container, \"health__value\", \"Label\");\r\n        if (!this.shieldOnFront) {\r\n            this.healthPanel.style.flowChildren = \"right\";\r\n        }\r\n        this.healthProgressBar = new ProgressBar(\"health__progress-bar\", this.healthPanel, {\r\n            foreground_color: colors.Gradient(this.color),\r\n            delayed: true,\r\n            background_color: \"black\",\r\n            border_radius: (this.rounded) ? this.borderRadius + \"px\" : \"0\",\r\n        });\r\n        this.shieldProgressBar = new ProgressBar(\"shield__progress-bar\", this.healthPanel, {\r\n            foreground_color: colors.Gradient(colors.gray),\r\n            background_color: \"black\",\r\n            border_radius: (this.rounded) ? this.borderRadius + \"px\" : \"0\",\r\n        });\r\n        this.healthPanel.style.height = \"100%\";\r\n        this.healthPanel.style.width = \"100%\";\r\n        this.cellsPanel.style.flowChildren = \"right\";\r\n        this.cellsPanel.style.height = \"100%\";\r\n        this.cellsPanel.style.width = \"100%\";\r\n        this.cellsPanel.style.borderRadius = (this.rounded) ? this.borderRadius + \"px\" : \"0\";\r\n        if (this.showValue) {\r\n            this.valuePanel.style.align = \"center center\";\r\n            this.valuePanel.style.textShadow = \"0px 0px 8px 7.0 #000000b0\";\r\n            this.valuePanel.style.color = \"#FAFAFA\";\r\n            this.valuePanel.style.fontSize = fontSize;\r\n            this.valuePanel.style.fontFamily = \"Radiance, FZLanTingHei-R-GBK, TH Sarabun New, Gulim,MingLiU\";\r\n        }\r\n        else {\r\n            this.valuePanel.style.visibility = \"collapse\";\r\n        }\r\n    }\r\n    Activate() {\r\n        this.healthPanel.style.visibility = \"visible\";\r\n        this.active = true;\r\n    }\r\n    Deactivate() {\r\n        this.healthPanel.style.visibility = \"collapse\";\r\n        this.active = false;\r\n    }\r\n    Update(health, treshold, maxHealth, shield) {\r\n        if (!this.active) {\r\n            return;\r\n        }\r\n        const healeableAmount = this.maxTreshold - treshold;\r\n        const potentialHealth = health + (healeableAmount);\r\n        let healthPanelWidth;\r\n        let healthProgress;\r\n        let healthTotalWidth;\r\n        if (shield <= 0) {\r\n            this.shieldProgressBar.SetVisibility(\"collapse\");\r\n            this.healthProgressBar.SetBorder({ right: \"1\" });\r\n            if (this.rounded) {\r\n                this.healthProgressBar.SetBorderRadius({ topRight: this.borderRadius, bottomRight: this.borderRadius });\r\n                this.shieldProgressBar.SetBorderRadius({ topLeft: this.borderRadius, bottomLeft: this.borderRadius });\r\n            }\r\n            healthPanelWidth = 100 * (potentialHealth) / (maxHealth);\r\n            if (potentialHealth == 0) {\r\n                healthProgress = 0;\r\n            }\r\n            else {\r\n                healthProgress = 100 * health / (potentialHealth);\r\n            }\r\n            healthTotalWidth = 100;\r\n        }\r\n        else {\r\n            if (this.shieldOnFront) {\r\n                healthTotalWidth = 100;\r\n                const shieldTotalWidth = 100 * (shield) / (maxHealth);\r\n                this.shieldProgressBar.SetTotalWidth(shieldTotalWidth);\r\n            }\r\n            else {\r\n                this.healthProgressBar.SetBorder({ right: \"0\" });\r\n                this.shieldProgressBar.SetBorder({ left: \"0\" });\r\n                if (this.rounded) {\r\n                    this.healthProgressBar.SetBorderRadius({ topRight: \"0\", bottomRight: \"0\" });\r\n                    this.shieldProgressBar.SetBorderRadius({ topLeft: \"0\", bottomLeft: \"0\" });\r\n                }\r\n                healthTotalWidth = 100 * (health) / (maxHealth + shield);\r\n                const shieldTotalWidth = 100 * (maxHealth + shield - health) / (maxHealth + shield);\r\n                this.shieldProgressBar.SetTotalWidth(shieldTotalWidth);\r\n            }\r\n            this.shieldProgressBar.SetVisibility(\"visible\");\r\n            healthPanelWidth = 100;\r\n            healthProgress = 100;\r\n            const shieldProgress = 100 * shield / (shield + healeableAmount);\r\n            const shieldPanelWidth = 100 * (shield + healeableAmount) / (maxHealth + shield - health);\r\n            this.shieldProgressBar.SetProgress(shieldProgress);\r\n            this.shieldProgressBar.SetPanelWidth(shieldPanelWidth);\r\n        }\r\n        this.healthProgressBar.SetTotalWidth(healthTotalWidth);\r\n        this.healthProgressBar.SetPanelWidth(healthPanelWidth);\r\n        this.healthProgressBar.SetProgress(healthProgress);\r\n        if (this.showValue) {\r\n            let value = health.toString();\r\n            if (this.usePercentage) {\r\n                value = Math.floor(100 * potentialHealth / maxHealth).toString() + \"%\";\r\n            }\r\n            this.valuePanel.text = value;\r\n        }\r\n        if (this.shieldOnFront) {\r\n            this.UpdateCellsShieldOnFront(health, maxHealth);\r\n        }\r\n        else {\r\n            this.UpdateCells(health, healeableAmount, maxHealth, shield);\r\n        }\r\n    }\r\n    UpdateCellsShieldOnFront(health, maxHealth) {\r\n        this.UpdateCells(health, health, maxHealth, 0);\r\n    }\r\n    UpdateCells(health, healeableAmount, maxHealth, shield) {\r\n        const potentialHealthPoints = health + shield + healeableAmount;\r\n        const cellsTotalWidth = 100 * potentialHealthPoints / (maxHealth + shield);\r\n        this.cellsPanel.style.width = cellsTotalWidth + \"%\";\r\n        const rest = potentialHealthPoints % this.maxTreshold;\r\n        const cells = Math.ceil(potentialHealthPoints / this.maxTreshold);\r\n        while (this.cellsPanels.length < cells) {\r\n            this.AddCell();\r\n        }\r\n        while (this.cellsPanels.length > cells) {\r\n            this.RemoveCell();\r\n        }\r\n        this.cellsPanels.forEach((panel, i) => {\r\n            let cellWidth = this.GetCellWidth(this.maxTreshold, potentialHealthPoints);\r\n            if ((i == this.cellsPanels.length - 1) && rest > 0) {\r\n                cellWidth = this.GetCellWidth(rest, potentialHealthPoints);\r\n            }\r\n            panel.style.width = cellWidth + \"%\";\r\n        });\r\n    }\r\n    GetCellWidth(value, potentialHealthPoints) {\r\n        return (100 * value) / (potentialHealthPoints);\r\n    }\r\n    AddCell() {\r\n        const index = this.cellsPanel.GetChildCount();\r\n        const panel = panels.createPanelSimple(this.cellsPanel, \"cell_panel_\" + index);\r\n        panel.style.borderRight = \"1px solid rgba(0, 0, 0, 0.6)\";\r\n        panel.style.height = \"100%\";\r\n        this.cellsPanels.push(panel);\r\n    }\r\n    RemoveCell() {\r\n        this.cellsPanels[this.cellsPanels.length - 1].DeleteAsync(0);\r\n        this.cellsPanels.pop();\r\n    }\r\n}\r\n","import ProgressBar from \"../progressBar\";\r\nimport { colors } from \"../util\";\r\nexport default class MultipleBars {\r\n    constructor(container, options) {\r\n        this.progressBars = [];\r\n        this.container = container;\r\n        this.maxValue = options.maxValue;\r\n        this.fullColor = options.fullColor;\r\n        this.valuePerCell = options.valuePerCell;\r\n        this.missingColor = options.missingColor || colors.Gradient(colors.gray);\r\n        this.className = options.className;\r\n        this.UpdateCells();\r\n        this.Update(options.value, options.maxValue);\r\n    }\r\n    Update(value, maxValue) {\r\n        /*if(!IsVisibleByLocal(this.entity_index)){\r\n            return;\r\n        }*/\r\n        if (maxValue != this.maxValue) {\r\n            this.maxValue = maxValue;\r\n            this.UpdateCells();\r\n        }\r\n        const fixedValue = parseInt(value.toFixed(), 10);\r\n        const fullPanels = Math.floor(fixedValue / this.valuePerCell);\r\n        const missingValue = fixedValue % this.valuePerCell;\r\n        const missingValuePercent = parseInt((missingValue * 100 / this.valuePerCell).toFixed(), 10);\r\n        for (let i = 0; i < fullPanels; i++) {\r\n            this.progressBars[i].SetProgress(100);\r\n            this.progressBars[i].SetForegroundColor(this.fullColor);\r\n        }\r\n        for (let i = fullPanels; i <= this.progressBars.length; i++) {\r\n            if (this.progressBars[i]) {\r\n                if (i == fullPanels) {\r\n                    this.progressBars[i].SetForegroundColor(this.missingColor);\r\n                    this.progressBars[i].SetProgress(missingValuePercent);\r\n                }\r\n                else {\r\n                    this.progressBars[i].SetProgress(0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    UpdateCells() {\r\n        const cells = this.maxValue / this.valuePerCell;\r\n        while (this.progressBars.length < cells) {\r\n            this.AddCell();\r\n        }\r\n        while (this.progressBars.length > cells) {\r\n            this.RemoveCell();\r\n        }\r\n        this.SetWidths();\r\n    }\r\n    AddCell() {\r\n        const index = this.progressBars.length;\r\n        const progressBar = new ProgressBar(this.className + \"__progress-bar__\" + index, this.container, { foreground_color: colors.Gradient(colors.blue) });\r\n        if (index > 0) {\r\n            progressBar.SetBorder({ left: \"0\" });\r\n        }\r\n        this.progressBars.push(progressBar);\r\n    }\r\n    SetWidths() {\r\n        const width = (100 * this.valuePerCell) / this.maxValue;\r\n        this.progressBars.forEach(bar => {\r\n            bar.SetTotalWidth(width);\r\n        });\r\n    }\r\n    RemoveCell() {\r\n        this.progressBars[this.progressBars.length - 1].SetVisibility(\"collapse\");\r\n        this.progressBars.pop();\r\n    }\r\n}\r\n","\"use strict\";\r\n(function () {\r\n    const LERP_INITIAL = 0.10;\r\n    const LERP_FAST = 0.05;\r\n    const thinkInterval = 0.01;\r\n    const cameraOffsetY = -120;\r\n    const cameraDistance = 0;\r\n    const cameraDistanceLerp = 30;\r\n    let cameraDistanceActual = 0;\r\n    let playerId = Players.GetLocalPlayer();\r\n    let hero = Players.GetPlayerHeroEntityIndex(playerId);\r\n    let heroOrigin = Entities.GetAbsOrigin(hero);\r\n    let initialized = false;\r\n    function Update() {\r\n        heroOrigin = Entities.GetAbsOrigin(hero);\r\n        if (!heroOrigin) {\r\n            playerId = Players.GetLocalPlayer();\r\n            hero = Players.GetPlayerHeroEntityIndex(playerId);\r\n            $.Schedule(thinkInterval, Update);\r\n            return;\r\n        }\r\n        if (Game.IsInToolsMode()) {\r\n            const heroIndex = Players.GetSelectedEntities(playerId)[0];\r\n            if (heroIndex) {\r\n                heroOrigin = Entities.GetAbsOrigin(heroIndex);\r\n            }\r\n        }\r\n        if (initialized === false) {\r\n            GameUI.SetCameraTargetPosition(heroOrigin, 0.0);\r\n            initialized = true;\r\n            $.Schedule(thinkInterval, Update);\r\n            return;\r\n        }\r\n        UpdatePosition();\r\n        UpdateDistance();\r\n        $.Schedule(thinkInterval, Update);\r\n    }\r\n    function UpdatePosition() {\r\n        const mousePosition = GameUI.GetCursorPosition();\r\n        const sw = Game.GetScreenWidth();\r\n        const sh = Game.GetScreenHeight();\r\n        let cameraPosition = [];\r\n        let cameraPositionLerp = LERP_INITIAL;\r\n        let heroScreenX = Game.WorldToScreenX(heroOrigin[0], heroOrigin[1], heroOrigin[2]);\r\n        let heroScreenY = Game.WorldToScreenY(heroOrigin[0], heroOrigin[1], heroOrigin[2]);\r\n        if (heroScreenX == -1 && heroScreenY == -1) {\r\n            cameraPosition = heroOrigin;\r\n            cameraPositionLerp = LERP_FAST;\r\n        }\r\n        else {\r\n            if (heroScreenX < 0) {\r\n                heroScreenX = 0;\r\n                cameraPositionLerp = LERP_FAST;\r\n            }\r\n            if (heroScreenX > sw) {\r\n                heroScreenX = sw;\r\n                cameraPositionLerp = LERP_FAST;\r\n            }\r\n            if (heroScreenY < 0) {\r\n                heroScreenY = 0;\r\n                cameraPositionLerp = LERP_FAST;\r\n            }\r\n            if (heroScreenY > sh) {\r\n                heroScreenY = sh;\r\n                cameraPositionLerp = LERP_FAST;\r\n            }\r\n            const distanceX = (heroScreenX - mousePosition[0]);\r\n            const distanceY = (heroScreenY - mousePosition[1]) + cameraOffsetY;\r\n            const newScreenPosX = heroScreenX + distanceX * -1 / 2.5;\r\n            const newScreenPosY = heroScreenY + distanceY * -1 / 2.5;\r\n            if (!GameUI.GetScreenWorldPosition([newScreenPosX, newScreenPosY])) {\r\n                return;\r\n            }\r\n            cameraPosition = Game.ScreenXYToWorld(newScreenPosX, newScreenPosY);\r\n        }\r\n        GameUI.SetCameraTargetPosition(cameraPosition, cameraPositionLerp);\r\n    }\r\n    function UpdateDistance() {\r\n        // Smooth camera distance changes\r\n        if (cameraDistanceActual < cameraDistance) {\r\n            cameraDistanceActual = cameraDistanceActual + cameraDistanceLerp;\r\n        }\r\n        else if (cameraDistanceActual > cameraDistance) {\r\n            cameraDistanceActual = cameraDistanceActual - cameraDistanceLerp;\r\n        }\r\n        GameUI.SetCameraLookAtPositionHeightOffset(cameraDistanceActual);\r\n    }\r\n    Update();\r\n})();\r\n","\"use strict\";\r\n(function () {\r\n    const thinkInterval = 0.01;\r\n    function Update() {\r\n        const mousePositionScreen = GameUI.GetCursorPosition();\r\n        const mousePosition = Game.ScreenXYToWorld(mousePositionScreen[0], mousePositionScreen[1]);\r\n        const data = {\r\n            x: mousePosition[0],\r\n            y: mousePosition[1],\r\n            z: mousePosition[2],\r\n            playerId: Players.GetLocalPlayer()\r\n        };\r\n        GameEvents.SendCustomGameEventToServer(\"update_mouse_position\", data);\r\n        $.Schedule(thinkInterval, () => {\r\n            Update();\r\n        });\r\n    }\r\n    Update();\r\n})();\r\n","import { tables } from \"./util\";\r\nexport default class CustomAbilities {\r\n    constructor() {\r\n        this.abilities = {};\r\n        const tableName = \"main\";\r\n        tables.subscribeToNetTableKey(tableName, \"abilities\", true, (data) => {\r\n            for (const key in data) {\r\n                this.abilities[key] = data[key];\r\n            }\r\n        });\r\n    }\r\n    static GetInstance() {\r\n        if (!CustomAbilities.instance) {\r\n            CustomAbilities.instance = new CustomAbilities();\r\n        }\r\n        return CustomAbilities.instance;\r\n    }\r\n    GetTargetingIndicator(abilityIndex) {\r\n        const abilityName = Abilities.GetAbilityName(abilityIndex);\r\n        if (this.abilities[abilityName].targetingIndicator) {\r\n            return this.abilities[abilityName].targetingIndicator;\r\n        }\r\n        return undefined;\r\n    }\r\n    GetEnergyCost(abilityIndex) {\r\n        const abilityName = Abilities.GetAbilityName(abilityIndex);\r\n        if (this.abilities[abilityName]) {\r\n            return this.abilities[abilityName].energyCost;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n","import { tables } from \"./util\";\r\nexport default class CustomEntities {\r\n    constructor() {\r\n        this.onUpdateCallbacks = [];\r\n        this.entities = [];\r\n        const tableName = \"units\";\r\n        tables.subscribeToNetTableAndLoadNow(tableName, (table, key, value) => {\r\n            const entity = value;\r\n            this.SetEntity(entity);\r\n        });\r\n    }\r\n    static GetInstance() {\r\n        if (!CustomEntities.instance) {\r\n            CustomEntities.instance = new CustomEntities();\r\n        }\r\n        return CustomEntities.instance;\r\n    }\r\n    SetEntity(entity) {\r\n        const index = this.GetEntityArrayIndex(entity.entityIndex);\r\n        if (index !== undefined) {\r\n            this.UpdateEntity(index, entity);\r\n        }\r\n        else {\r\n            this.entities.push(entity);\r\n        }\r\n        this.onUpdateCallbacks.forEach(callback => {\r\n            callback(entity);\r\n        });\r\n    }\r\n    GetEntity(entityIndex) {\r\n        return this.entities.filter(entity => entity.entityIndex === entityIndex)[0];\r\n    }\r\n    UpdateEntity(index, entity) {\r\n        this.entities = [\r\n            ...this.entities.slice(0, index),\r\n            ...this.entities.slice(index + 1)\r\n        ];\r\n        this.entities.push(entity);\r\n    }\r\n    OnReload() {\r\n        const tableName = \"units\";\r\n        const data = CustomNetTables.GetAllTableValues(tableName);\r\n        data.forEach((d) => {\r\n            const parsedD = d;\r\n            this.SetEntity(parsedD.value);\r\n        });\r\n    }\r\n    AddCallback(callback) {\r\n        this.onUpdateCallbacks.push(callback);\r\n    }\r\n    GetEntityArrayIndex(entityIndex) {\r\n        let index = undefined;\r\n        this.entities.forEach((entity, i) => {\r\n            if (entity.entityIndex === entityIndex) {\r\n                index = i;\r\n            }\r\n        });\r\n        return index;\r\n    }\r\n    IsBeingSelectedByLocal(entityIndex) {\r\n        const localPlayerId = Game.GetLocalPlayerID();\r\n        const selectedEntity = Players.GetSelectedEntities(localPlayerId)[0];\r\n        return selectedEntity === entityIndex;\r\n    }\r\n}\r\n","import server from \"./server\";\r\nexport default class HeroController {\r\n    static StartMoving(direction) {\r\n        server.sendStartMovementSignalToServer(direction);\r\n    }\r\n    static StopMoving(direction) {\r\n        server.sendStopMovementSignalToServer(direction);\r\n    }\r\n    static Cancel() {\r\n        const playerId = Players.GetLocalPlayer();\r\n        const heroIndex = Players.GetPlayerHeroEntityIndex(playerId);\r\n        const order = {\r\n            OrderType: dotaunitorder_t.DOTA_UNIT_ORDER_STOP,\r\n            TargetIndex: heroIndex,\r\n            ShowEffects: false,\r\n            QueueBehavior: OrderQueueBehavior_t.DOTA_ORDER_QUEUE_NEVER,\r\n        };\r\n        Game.PrepareUnitOrders(order);\r\n    }\r\n    static StopCastAbility(slotIndex) {\r\n        const playerId = Players.GetLocalPlayer();\r\n        const heroIndex = Players.GetPlayerHeroEntityIndex(playerId);\r\n        const abilityEntityIndex = Entities.GetAbility(heroIndex, slotIndex);\r\n        server.sendStopAbilitySignalToServer(abilityEntityIndex);\r\n    }\r\n    static CastAbility(slotIndex, showEffects = true) {\r\n        const playerId = Players.GetLocalPlayer();\r\n        let heroIndex = Players.GetPlayerHeroEntityIndex(playerId);\r\n        if (Game.IsInToolsMode()) {\r\n            heroIndex = Players.GetSelectedEntities(playerId)[0];\r\n        }\r\n        const abilityEntityIndex = Entities.GetAbility(heroIndex, slotIndex);\r\n        if (!Abilities.IsInAbilityPhase(abilityEntityIndex)) {\r\n            if (!showEffects) {\r\n                if (!Abilities.IsCooldownReady(abilityEntityIndex)) {\r\n                    return;\r\n                }\r\n            }\r\n            const mousePositionScreen = GameUI.GetCursorPosition();\r\n            const mousePosition = Game.ScreenXYToWorld(mousePositionScreen[0], mousePositionScreen[1]);\r\n            const abilityBehavior = Abilities.GetBehavior(abilityEntityIndex);\r\n            if (abilityBehavior & DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_POINT) {\r\n                const order = {\r\n                    OrderType: dotaunitorder_t.DOTA_UNIT_ORDER_CAST_POSITION,\r\n                    TargetIndex: heroIndex,\r\n                    Position: mousePosition,\r\n                    QueueBehavior: OrderQueueBehavior_t.DOTA_ORDER_QUEUE_NEVER,\r\n                    ShowEffects: showEffects,\r\n                    AbilityIndex: abilityEntityIndex,\r\n                };\r\n                Game.PrepareUnitOrders(order);\r\n            }\r\n            if (abilityBehavior & DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_NO_TARGET) {\r\n                const order = {\r\n                    OrderType: dotaunitorder_t.DOTA_UNIT_ORDER_CAST_NO_TARGET,\r\n                    TargetIndex: heroIndex,\r\n                    Position: mousePosition,\r\n                    QueueBehavior: OrderQueueBehavior_t.DOTA_ORDER_QUEUE_NEVER,\r\n                    ShowEffects: showEffects,\r\n                    AbilityIndex: abilityEntityIndex,\r\n                };\r\n                Game.PrepareUnitOrders(order);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import Alliances from \"./alliances\";\r\nimport Health from \"./commonComponents/health\";\r\nimport MultipleBars from \"./commonComponents/multipleBars\";\r\nimport { colors, panels } from \"./util\";\r\nconst alliances = Alliances.GetInstance();\r\nexport default class HeroInfoCard {\r\n    constructor(heroData, alliancePanel) {\r\n        const alliance = alliances.findAllianceByTeam(heroData.teamId);\r\n        this.color = colors[alliance.GetColor()];\r\n        this.containerPanel = panels.createPanelSimple(alliancePanel, \"hero-info-card\");\r\n        this.leftPanel = panels.createPanelSimple(this.containerPanel, \"hero-info-card__left\");\r\n        this.rightPanel = panels.createPanelSimple(this.containerPanel, \"hero-info-card__right\");\r\n        this.leftTopPanel = panels.createPanelSimple(this.leftPanel, \"hero-info-card__top\");\r\n        this.leftMidPanel = panels.createPanelSimple(this.leftPanel, \"hero-info-card__mid\");\r\n        this.leftBotPanel = panels.createPanelSimple(this.leftPanel, \"hero-info-card__bot\");\r\n        this.abilitiesPanel = panels.createPanelSimple(this.rightPanel, \"hero-info-card__abilities\");\r\n        if (heroData.allianceName == \"DOTA_ALLIANCE_DIRE\") {\r\n            this.containerPanel.SetHasClass(\"hero-info-card--right\", true);\r\n            this.abilitiesPanel.SetHasClass(\"hero-info-card__abilities--right\", true);\r\n        }\r\n        for (let i = 0; i < 9; i++) {\r\n            $.CreatePanelWithProperties(\"DOTAAbilityImage\", this.abilitiesPanel, \"hero-info-card__ability_\" + i, {\r\n                class: \"hero-info-card__ability\",\r\n            });\r\n        }\r\n        const imagePanel = panels.createPanelSimple(this.leftTopPanel, \"hero-info-card__image\", \"DOTAHeroImage\");\r\n        const resourcesPanel = panels.createPanelSimple(this.leftMidPanel, \"hero-info-card-resources\");\r\n        this.healthPanel = panels.createPanelSimple(resourcesPanel, \"hero-info-card-resources__health\");\r\n        this.manaPanel = panels.createPanelSimple(resourcesPanel, \"hero-info-card-resources__mana\");\r\n        if (alliance.IsLocal()) {\r\n            this.mana = new MultipleBars(this.manaPanel, {\r\n                value: heroData.mana,\r\n                maxValue: heroData.maxMana,\r\n                className: \"mana\",\r\n                fullColor: colors.Gradient(colors.blue),\r\n                valuePerCell: 25,\r\n            });\r\n        }\r\n        this.health = new Health(this.healthPanel, {\r\n            color: this.color,\r\n            fontSize: \"13px\",\r\n            showValue: true,\r\n        });\r\n        imagePanel.heroname = heroData.name;\r\n        this.UpdateData(heroData);\r\n    }\r\n    UpdateData(heroData) {\r\n        this.health.Update(heroData.health, heroData.treshold, heroData.maxHealth, heroData.shield);\r\n        if (this.mana) {\r\n            this.mana.Update(heroData.mana, heroData.maxMana);\r\n        }\r\n        this.UpdateAbilities(heroData.abilities);\r\n    }\r\n    UpdateAbilities(abilities) {\r\n        const upgradedAbilities = [];\r\n        let iterator = 0;\r\n        for (const index in abilities) {\r\n            const ability = abilities[index];\r\n            if (ability.level >= 2) {\r\n                upgradedAbilities.push(ability);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.abilitiesPanel.GetChildCount(); i++) {\r\n            const tmpPanel = this.abilitiesPanel.GetChild(i);\r\n            if (upgradedAbilities[iterator]) {\r\n                tmpPanel.style.width = \"40px\";\r\n                tmpPanel.style.marginRight = \"5px\";\r\n                tmpPanel.abilityname = upgradedAbilities[iterator].name;\r\n                tmpPanel.SetPanelEvent(\"onmouseover\", () => {\r\n                    $.DispatchEvent(\"DOTAShowAbilityTooltipForEntityIndex\", tmpPanel, tmpPanel.abilityname, Players.GetLocalPlayerPortraitUnit());\r\n                });\r\n                tmpPanel.SetPanelEvent(\"onmouseout\", () => {\r\n                    $.DispatchEvent(\"DOTAHideAbilityTooltip\", tmpPanel);\r\n                });\r\n                iterator++;\r\n            }\r\n            else {\r\n                tmpPanel.style.width = \"0px\";\r\n                tmpPanel.style.marginRight = \"0px\";\r\n            }\r\n        }\r\n    }\r\n}\r\n","import \"./controllers/cameraController\";\r\nimport \"./controllers/mousePositionController\";\r\nimport LayoutController from \"./layout/layoutController\";\r\nimport HeroOverhead from \"./overhead/heroOverhead\";\r\nimport HeroInfoCard from \"./heroInfoCard\";\r\nimport AllianceBar from \"./allianceBar\";\r\nimport util, { tables } from \"./util\";\r\nimport \"./pve\";\r\nimport \"./targetIndicator\";\r\nimport \"./actions\";\r\nimport CustomEntities from \"./customEntities\";\r\nimport { CustomGameState } from \"./types\";\r\nimport { ReadyBar } from \"./readyBar\";\r\nimport UnitOverhead from \"./overhead/unitOverhead\";\r\n(function () {\r\n    const customEntities = CustomEntities.GetInstance();\r\n    const layout = LayoutController.GetInstance();\r\n    const refunder = $(\"#refunder\");\r\n    const gameStatePanel = $(\"#game-state\");\r\n    const clockPanel = $(\"#top-bar__clock-text\");\r\n    const pvePanels = layout.GetTopPanel().FindChildrenWithClassTraverse(\"pve\");\r\n    const pvpPanels = layout.GetTopPanel().FindChildrenWithClassTraverse(\"pvp\");\r\n    const currentLevelPanel = $(\"#current-room\");\r\n    const currentStagePanel = $(\"#current-stage\");\r\n    const enemiesCountPanel = $(\"#enemies-count\");\r\n    const nextRewardPanel = $(\"#next-reward\");\r\n    const roomPhasePanel = $(\"#room-phase\");\r\n    const roomTypePanel = $(\"#room-type\");\r\n    const refunderButton = $(\"#refunder__button\");\r\n    const refunderPanel = $(\"#refunder\");\r\n    const customHotkeysPanel = $(\"#custom-hotkeys\");\r\n    const hideShowButton = $(\"#custom-hotkeys__hide-show-button\");\r\n    const swapButton = $(\"#custom-hotkeys__swap-button\");\r\n    const customHotkeysAllRowsPanel = $(\"#custom-hotkeys__hotkeys\");\r\n    const customHotkeysTextPanel = hideShowButton.FindChildrenWithClassTraverse(\"custom-hotkeys__button-text\")[0];\r\n    const heroOverheads = {};\r\n    const unitOverheads = {};\r\n    const heroInfoCards = {};\r\n    const allianceBars = {};\r\n    let customHotkeysShowing = true;\r\n    let maxScore = 3;\r\n    GameUI.SetDefaultUIEnabled(DotaDefaultUIElement_t.DOTA_DEFAULT_UI_TOP_TIMEOFDAY, false);\r\n    GameUI.SetDefaultUIEnabled(DotaDefaultUIElement_t.DOTA_DEFAULT_UI_TOP_HEROES, false);\r\n    GameUI.SetDefaultUIEnabled(DotaDefaultUIElement_t.DOTA_DEFAULT_UI_FLYOUT_SCOREBOARD, false);\r\n    GameUI.SetDefaultUIEnabled(DotaDefaultUIElement_t.DOTA_DEFAULT_UI_ACTION_MINIMAP, false);\r\n    GameUI.SetDefaultUIEnabled(DotaDefaultUIElement_t.DOTA_DEFAULT_UI_ENDGAME, false);\r\n    GameUI.SetDefaultUIEnabled(DotaDefaultUIElement_t.DOTA_DEFAULT_UI_HERO_SELECTION_TEAMS, false);\r\n    GameUI.SetDefaultUIEnabled(DotaDefaultUIElement_t.DOTA_DEFAULT_UI_INVENTORY_ITEMS, false);\r\n    GameUI.SetDefaultUIEnabled(DotaDefaultUIElement_t.DOTA_DEFAULT_UI_INVENTORY_SHOP, false);\r\n    layout.CollapsePanel(\"level_stats_frame\");\r\n    layout.CollapsePanel(\"inventory_tpscroll_container\");\r\n    layout.CollapsePanel(\"inventory_neutral_slot_container\");\r\n    layout.CollapsePanelByClass(\"AbilityInsetShadowRight\");\r\n    layout.CollapsePanel(\"StatBranch\");\r\n    layout.CollapsePanel(\"health_mana\");\r\n    layout.CollapsePanel(\"AghsStatusContainer\");\r\n    const rightFlarePanel = layout\r\n        .GetTopPanel()\r\n        .FindChildTraverse(\"right_flare\");\r\n    rightFlarePanel.style.width = \"52px\";\r\n    rightFlarePanel.style.height = \"97px\";\r\n    rightFlarePanel.style.marginRight = \"244px\";\r\n    const centerWithStatsPanel = layout\r\n        .GetTopPanel()\r\n        .FindChildTraverse(\"center_with_stats\");\r\n    centerWithStatsPanel.style.horizontalAlign = \"left\";\r\n    centerWithStatsPanel.style.marginLeft = \"80px\";\r\n    const buffContainerPanel = layout\r\n        .GetTopPanel()\r\n        .FindChildTraverse(\"BuffContainer\");\r\n    buffContainerPanel.style.width = \"40%\";\r\n    const abilitiesAndStatsBranchPanel = layout\r\n        .GetTopPanel()\r\n        .FindChildTraverse(\"AbilitiesAndStatBranch\");\r\n    abilitiesAndStatsBranchPanel.style.marginBottom = \"-15px\";\r\n    const centerBgPanel = layout.GetTopPanel().FindChildTraverse(\"center_bg\");\r\n    centerBgPanel.style.height = \"90px\";\r\n    layout.SetPanelMargin(\"debuffs\", { bottom: \"95px\" });\r\n    layout.SetPanelMargin(\"buffs\", { left: \"38.5%\", bottom: \"95px\" });\r\n    layout.UpdateCurrency();\r\n    customEntities.AddCallback((value) => {\r\n        const entityIndex = value.entityIndex;\r\n        if (value.playerId !== undefined) {\r\n            if (!heroOverheads[entityIndex]) {\r\n                heroOverheads[entityIndex] = new HeroOverhead(value);\r\n            }\r\n            else {\r\n                heroOverheads[entityIndex].UpdateData(value);\r\n            }\r\n            if (!heroInfoCards[entityIndex]) {\r\n                let container;\r\n                const allianceName = value.allianceName;\r\n                if (allianceName == \"DOTA_ALLIANCE_RADIANT\") {\r\n                    container = $(\"#alliances-status\").FindChildTraverse(\"alliances-status__radiant\");\r\n                }\r\n                if (allianceName == \"DOTA_ALLIANCE_DIRE\") {\r\n                    container = $(\"#alliances-status\").FindChildTraverse(\"alliances-status__dire\");\r\n                }\r\n                if (allianceName == \"DOTA_ALLIANCE_LEGION\") {\r\n                    container = $(\"#alliances-status\").FindChildTraverse(\"alliances-status__legion\");\r\n                }\r\n                if (allianceName == \"DOTA_ALLIANCE_VOID\") {\r\n                    container = $(\"#alliances-status\").FindChildTraverse(\"alliances-status__void\");\r\n                }\r\n                heroInfoCards[entityIndex] = new HeroInfoCard(value, container);\r\n            }\r\n            else {\r\n                heroInfoCards[entityIndex].UpdateData(value);\r\n            }\r\n        }\r\n        else {\r\n            if (!unitOverheads[entityIndex]) {\r\n                unitOverheads[entityIndex] = new UnitOverhead(value);\r\n            }\r\n            else {\r\n                unitOverheads[entityIndex].UpdateData(value);\r\n            }\r\n        }\r\n    });\r\n    customEntities.OnReload();\r\n    const tableNameAlliance = \"alliances\";\r\n    tables.subscribeToNetTableAndLoadNow(tableNameAlliance, (table, key, value) => {\r\n        const allianceName = value.name;\r\n        if (!allianceBars[allianceName]) {\r\n            const topBarContainerPanel = $(\"#top-bar\");\r\n            let topBarPanel = null;\r\n            if (allianceName == \"DOTA_ALLIANCE_RADIANT\") {\r\n                topBarPanel =\r\n                    topBarContainerPanel.FindChildTraverse(\"top-bar__radiant\");\r\n            }\r\n            if (allianceName == \"DOTA_ALLIANCE_DIRE\") {\r\n                topBarPanel = topBarContainerPanel.FindChildTraverse(\"top-bar__dire\");\r\n            }\r\n            if (allianceName == \"DOTA_ALLIANCE_LEGION\") {\r\n                topBarPanel =\r\n                    topBarContainerPanel.FindChildTraverse(\"top-bar__legion\");\r\n            }\r\n            if (allianceName == \"DOTA_ALLIANCE_VOID\") {\r\n                topBarPanel = topBarContainerPanel.FindChildTraverse(\"top-bar__void\");\r\n            }\r\n            if (topBarPanel) {\r\n                allianceBars[allianceName] = new AllianceBar(topBarPanel, value);\r\n                allianceBars[allianceName].UpdateMaxScore(maxScore);\r\n            }\r\n        }\r\n        else {\r\n            allianceBars[allianceName].UpdateData(value);\r\n        }\r\n    });\r\n    const tableNameMain = \"main\";\r\n    tables.subscribeToNetTableKey(tableNameMain, \"gameState\", true, function (data) {\r\n        const state = data.gameState;\r\n        if (Game.IsInToolsMode()) {\r\n            gameStatePanel.text = CustomGameState[data.gameState];\r\n        }\r\n        if (state == CustomGameState.PRE_ROUND) {\r\n            new ReadyBar(4.0);\r\n        }\r\n        if (state == CustomGameState.ROUND_IN_PROGRESS) {\r\n            layout.HideDimmer();\r\n            refunder.style.visibility = \"collapse\";\r\n        }\r\n        if (state == CustomGameState.WARMUP_IN_PROGRESS) {\r\n            refunder.style.visibility = \"visible\";\r\n        }\r\n    });\r\n    tables.subscribeToNetTableKey(tableNameMain, \"maxScore\", true, function (data) {\r\n        maxScore = data.max_score;\r\n        for (const allianceName in allianceBars) {\r\n            const allianceBar = allianceBars[allianceName];\r\n            allianceBar.UpdateMaxScore(maxScore);\r\n        }\r\n    });\r\n    tables.subscribeToNetTableKey(tableNameMain, \"pve\", true, function (data) {\r\n        if (Game.IsInToolsMode()) {\r\n            if (data.nextReward) {\r\n                nextRewardPanel.text = \"Next reward: \" + data.nextReward;\r\n            }\r\n            if (data.roomPhases) {\r\n                let phasesAsText = \"\";\r\n                for (const key in data.roomPhases) {\r\n                    const phase = data.roomPhases[key];\r\n                    phasesAsText = `${phasesAsText} \\n\\t${phase}`;\r\n                    if (parseInt(key, 10) === data.roomPhaseIndex + 1) {\r\n                        phasesAsText = phasesAsText + \" <==\";\r\n                    }\r\n                }\r\n                roomPhasePanel.text = \"Room phases: \" + phasesAsText;\r\n            }\r\n            if (data.roomType) {\r\n                roomTypePanel.text = \"Room type: \" + data.roomType;\r\n            }\r\n        }\r\n        if (data.currentStage) {\r\n            currentStagePanel.text = \"Stage: \" + data.currentStage;\r\n        }\r\n        if (data.currentRoom) {\r\n            currentLevelPanel.text = \"Room: \" + data.currentRoom;\r\n        }\r\n        if (data.remainingEnemies && data.maxEnemies) {\r\n            enemiesCountPanel.text =\r\n                \"Killed enemies: \" + data.remainingEnemies + \"/\" + data.maxEnemies;\r\n        }\r\n    });\r\n    function UpdateTime(data) {\r\n        clockPanel.text =\r\n            data.timer_minute_10.toString() +\r\n                data.timer_minute_01.toString() +\r\n                \":\" +\r\n                data.timer_second_10.toString() +\r\n                data.timer_second_01.toString();\r\n    }\r\n    GameEvents.Subscribe(\"countdown\", UpdateTime);\r\n    GameEvents.Subscribe(\"not_enough_energy\", function () {\r\n        GameUI.SendCustomHUDError(\"Not Enough Energy\", \"versus_screen.towers_nopass\");\r\n    });\r\n    refunderButton.SetPanelEvent(\"onactivate\", () => {\r\n        const playerId = util.getCurrentPlayer();\r\n        GameEvents.SendCustomGameEventToServer(\"refund_points\", {\r\n            playerIndex: playerId,\r\n        });\r\n        refunderPanel.style.visibility = \"collapse\";\r\n    });\r\n    customHotkeysPanel.SetPanelEvent(\"onmouseover\", () => {\r\n        customHotkeysPanel.style.opacity = \"1.0\";\r\n    });\r\n    customHotkeysPanel.SetPanelEvent(\"onmouseout\", () => {\r\n        customHotkeysPanel.style.opacity = \"0.5\";\r\n    });\r\n    hideShowButton.SetPanelEvent(\"onactivate\", () => {\r\n        if (customHotkeysShowing) {\r\n            customHotkeysPanel.style.width = \"140px\";\r\n            customHotkeysAllRowsPanel.style.height = \"0px\";\r\n            customHotkeysTextPanel.text = \"SHOW HOTKEYS\";\r\n            swapButton.style.visibility = \"collapse\";\r\n            customHotkeysShowing = false;\r\n        }\r\n        else {\r\n            customHotkeysPanel.style.width = \"340px\";\r\n            customHotkeysAllRowsPanel.style.height = \"410px\";\r\n            customHotkeysTextPanel.text = \"HIDE HOTKEYS\";\r\n            swapButton.style.visibility = \"visible\";\r\n            customHotkeysShowing = true;\r\n        }\r\n    });\r\n    swapButton.SetPanelEvent(\"onactivate\", () => {\r\n        SwapRF();\r\n    });\r\n    function SwapRF() {\r\n        const playerId = util.getCurrentPlayer();\r\n        GameEvents.SendCustomGameEventToServer(\"swap_r_f\", {\r\n            playerIndex: playerId,\r\n        });\r\n    }\r\n    if (Game.GetMapInfo().map_display_name === \"pvp\") {\r\n        pvePanels.forEach((panel) => {\r\n            panel.style.visibility = \"collapse\";\r\n        });\r\n    }\r\n    else {\r\n        pvpPanels.forEach((panel) => {\r\n            panel.style.visibility = \"collapse\";\r\n        });\r\n    }\r\n})();\r\n","import CustomEntities from \"../customEntities\";\r\nimport CustomAbilities from \"../customAbilities\";\r\nconst customEntities = CustomEntities.GetInstance();\r\nconst customAbilities = CustomAbilities.GetInstance();\r\nexport default class LayoutController {\r\n    constructor() {\r\n        let topPanel = $.GetContextPanel();\r\n        while (topPanel.GetParent() != null) {\r\n            const upperPanel = topPanel.GetParent();\r\n            if (upperPanel) {\r\n                topPanel = upperPanel;\r\n            }\r\n        }\r\n        this.topPanel = topPanel;\r\n        this.dimmerPanel = $.CreatePanelWithProperties(\"Panel\", this.topPanel, \"customDimmer\", {\r\n            class: \"customDimmer\",\r\n            hittest: \"false\",\r\n            hittestchildren: \"false\",\r\n        });\r\n        this.dimmerPanel.style.height = \"100%\";\r\n        this.dimmerPanel.style.width = \"100%\";\r\n        this.dimmerPanel.style.backgroundColor = \"rgb(0, 0, 0)\";\r\n        this.dimmerPanel.style.opacity = \"0.0\";\r\n        this.dimmerPanel.style.transitionProperty = \"opacity\";\r\n        this.dimmerPanel.style.transitionDuration = \"0.5s\";\r\n        this.dimmerPanel.style.zIndex = -1;\r\n    }\r\n    static GetInstance() {\r\n        if (!LayoutController.instance) {\r\n            LayoutController.instance = new LayoutController();\r\n        }\r\n        return LayoutController.instance;\r\n    }\r\n    ShowDimmer() {\r\n        this.dimmerPanel.style.opacity = \"0.85\";\r\n    }\r\n    HideDimmer() {\r\n        this.dimmerPanel.style.opacity = \"0.0\";\r\n    }\r\n    GetTopPanel() {\r\n        return this.topPanel;\r\n    }\r\n    ChangeAbilityTextBySlotIndex(text, slotIndex) {\r\n        const boxName = \"Ability\" + slotIndex;\r\n        this.ChangeAbilityTextByBoxName(text, boxName);\r\n    }\r\n    ChangeAbilityTextByBoxName(text, boxName) {\r\n        const abilityPanel = this.topPanel.FindChildTraverse(boxName);\r\n        if (abilityPanel) {\r\n            const hotkey = abilityPanel.FindChildTraverse(\"HotkeyText\");\r\n            if (hotkey) {\r\n                hotkey.text = text;\r\n                hotkey.GetParent().visible = true;\r\n            }\r\n            else {\r\n                $.Schedule(2.0, () => {\r\n                    this.ChangeAbilityTextByBoxName(text, boxName);\r\n                });\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            $.Schedule(2.0, () => {\r\n                this.ChangeAbilityTextByBoxName(text, boxName);\r\n            });\r\n            return;\r\n        }\r\n    }\r\n    //MOVe this sOmeWhere\r\n    IsLocalSelectingOwnedUnit() {\r\n        const localPlayerId = Game.GetLocalPlayerID();\r\n        let selectedPlayerId = undefined;\r\n        const selectedEntity = Players.GetSelectedEntities(localPlayerId)[0];\r\n        if (selectedEntity) {\r\n            selectedPlayerId = Entities.GetPlayerOwnerID(selectedEntity);\r\n        }\r\n        return selectedPlayerId === localPlayerId;\r\n    }\r\n    UpdateCurrency() {\r\n        $.Schedule(0.03, () => {\r\n            if (this.UpdateCurrencyVisibility()) {\r\n                this.UpdateCurrencyValues();\r\n            }\r\n            this.UpdateCurrency();\r\n        });\r\n    }\r\n    UpdateCurrencyVisibility() {\r\n        if (!this.IsLocalSelectingOwnedUnit()) {\r\n            for (let i = 0; i < 9; i++) {\r\n                this.DisableAbilityEnergy(i);\r\n            }\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    UpdateCurrencyValues() {\r\n        const localPlayerId = Game.GetLocalPlayerID();\r\n        const selectedEntity = Players.GetSelectedEntities(localPlayerId)[0];\r\n        const entityData = customEntities.GetEntity(selectedEntity);\r\n        if (entityData) {\r\n            for (let i = 0; i < 9; i++) {\r\n                const abilityPanel = this.topPanel.FindChildTraverse(\"Ability\" + i);\r\n                if (abilityPanel) {\r\n                    const abilityIndex = Entities.GetAbility(selectedEntity, i);\r\n                    const abilityEnergyCost = customAbilities.GetEnergyCost(abilityIndex);\r\n                    const abilityManaCost = Abilities.GetManaCost(abilityIndex);\r\n                    this.UpdateResourceBoxOnAbility(abilityPanel, abilityManaCost, abilityEnergyCost);\r\n                    if (abilityEnergyCost > 0) {\r\n                        this.UpdateAbilityEnergy(abilityPanel, abilityEnergyCost, entityData.energy);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    UpdateResourceBoxOnAbility(abilityPanel, abilityManaCost, abilityEnergyCost) {\r\n        if (abilityManaCost > 0 || abilityEnergyCost > 0) {\r\n            abilityPanel.SetHasClass(\"no_mana_cost\", false);\r\n            const manaCost = abilityPanel.FindChildTraverse(\"ManaCost\");\r\n            const bevel = abilityPanel.FindChildTraverse(\"AbilityBevel\");\r\n            const image = abilityPanel.FindChildTraverse(\"AbilityImage\");\r\n            if (abilityEnergyCost > 0) {\r\n                manaCost.text = abilityEnergyCost.toString();\r\n                manaCost.style.color = \"rgb(233, 53, 53)\";\r\n            }\r\n            if (abilityManaCost > 0) {\r\n                manaCost.text = abilityManaCost.toString();\r\n                manaCost.style.color = \"#57b7ff\";\r\n                bevel.style.washColor = \"#6095FD\";\r\n                //image.style.washColor = '#57b7ff';\r\n            }\r\n        }\r\n        else {\r\n            abilityPanel.SetHasClass(\"no_mana_cost\", true);\r\n        }\r\n    }\r\n    UpdateAbilityEnergy(abilityPanel, abilityEnergyCost, entityEnergy) {\r\n        const image = abilityPanel.FindChildTraverse(\"AbilityImage\");\r\n        const bevel = abilityPanel.FindChildTraverse(\"AbilityBevel\");\r\n        const abilityButton = abilityPanel.FindChildTraverse(\"AbilityButton\");\r\n        if (entityEnergy >= abilityEnergyCost) {\r\n            abilityButton.style.preTransformScale2d = \"1.0\";\r\n            image.style.washColor = \"#bc591600\";\r\n            bevel.style.washColor = \"#bc591600\";\r\n        }\r\n        else {\r\n            abilityButton.style.preTransformScale2d = \"0.9\";\r\n            image.style.washColor = \"#bc5916\";\r\n            bevel.style.washColor = \"#bc5916\";\r\n        }\r\n    }\r\n    DisableAbilityEnergy(slotIndex) {\r\n        const abilityPanel = this.topPanel.FindChildTraverse(\"Ability\" + slotIndex);\r\n        if (abilityPanel) {\r\n            abilityPanel.SetHasClass(\"energy\", false);\r\n            abilityPanel.SetHasClass(\"no_mana_cost\", true);\r\n        }\r\n    }\r\n    EnablePanel(panelName) {\r\n        const panel = this.topPanel.FindChildTraverse(panelName);\r\n        if (panel) {\r\n            panel.style.visibility = \"visible\";\r\n        }\r\n    }\r\n    CollapsePanel(panelName) {\r\n        const panel = this.topPanel.FindChildTraverse(panelName);\r\n        if (panel) {\r\n            panel.style.visibility = \"collapse\";\r\n        }\r\n    }\r\n    CollapsePanelByClass(className) {\r\n        const panel = this.topPanel.FindChildrenWithClassTraverse(className)[0];\r\n        if (panel) {\r\n            panel.style.visibility = \"collapse\";\r\n        }\r\n    }\r\n    SetPanelMargin(panelName, margins) {\r\n        const panel = this.topPanel.FindChildTraverse(panelName);\r\n        if (panel) {\r\n            if (margins.bottom) {\r\n                panel.style.marginBottom = margins.bottom;\r\n            }\r\n            if (margins.right) {\r\n                panel.style.marginRight = margins.right;\r\n            }\r\n            if (margins.bottom) {\r\n                panel.style.marginBottom = margins.bottom;\r\n            }\r\n            if (margins.left) {\r\n                panel.style.marginLeft = margins.left;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import ProgressBar from \"../progressBar\";\r\nimport { modifiers } from \"../util\";\r\nexport default class Castpoint {\r\n    constructor(container, entityIndex) {\r\n        this.progressBar = new ProgressBar(\"castpoint__progress-bar\", container, {});\r\n        this.entityIndex = entityIndex;\r\n        this.container = container;\r\n        this.Update();\r\n    }\r\n    Update() {\r\n        let modifierIndex = modifiers.findModifierByName(this.entityIndex, \"modifier_casting\");\r\n        if (modifierIndex) {\r\n            modifierIndex = modifierIndex;\r\n            const duration = Buffs.GetDuration(this.entityIndex, modifierIndex);\r\n            const remaining = Buffs.GetRemainingTime(this.entityIndex, modifierIndex);\r\n            let progressRatio = 1;\r\n            if (remaining && duration) {\r\n                progressRatio = remaining / duration;\r\n            }\r\n            if (isNaN(progressRatio)) {\r\n                progressRatio = 1;\r\n            }\r\n            progressRatio = 1 - progressRatio;\r\n            this.progressBar.SetProgress(progressRatio * 100);\r\n            this.progressBar.SetForegroundColor(\"#FAFAFA\");\r\n            this.container.style.opacity = \"1.0\";\r\n        }\r\n        else {\r\n            const fillness = this.progressBar.GetProgress();\r\n            if (fillness < 100) {\r\n                this.progressBar.SetForegroundColor(\"rgb(238, 53, 0)\");\r\n            }\r\n            else {\r\n                this.progressBar.SetForegroundColor(\"rgb(51, 162, 40)\");\r\n            }\r\n            this.container.style.opacity = \"0.0\";\r\n        }\r\n        $.Schedule(0.03, () => {\r\n            this.Update();\r\n        });\r\n    }\r\n}\r\n","import { modifiers, panels } from \"../util\";\r\nexport default class Charges {\r\n    constructor(container, entityIndex, modifierName) {\r\n        this.panel = panels.createPanelSimple(container, \"charges\");\r\n        this.entityIndex = entityIndex;\r\n        this.modifierName = modifierName;\r\n        const textPanelLeft = panels.createPanelSimple(this.panel, \"charges__text\", \"Label\");\r\n        this.textPanelMid = panels.createPanelSimple(this.panel, \"charges__text charges__text--number\", \"Label\");\r\n        const textPanelRight = panels.createPanelSimple(this.panel, \"charges__text\", \"Label\");\r\n        textPanelLeft.text = \"(\";\r\n        this.textPanelMid.text = \"0\";\r\n        textPanelRight.text = \")\";\r\n        this.Update();\r\n    }\r\n    Update() {\r\n        let modifierIndex = modifiers.findModifierByName(this.entityIndex, this.modifierName);\r\n        if (modifierIndex) {\r\n            modifierIndex = modifierIndex;\r\n            const ammount = Buffs.GetStackCount(this.entityIndex, modifierIndex);\r\n            this.textPanelMid.text = ammount.toString();\r\n            this.textPanelMid.style.color = \"#FAFAFA\";\r\n            if (ammount == 0) {\r\n                this.textPanelMid.style.color = \"rgba(238, 53, 0, 1.0)\";\r\n            }\r\n        }\r\n        $.Schedule(0.03, () => {\r\n            this.Update();\r\n        });\r\n    }\r\n}\r\n","import { modifiers, panels } from \"../util\";\r\nexport default class Cooldown {\r\n    constructor(container, entityIndex, modifierName) {\r\n        this.panel = panels.createPanelSimple(container, \"cooldown\");\r\n        this.entityIndex = entityIndex;\r\n        this.modifierName = modifierName;\r\n        this.backgroundPanel = panels.createPanelSimple(this.panel, \"cooldown__background\");\r\n        this.foregroundPanel = panels.createPanelSimple(this.panel, \"cooldown__foreground\");\r\n        this.Update();\r\n    }\r\n    Update() {\r\n        let modifierIndex = modifiers.findModifierByName(this.entityIndex, this.modifierName);\r\n        if (modifierIndex) {\r\n            modifierIndex = modifierIndex;\r\n            const duration = Buffs.GetDuration(this.entityIndex, modifierIndex);\r\n            if (duration == -1) {\r\n                this.foregroundPanel.style.clip = \"radial(50% 50%, 0deg, \" + 360 + \"deg)\";\r\n                this.foregroundPanel.style.backgroundColor = \"rgb(162, 249, 154)\";\r\n                $.Schedule(0.03, () => {\r\n                    this.Update();\r\n                });\r\n                return;\r\n            }\r\n            const remaining = Buffs.GetRemainingTime(this.entityIndex, modifierIndex);\r\n            let progressRatio = 1;\r\n            if (remaining && duration) {\r\n                progressRatio = remaining / duration;\r\n            }\r\n            if (isNaN(progressRatio)) {\r\n                progressRatio = 1;\r\n            }\r\n            progressRatio = 1 - progressRatio;\r\n            const degree = 360 * progressRatio;\r\n            this.foregroundPanel.style.clip = \"radial(50% 50%, 0deg, \" + degree + \"deg)\";\r\n            this.foregroundPanel.style.backgroundColor = \"rgb(238, 53, 0)\";\r\n            if (degree == 360) {\r\n                this.foregroundPanel.style.backgroundColor = \"rgb(162, 249, 154)\";\r\n            }\r\n        }\r\n        $.Schedule(0.03, () => {\r\n            this.Update();\r\n        });\r\n    }\r\n    GetPanel() {\r\n        return this.panel;\r\n    }\r\n}\r\n","import Overhead from \"./overhead\";\r\nimport Recast from \"./recast\";\r\nimport Status from \"./status\";\r\nimport util, { colors, panels } from \"../util\";\r\nimport Player from \"./player\";\r\nimport Charges from \"./charges\";\r\nimport Cooldown from \"./cooldown\";\r\nimport Stacks from \"./stacks\";\r\nimport Health from \"../commonComponents/health\";\r\nimport Alliances from \"../alliances\";\r\nimport Castpoint from \"./castpoint\";\r\nimport MultipleBars from \"../commonComponents/multipleBars\";\r\nvar StatusScope;\r\n(function (StatusScope) {\r\n    StatusScope[StatusScope[\"STATUS_SCOPE_PUBLIC\"] = 1] = \"STATUS_SCOPE_PUBLIC\";\r\n    StatusScope[StatusScope[\"STATUS_SCOPE_LOCAL\"] = 2] = \"STATUS_SCOPE_LOCAL\";\r\n})(StatusScope || (StatusScope = {}));\r\nconst alliances = Alliances.GetInstance();\r\nexport default class HeroOverhead extends Overhead {\r\n    constructor(heroData) {\r\n        super(heroData.entityIndex);\r\n        const alliance = alliances.findAllianceByTeam(heroData.teamId);\r\n        const localPlayerId = Game.GetLocalPlayerID();\r\n        this.isLocalPlayer = localPlayerId == heroData.playerId;\r\n        this.color = colors[alliance.GetColor()];\r\n        this.topPanel = panels.createPanelSimple(this.containerPanel, \"unit-overhead__top\");\r\n        this.midPanel = panels.createPanelSimple(this.containerPanel, \"unit-overhead__mid\");\r\n        this.botPanel = panels.createPanelSimple(this.containerPanel, \"unit-overhead__bot unit-overhead__bot--hero\");\r\n        this.chargesPanel = panels.createPanelSimple(this.botPanel, \"unit-overhead-charges\");\r\n        const resourcesPanel = panels.createPanelSimple(this.botPanel, \"unit-overhead-resources\");\r\n        this.healthPanel = panels.createPanelSimple(resourcesPanel, \"unit-overhead-resources__health\");\r\n        this.manaPanel = panels.createPanelSimple(resourcesPanel, \"unit-overhead-resources__mana\");\r\n        this.energyPanel = panels.createPanelSimple(resourcesPanel, \"unit-overhead-resources__energy\");\r\n        this.castpointPanel = panels.createPanelSimple(resourcesPanel, \"unit-overhead-resources__castpoint\");\r\n        this.ammoPanel = panels.createPanelSimple(this.botPanel, \"unit-overhead-ammo\");\r\n        this.stackbarsPanel = panels.createPanelSimple(this.ammoPanel, \"unit-overhead-ammo__stackbars\");\r\n        this.cooldownPanel = panels.createPanelSimple(this.ammoPanel, \"unit-overhead-ammo__cooldown\");\r\n        if (alliance.IsLocal()) {\r\n            this.mana = new MultipleBars(this.manaPanel, {\r\n                value: heroData.mana,\r\n                maxValue: heroData.maxMana,\r\n                className: \"mana\",\r\n                fullColor: colors.Gradient(colors.blue),\r\n                valuePerCell: 25,\r\n            });\r\n            this.energy = new MultipleBars(this.energyPanel, {\r\n                value: heroData.energy,\r\n                maxValue: heroData.maxEnergy,\r\n                className: \"energy\",\r\n                fullColor: colors.Gradient(colors.yellowRed),\r\n                valuePerCell: heroData.energyPerCell || 100,\r\n            });\r\n        }\r\n        this.recast = new Recast(this.topPanel);\r\n        this.status = new Status(this.midPanel, heroData.entityIndex);\r\n        const player = new Player(this.midPanel, heroData.playerId, this.color);\r\n        this.health = new Health(this.healthPanel, {\r\n            color: this.color,\r\n            rounded: true,\r\n        });\r\n        this.castpoint = new Castpoint(this.castpointPanel, heroData.entityIndex);\r\n        this.midSwitchPanel = new SwitchPanel(player.GetPanel(), this.status.GetPanel());\r\n        this.botSwitchPanel = new SwitchPanel(this.cooldownPanel, this.stackbarsPanel);\r\n        if (heroData.cooldown && this.isLocalPlayer) {\r\n            this.cooldown = new Cooldown(this.cooldownPanel, heroData.entityIndex, heroData.cooldown);\r\n            this.botSwitchPanel.SetState(0);\r\n        }\r\n        if (heroData.stackbars && this.isLocalPlayer) {\r\n            this.stacks = new Stacks(this.ammoPanel, heroData.entityIndex, heroData.stackbars);\r\n            this.botSwitchPanel.SetState(1);\r\n        }\r\n        if (heroData.charges && this.isLocalPlayer) {\r\n            this.charges = new Charges(this.chargesPanel, heroData.entityIndex, heroData.charges);\r\n        }\r\n        this.UpdateData(heroData);\r\n    }\r\n    ShouldShowStatus(status) {\r\n        return !util.isEmptyObject(status);\r\n    }\r\n    GetCurrentStatus(status) {\r\n        let currentStatus = undefined;\r\n        for (const modifierName in status) {\r\n            const tempStatus = status[modifierName];\r\n            if (!currentStatus || (tempStatus.priority > currentStatus.priority)) {\r\n                if (tempStatus.scope == StatusScope.STATUS_SCOPE_LOCAL) {\r\n                    if (this.isLocalPlayer) {\r\n                        currentStatus = tempStatus;\r\n                    }\r\n                }\r\n                else {\r\n                    currentStatus = tempStatus;\r\n                }\r\n            }\r\n        }\r\n        return currentStatus;\r\n    }\r\n    UpdateData(heroData) {\r\n        if (!util.isEmptyObject(heroData.recast) && this.isLocalPlayer) {\r\n            const currentRecast = util.getFirstObjectElement(heroData.recast);\r\n            this.recast.Activate(currentRecast.ability_name, currentRecast.key);\r\n        }\r\n        else {\r\n            this.recast.Deactivate();\r\n        }\r\n        if (this.ShouldShowStatus(heroData.status)) {\r\n            const currentStatus = this.GetCurrentStatus(heroData.status);\r\n            if (currentStatus) {\r\n                const { label, style_name, trigger, modifier_name, max_stacks, content } = currentStatus;\r\n                if (!this.status.HasData()) {\r\n                    this.status.SetData(label, style_name, trigger, modifier_name, max_stacks, content);\r\n                }\r\n                if (!this.status.IsActive()) {\r\n                    this.status.Activate();\r\n                }\r\n                this.midSwitchPanel.SetState(1);\r\n            }\r\n            else {\r\n                this.status.Deactivate();\r\n                this.midSwitchPanel.SetState(0);\r\n            }\r\n        }\r\n        else {\r\n            this.status.Deactivate();\r\n            this.midSwitchPanel.SetState(0);\r\n        }\r\n        this.health.Update(heroData.health, heroData.treshold, heroData.maxHealth, heroData.shield);\r\n        if (this.mana) {\r\n            this.mana.Update(heroData.mana, heroData.maxMana);\r\n        }\r\n        if (this.energy) {\r\n            this.energy.Update(heroData.energy, heroData.maxEnergy);\r\n        }\r\n    }\r\n}\r\nclass SwitchPanel {\r\n    constructor(firstPanel, secondPanel) {\r\n        this.childrens = [];\r\n        this.state = 1;\r\n        this.AddPanel(firstPanel);\r\n        this.AddPanel(secondPanel);\r\n        this.Switch();\r\n    }\r\n    ShutDownBoth() {\r\n        this.childrens[0].style.visibility = \"collapse\";\r\n        this.childrens[1].style.visibility = \"collapse\";\r\n        this.state = -1;\r\n    }\r\n    Switch() {\r\n        if (this.state == 0) {\r\n            this.childrens[0].style.visibility = \"collapse\";\r\n            this.childrens[1].style.visibility = \"visible\";\r\n            this.state = 1;\r\n        }\r\n        else {\r\n            this.childrens[1].style.visibility = \"collapse\";\r\n            this.childrens[0].style.visibility = \"visible\";\r\n            this.state = 0;\r\n        }\r\n    }\r\n    SetState(state) {\r\n        if (this.state != state) {\r\n            this.Switch();\r\n        }\r\n    }\r\n    AddPanel(panel) {\r\n        this.childrens.push(panel);\r\n    }\r\n}\r\n","import { modifiers, entities, panels } from \"../util\";\r\nimport LayoutController from \"../layout/layoutController\";\r\nconst screenWidth = Game.GetScreenWidth();\r\nconst sreenHeight = Game.GetScreenHeight();\r\nconst scale = 1080 / sreenHeight;\r\nexport default class Overhead {\r\n    constructor(entiyIndex) {\r\n        this.thinkInterval = 0.03;\r\n        this.entityIndex = entiyIndex;\r\n        const layout = LayoutController.GetInstance();\r\n        const basePanel = layout.GetTopPanel().FindChildrenWithClassTraverse(\"main\")[0];\r\n        this.containerPanel = panels.createPanelSimple(basePanel, \"overhead\");\r\n        this.containerPanel.style.width = \"160px\";\r\n        this.containerPanel.style.flowChildren = \"down\";\r\n        this.Update();\r\n    }\r\n    Update() {\r\n        if (this.UpdateVisibility()) {\r\n            this.UpdatePosition();\r\n        }\r\n        $.Schedule(this.thinkInterval, () => {\r\n            this.Update();\r\n        });\r\n    }\r\n    UpdatePosition() {\r\n        const origin = Entities.GetAbsOrigin(this.entityIndex);\r\n        const offset = Entities.GetHealthBarOffset(this.entityIndex);\r\n        const wx = Game.WorldToScreenX(origin[0], origin[1], origin[2] + offset);\r\n        const wy = Game.WorldToScreenY(origin[0], origin[1], origin[2] + offset);\r\n        const check = Game.ScreenXYToWorld(wx, wy);\r\n        if (check[1] != 0) {\r\n            if (wy > sreenHeight || wx < 0 || wx > screenWidth || wy < 0) {\r\n                this.SoftHide();\r\n                return false;\r\n            }\r\n            const x = scale * Math.min(screenWidth - this.containerPanel.actuallayoutwidth, Math.max(0, wx - this.containerPanel.actuallayoutwidth / 2));\r\n            const y = scale * Math.min(sreenHeight - this.containerPanel.actuallayoutheight, Math.max(0, wy - this.containerPanel.actuallayoutheight));\r\n            this.containerPanel.style.position = x + \"px \" + y + \"px 0px;\";\r\n            if (this.containerPanel.actuallayoutwidth == 0 &&\r\n                this.containerPanel.actuallayoutheight == 0) {\r\n                this.SoftHide();\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            this.SoftHide();\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    UpdateVisibility() {\r\n        const hide = modifiers.findModifierByName(this.entityIndex, \"modifier_hide_bar\");\r\n        if (Entities.IsAlive(this.entityIndex) && entities.isVisibleByLocal(this.entityIndex) && !hide) {\r\n            this.Show();\r\n            return true;\r\n        }\r\n        else {\r\n            this.Hide();\r\n            return false;\r\n        }\r\n    }\r\n    SoftHide() {\r\n        this.containerPanel.style.position = \"-1000px -1000px 0px;\";\r\n    }\r\n    Hide() {\r\n        this.containerPanel.style.opacity = \"0.0\";\r\n    }\r\n    Show() {\r\n        this.containerPanel.style.opacity = \"1.0\";\r\n    }\r\n    SetWidth(width) {\r\n        this.containerPanel.style.width = width + \"px\";\r\n    }\r\n}\r\n","import { colors, panels } from \"../util\";\r\nexport default class Player {\r\n    constructor(container, playerId, color) {\r\n        this.panel = panels.createPanelSimple(container, \"player-name\");\r\n        const textPanel = panels.createPanelSimple(this.panel, \"player-name__text\", \"Label\");\r\n        textPanel.text = Players.GetPlayerName(playerId);\r\n        textPanel.style.color = colors.Gradient(color);\r\n    }\r\n    GetPanel() {\r\n        return this.panel;\r\n    }\r\n}\r\n","import { panels } from \"../util\";\r\nexport default class Recast {\r\n    constructor(container) {\r\n        this.panel = panels.createPanelSimple(container, \"recast\");\r\n        this.imagePanel = panels.createPanelSimple(this.panel, \"recast__image\", \"DOTAAbilityImage\");\r\n        this.textPanel = panels.createPanelSimple(this.panel, \"recast__text\", \"Label\");\r\n        this.imagePanel.abilityname = \"\";\r\n        this.textPanel.text = \"Hello\";\r\n        this.Deactivate();\r\n    }\r\n    Deactivate() {\r\n        this.panel.SetHasClass(\"recast--deactivated\", true);\r\n    }\r\n    Activate(abilityName, key) {\r\n        this.imagePanel.abilityname = abilityName;\r\n        this.textPanel.text = key;\r\n        this.panel.SetHasClass(\"recast--deactivated\", false);\r\n    }\r\n}\r\n","import { modifiers, panels } from \"../util\";\r\nexport default class Stacks {\r\n    constructor(container, entityIndex, modifierName) {\r\n        this.panel = panels.createPanelSimple(container, \"stacks\");\r\n        this.entityIndex = entityIndex;\r\n        this.modifierName = modifierName;\r\n        const stackPanels = [];\r\n        for (let i = 0; i < 4; i++) {\r\n            stackPanels.push(panels.createPanelSimple(this.panel, \"stacks__stack\"));\r\n        }\r\n        this.Update();\r\n    }\r\n    Update() {\r\n        let modifierIndex = modifiers.findModifierByName(this.entityIndex, this.modifierName);\r\n        if (modifierIndex) {\r\n            modifierIndex = modifierIndex;\r\n            const stacks = Buffs.GetStackCount(this.entityIndex, modifierIndex);\r\n            for (let i = 0; i < 4; i++) {\r\n                if (i < stacks) {\r\n                    this.FillStack(i);\r\n                }\r\n                else {\r\n                    this.EmptyStack(i);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < 4; i++) {\r\n                this.EmptyStack(i);\r\n            }\r\n        }\r\n        $.Schedule(0.03, () => {\r\n            this.Update();\r\n        });\r\n    }\r\n    ChangeStackState(index, full) {\r\n        this.panel.GetChild(index).SetHasClass(\"stacks__stack--empty\", !full);\r\n    }\r\n    EmptyStack(index) {\r\n        this.ChangeStackState(index, false);\r\n    }\r\n    FillStack(index) {\r\n        this.ChangeStackState(index, true);\r\n    }\r\n    GetPanel() {\r\n        return this.panel;\r\n    }\r\n}\r\n","import ProgressBar from \"../progressBar\";\r\nimport { modifiers, panels } from \"../util\";\r\nexport var StatusTrigger;\r\n(function (StatusTrigger) {\r\n    StatusTrigger[StatusTrigger[\"STATUS_TRIGGER_DURATION\"] = 1] = \"STATUS_TRIGGER_DURATION\";\r\n    StatusTrigger[StatusTrigger[\"STATUS_TRIGGER_STACKS\"] = 2] = \"STATUS_TRIGGER_STACKS\";\r\n})(StatusTrigger || (StatusTrigger = {}));\r\nexport var StatusContent;\r\n(function (StatusContent) {\r\n    StatusContent[StatusContent[\"STATUS_CONTENT_CLEAROUT\"] = 1] = \"STATUS_CONTENT_CLEAROUT\";\r\n    StatusContent[StatusContent[\"STATUS_CONTENT_FILLUP\"] = 2] = \"STATUS_CONTENT_FILLUP\";\r\n})(StatusContent || (StatusContent = {}));\r\nexport default class Status {\r\n    constructor(container, entityIndex) {\r\n        this.active = true;\r\n        this.panel = panels.createPanelSimple(container, \"status\");\r\n        this.entityIndex = entityIndex;\r\n        const topPanel = panels.createPanelSimple(this.panel, \"status__top\");\r\n        const botPanel = panels.createPanelSimple(this.panel, \"status__bot\");\r\n        this.textGlowPanel = panels.createPanelSimple(topPanel, \"status__text status__text--glow\", \"Label\");\r\n        this.textPanel = panels.createPanelSimple(topPanel, \"status__text\", \"Label\");\r\n        this.progressBar = new ProgressBar(\"status__progress-bar\", botPanel, {\r\n            background_color: \"rgba(0, 0, 0, 0.9)\"\r\n        });\r\n        this.SetText(\"Status\");\r\n    }\r\n    SetText(text) {\r\n        this.textGlowPanel.text = text.toUpperCase();\r\n        this.textPanel.text = text.toUpperCase();\r\n    }\r\n    IsActive() {\r\n        return this.active;\r\n    }\r\n    Activate() {\r\n        this.active = true;\r\n        this.panel.style.visibility = \"visible\";\r\n        this.Update();\r\n    }\r\n    HasData() {\r\n        return this.modifierName !== undefined;\r\n    }\r\n    SetData(text, style, trigger, modifierName, maxStacks, content) {\r\n        this.modifierName = modifierName;\r\n        this.trigger = trigger;\r\n        this.maxStacks = maxStacks;\r\n        this.style = style;\r\n        this.content = content;\r\n        this.SetText(text);\r\n    }\r\n    Deactivate() {\r\n        this.modifierName = undefined;\r\n        this.trigger = undefined;\r\n        this.maxStacks = undefined;\r\n        this.style = undefined;\r\n        this.panel.style.visibility = \"collapse\";\r\n        this.active = false;\r\n        this.SetText(\"Status\");\r\n    }\r\n    Update() {\r\n        if (!this.active || !this.HasData()) {\r\n            return;\r\n        }\r\n        else {\r\n            let modifierIndex = modifiers.findModifierByName(this.entityIndex, this.modifierName);\r\n            if (modifierIndex) {\r\n                modifierIndex = modifierIndex;\r\n                const progressRatio = this.GetProgressRatio(this.entityIndex, modifierIndex, this.content, this.trigger, this.maxStacks);\r\n                this.progressBar.SetProgress(progressRatio * 100);\r\n                const style = styles[this.style] && styles[this.style] || styles[\"Generic\"];\r\n                this.progressBar.SetForegroundColor(style.backgroundColor || \"#FAFAFA\");\r\n                this.textGlowPanel.style.textShadow = style.textShadow || \"none\";\r\n                this.textPanel.style.color = style.color || \"#FAFAFA\";\r\n            }\r\n            $.Schedule(0.03, () => {\r\n                this.Update();\r\n            });\r\n        }\r\n    }\r\n    GetPanel() {\r\n        return this.panel;\r\n    }\r\n    GetProgressRatio(entityIndex, modifierIndex, content, trigger, maxStacks) {\r\n        let progressRatio = 1;\r\n        if (trigger == StatusTrigger.STATUS_TRIGGER_DURATION) {\r\n            const duration = Buffs.GetDuration(entityIndex, modifierIndex);\r\n            const remaining = Buffs.GetRemainingTime(entityIndex, modifierIndex);\r\n            if (remaining && duration) {\r\n                progressRatio = remaining / duration;\r\n            }\r\n            if (isNaN(progressRatio)) {\r\n                progressRatio = 1;\r\n            }\r\n            if (content == StatusContent.STATUS_CONTENT_FILLUP) {\r\n                progressRatio = 1 - progressRatio;\r\n            }\r\n        }\r\n        else if (trigger == StatusTrigger.STATUS_TRIGGER_STACKS) {\r\n            const stacks = (Buffs.GetStackCount(entityIndex, modifierIndex) || 0);\r\n            if (maxStacks) {\r\n                progressRatio = stacks / maxStacks;\r\n            }\r\n            if (isNaN(progressRatio)) {\r\n                progressRatio = 1;\r\n            }\r\n            if (content == StatusContent.STATUS_CONTENT_FILLUP) {\r\n                progressRatio = 1 - progressRatio;\r\n            }\r\n        }\r\n        return progressRatio;\r\n    }\r\n}\r\nconst SKY_BLUE = \"#84f4eb\";\r\nconst LIGHT_GREEN = \"#b2f7bd\";\r\nconst PURPLE = \"#C655C4\";\r\nconst BLUE = \"#3b55ed\";\r\nconst LIGHT_BLUE = \"#81c3f9\";\r\nconst RED = \"#ed4747\";\r\nconst ORANGE = \"#E55C34\";\r\nconst styles = {};\r\nstyles[\"Generic\"] = { backgroundColor: \"#F5E767\", textShadow: CreateTextShadow(\"#F5E767\"), };\r\nstyles[\"Heal\"] = { backgroundColor: LIGHT_GREEN, color: LIGHT_GREEN, };\r\nstyles[\"Mana\"] = { backgroundColor: LIGHT_BLUE, color: LIGHT_BLUE, };\r\nstyles[\"Ultimate\"] = { backgroundColor: \"#F5E767\", textShadow: CreateTextShadow(\"#F5E767\"), };\r\nstyles[\"Recast\"] = { backgroundColor: \"#ADC6DE\", textShadow: CreateTextShadow(\"#ADC6DE\"), };\r\nstyles[\"Silence\"] = { backgroundColor: \"#C5FAFF\", textShadow: CreateTextShadow(\"#FFBF20\"), };\r\nstyles[\"Adrenaline\"] = { backgroundColor: \"#CEDCFF\", color: \"#CEDCFF\" };\r\nstyles[\"Shield\"] = { backgroundColor: \"#E8C070\", };\r\nstyles[\"Counter\"] = { backgroundColor: \"#9DBDEC\", textShadow: CreateTextShadow(\"#9DBDEC\"), };\r\nstyles[\"Stun\"] = { backgroundColor: \"#ABD5FF\", textShadow: CreateTextShadow(\"#ABD5FF\"), };\r\nstyles[\"Slow\"] = { backgroundColor: \"#C2AB71\", color: \"#C2AB71\" };\r\nstyles[\"Root\"] = { backgroundColor: \"#94A551\", textShadow: CreateTextShadow(\"#94A551\"), };\r\nstyles[\"Channeling\"] = { backgroundColor: \"#F5E767\", };\r\nstyles[\"Invisible\"] = { backgroundColor: \"#AEB3A3\", color: \"#AEB3A3\", };\r\nstyles[\"BladeFury\"] = { backgroundColor: ORANGE, textShadow: CreateTextShadow(\"#DC8668\"), color: \"#FFF5D7\", };\r\nstyles[\"Mekansm\"] = { backgroundColor: SKY_BLUE, };\r\nstyles[\"Meteor\"] = { backgroundColor: SKY_BLUE, color: \"#DC8668\", };\r\nstyles[\"Nullify\"] = { backgroundColor: PURPLE, textShadow: CreateTextShadow(PURPLE), };\r\nstyles[\"Swiftness\"] = { backgroundColor: LIGHT_GREEN, color: LIGHT_GREEN };\r\nstyles[\"Inhibit\"] = { backgroundColor: BLUE, textShadow: CreateTextShadow(BLUE) };\r\nstyles[\"Sacrifice\"] = { backgroundColor: LIGHT_BLUE, textShadow: CreateTextShadow(RED), };\r\nstyles[\"Flutter\"] = { backgroundColor: LIGHT_GREEN, textShadow: CreateTextShadow(LIGHT_GREEN), };\r\nstyles[\"Fear\"] = { backgroundColor: ORANGE, textShadow: CreateTextShadow(\"#DC8668\"), color: \"#DC8668\" };\r\nstyles[\"PhaseShift\"] = { backgroundColor: LIGHT_BLUE, textShadow: CreateTextShadow(LIGHT_BLUE) };\r\nstyles[\"SpellBlock\"] = { backgroundColor: LIGHT_BLUE, textShadow: CreateTextShadow(RED) };\r\nstyles[\"FairyDust\"] = { backgroundColor: PURPLE, textShadow: CreateTextShadow(LIGHT_BLUE) };\r\nstyles[\"Desolate\"] = { backgroundColor: \"#C655C4\", color: \"#C655C4\" };\r\nstyles[\"DancingBlades\"] = { backgroundColor: \"#DC8668\", color: \"#DC8668\" };\r\nstyles[\"Raze\"] = { backgroundColor: ORANGE, textShadow: CreateTextShadow(\"#DC8668\"), color: \"#E8C070\" };\r\nstyles[\"Desolation\"] = { backgroundColor: \"#E55C34\", textShadow: CreateTextShadow(\"#DC8668\"), color: \"#E8C070\" };\r\nstyles[\"StormUnleashed\"] = { backgroundColor: BLUE, textShadow: CreateTextShadow(LIGHT_BLUE), color: SKY_BLUE };\r\nstyles[\"Bleeding\"] = { backgroundColor: ORANGE, textShadow: CreateTextShadow(PURPLE), color: RED };\r\nstyles[\"Revenant\"] = { backgroundColor: ORANGE, textShadow: CreateTextShadow(PURPLE), color: RED };\r\nstyles[\"Ruby\"] = { backgroundColor: ORANGE, textShadow: CreateTextShadow(ORANGE), color: RED };\r\nstyles[\"Darkness\"] = { backgroundColor: \"#DC8668\", color: \"#DC8668\" };\r\nstyles[\"Sleep\"] = { backgroundColor: \"#CB8CFF\", textShadow: CreateTextShadow(\"#CB8CFF\"), };\r\nstyles[\"Sapphire\"] = { backgroundColor: LIGHT_BLUE, color: LIGHT_BLUE, textShadow: CreateTextShadow(BLUE), };\r\nstyles[\"Emerald\"] = { backgroundColor: LIGHT_GREEN, textShadow: CreateTextShadow(LIGHT_GREEN), };\r\nfunction CreateTextShadow(color) {\r\n    return \"0px 0px 30px 8.0 \" + color + \";\";\r\n}\r\n","import Overhead from \"./overhead\";\r\nimport Status from \"./status\";\r\nimport util, { colors, panels } from \"../util\";\r\nimport Health from \"../commonComponents/health\";\r\nvar StatusScope;\r\n(function (StatusScope) {\r\n    StatusScope[StatusScope[\"STATUS_SCOPE_PUBLIC\"] = 1] = \"STATUS_SCOPE_PUBLIC\";\r\n    StatusScope[StatusScope[\"STATUS_SCOPE_LOCAL\"] = 2] = \"STATUS_SCOPE_LOCAL\";\r\n})(StatusScope || (StatusScope = {}));\r\nvar BeenHurt;\r\n(function (BeenHurt) {\r\n    BeenHurt[BeenHurt[\"BEEN_HURT\"] = 1] = \"BEEN_HURT\";\r\n    BeenHurt[BeenHurt[\"NOT_HURT\"] = 0] = \"NOT_HURT\";\r\n})(BeenHurt || (BeenHurt = {}));\r\nexport default class UnitOverhead extends Overhead {\r\n    constructor(unitData) {\r\n        super(unitData.entityIndex);\r\n        const localPlayerId = Game.GetLocalPlayerID();\r\n        this.hideWhenNotHurt = unitData.hideWhenNotHurt ? unitData.hideWhenNotHurt : true;\r\n        this.active = !this.hideWhenNotHurt;\r\n        this.isLocalPlayer = localPlayerId == unitData.playerId;\r\n        this.color = colors.orange;\r\n        this.topPanel = panels.createPanelSimple(this.containerPanel, \"unit-overhead__top\");\r\n        this.midPanel = panels.createPanelSimple(this.containerPanel, \"unit-overhead__mid\");\r\n        this.botPanel = panels.createPanelSimple(this.containerPanel, \"unit-overhead__bot\");\r\n        const resourcesPanel = panels.createPanelSimple(this.botPanel, \"unit-overhead-resources\");\r\n        this.healthPanel = panels.createPanelSimple(resourcesPanel, \"unit-overhead-resources__health\");\r\n        this.status = new Status(this.midPanel, unitData.entityIndex);\r\n        this.health = new Health(this.healthPanel, {\r\n            color: this.color,\r\n            rounded: true,\r\n            maxTreshold: unitData.maxHealth,\r\n            shieldOnFront: true,\r\n        });\r\n        if (unitData.beenHurt === BeenHurt.NOT_HURT && this.hideWhenNotHurt) {\r\n            this.Hide();\r\n            this.status.Deactivate();\r\n            this.health.Deactivate();\r\n        }\r\n        this.UpdateData(unitData);\r\n    }\r\n    ShouldShowStatus(status) {\r\n        return !util.isEmptyObject(status);\r\n    }\r\n    ShouldActivate(beenHurt) {\r\n        if (this.hideWhenNotHurt && beenHurt === BeenHurt.NOT_HURT) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    GetCurrentStatus(status) {\r\n        let currentStatus = undefined;\r\n        for (const modifierName in status) {\r\n            const tempStatus = status[modifierName];\r\n            if (!currentStatus || (tempStatus.priority > currentStatus.priority)) {\r\n                if (tempStatus.scope == StatusScope.STATUS_SCOPE_LOCAL) {\r\n                    if (this.isLocalPlayer) {\r\n                        currentStatus = tempStatus;\r\n                    }\r\n                }\r\n                else {\r\n                    currentStatus = tempStatus;\r\n                }\r\n            }\r\n        }\r\n        return currentStatus;\r\n    }\r\n    UpdateData(unitData) {\r\n        if (!this.active) {\r\n            if (this.ShouldActivate(unitData.beenHurt)) {\r\n                this.Show();\r\n                this.status.Activate();\r\n                this.health.Activate();\r\n                this.active = true;\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n        }\r\n        if (this.ShouldShowStatus(unitData.status)) {\r\n            const currentStatus = this.GetCurrentStatus(unitData.status);\r\n            if (currentStatus) {\r\n                const { label, style_name, trigger, modifier_name, max_stacks, content } = currentStatus;\r\n                if (!this.status.HasData()) {\r\n                    this.status.SetData(label, style_name, trigger, modifier_name, max_stacks, content);\r\n                }\r\n                if (!this.status.IsActive()) {\r\n                    this.status.Activate();\r\n                }\r\n            }\r\n            else {\r\n                this.status.Deactivate();\r\n            }\r\n        }\r\n        else {\r\n            this.status.Deactivate();\r\n        }\r\n        this.health.Update(unitData.health, unitData.health, unitData.maxHealth, unitData.shield);\r\n    }\r\n}\r\nclass SwitchPanel {\r\n    constructor(firstPanel, secondPanel) {\r\n        this.childrens = [];\r\n        this.state = 1;\r\n        this.AddPanel(firstPanel);\r\n        this.AddPanel(secondPanel);\r\n        this.Switch();\r\n    }\r\n    ShutDownBoth() {\r\n        this.childrens[0].style.visibility = \"collapse\";\r\n        this.childrens[1].style.visibility = \"collapse\";\r\n        this.state = -1;\r\n    }\r\n    Switch() {\r\n        if (this.state == 0) {\r\n            this.childrens[0].style.visibility = \"collapse\";\r\n            this.childrens[1].style.visibility = \"visible\";\r\n            this.state = 1;\r\n        }\r\n        else {\r\n            this.childrens[1].style.visibility = \"collapse\";\r\n            this.childrens[0].style.visibility = \"visible\";\r\n            this.state = 0;\r\n        }\r\n    }\r\n    SetState(state) {\r\n        if (this.state != state) {\r\n            this.Switch();\r\n        }\r\n    }\r\n    AddPanel(panel) {\r\n        this.childrens.push(panel);\r\n    }\r\n}\r\n","export default class ProgressBar {\r\n    constructor(id, parent, data) {\r\n        this.cellWidth = undefined;\r\n        this.id = id;\r\n        this.parent = parent;\r\n        const foreground_color = data.foreground_color || \"#FAFAFA\";\r\n        const background_color = data.background_color || \"rgba(36, 42, 53, 0.8)\";\r\n        const font_size = data.font_size || \"12px\";\r\n        const delayed = data.delayed || false;\r\n        const show_value = data.show_value || false;\r\n        const border_radius = data.border_radius || \"0\";\r\n        this.panel = $.CreatePanelWithProperties(\"Panel\", parent, id, {\r\n            class: \"ProgressBar\",\r\n            hittest: \"false\",\r\n            hittestchildren: \"false\"\r\n        });\r\n        this.resizablePanel = $.CreatePanelWithProperties(\"Panel\", this.panel, \"id\", {\r\n            id: \"ProgressBar__Resizable\",\r\n            class: \"ProgressBar__Resizable\",\r\n            hittest: \"false\",\r\n            hittestchildren: \"false\"\r\n        });\r\n        this.fixedPanel = $.CreatePanelWithProperties(\"Panel\", this.panel, \"id\", {\r\n            class: \"ProgressBar__Fixed\",\r\n            id: \"ProgressBar__Fixed\",\r\n            hittest: \"false\",\r\n            hittestchildren: \"false\"\r\n        });\r\n        this.backgroundPanel = $.CreatePanelWithProperties(\"Panel\", this.resizablePanel, \"id\", {\r\n            id: \"ProgressBar__Background\",\r\n            class: \"ProgressBar__Background\",\r\n            hittest: \"false\",\r\n            hittestchildren: \"false\"\r\n        });\r\n        this.textPanel = $.CreatePanelWithProperties(\"Label\", this.fixedPanel, \"id\", {\r\n            id: \"ProgressBar__Text\",\r\n            class: \"ProgressBar__Text\",\r\n            hittest: \"false\",\r\n            hittestchildren: \"false\",\r\n            text: \"-\"\r\n        });\r\n        this.cellsPanel = $.CreatePanelWithProperties(\"Panel\", this.fixedPanel, \"id\", {\r\n            id: \"ProgressBar__Cells\",\r\n            class: \"ProgressBar__Cells\",\r\n            hittest: \"false\",\r\n            hittestchildren: \"false\"\r\n        });\r\n        this.delayPanel = $.CreatePanelWithProperties(\"Panel\", this.backgroundPanel, \"id\", {\r\n            id: \"ProgressBar__Delay\",\r\n            class: \"ProgressBar__Delay\",\r\n            hittest: \"false\",\r\n            hittestchildren: \"false\"\r\n        });\r\n        this.foregroundPanel = $.CreatePanelWithProperties(\"Panel\", this.backgroundPanel, \"id\", {\r\n            id: \"ProgressBar__Foreground\",\r\n            class: \"ProgressBar__Foreground\",\r\n            hittest: \"false\",\r\n            hittestchildren: \"false\"\r\n        });\r\n        this.foregroundPanel.style.width = \"0%\";\r\n        this.foregroundPanel.style.borderRadius = border_radius;\r\n        this.delayPanel.style.borderRadius = border_radius;\r\n        this.backgroundPanel.style.borderRadius = border_radius;\r\n        this.delayPanel.style.visibility = delayed && \"visible\" || \"collapse\";\r\n        this.textPanel.style.visibility = show_value && \"visible\" || \"collapse\";\r\n        this.textPanel.style.fontSize = font_size;\r\n        this.backgroundPanel.style.backgroundColor = background_color;\r\n        this.foregroundPanel.style.backgroundColor = foreground_color;\r\n    }\r\n    SetTotalWidth(width) {\r\n        this.panel.style.width = width + \"%\";\r\n    }\r\n    SetPanelWidth(width) {\r\n        this.resizablePanel.style.width = width + \"%\";\r\n    }\r\n    SetProgress(progress) {\r\n        this.foregroundPanel.style.width = progress.toString() + \"%\";\r\n        this.delayPanel.style.width = progress.toString() + \"%\";\r\n    }\r\n    SetValue(value) {\r\n        this.textPanel.text = value;\r\n    }\r\n    SetForegroundColor(color) {\r\n        this.foregroundPanel.style.backgroundColor = color;\r\n    }\r\n    SetVisibility(visibility) {\r\n        this.panel.style.visibility = visibility;\r\n    }\r\n    SetBorder(data) {\r\n        if (data.left) {\r\n            this.backgroundPanel.style.borderLeft = data.left + \"px solid rgb(36, 42, 53);\";\r\n        }\r\n        if (data.right) {\r\n            this.backgroundPanel.style.borderRight = data.right + \"px solid rgb(36, 42, 53);\";\r\n        }\r\n        if (data.top) {\r\n            this.backgroundPanel.style.borderTop = data.top + \"px solid rgb(36, 42, 53);\";\r\n        }\r\n        if (data.bottom) {\r\n            this.backgroundPanel.style.borderBottom = data.bottom + \"px solid rgb(36, 42, 53);\";\r\n        }\r\n    }\r\n    SetBorderRadius(data) {\r\n        if (data.topRight) {\r\n            this.backgroundPanel.style.borderTopRightRadius = data.topRight + \"px;\";\r\n            this.foregroundPanel.style.borderTopRightRadius = data.topRight + \"px;\";\r\n            this.delayPanel.style.borderTopRightRadius = data.topRight + \"px;\";\r\n        }\r\n        if (data.topLeft) {\r\n            this.backgroundPanel.style.borderTopLeftRadius = data.topLeft + \"px;\";\r\n            this.foregroundPanel.style.borderTopLeftRadius = data.topLeft + \"px;\";\r\n            this.delayPanel.style.borderTopLeftRadius = data.topLeft + \"px;\";\r\n        }\r\n        if (data.bottomRight) {\r\n            this.backgroundPanel.style.borderBottomRightRadius = data.bottomRight + \"px;\";\r\n            this.foregroundPanel.style.borderBottomRightRadius = data.bottomRight + \"px;\";\r\n            this.delayPanel.style.borderBottomRightRadius = data.bottomRight + \"px;\";\r\n        }\r\n        if (data.bottomLeft) {\r\n            this.backgroundPanel.style.borderBottomLeftRadius = data.bottomLeft + \"px;\";\r\n            this.foregroundPanel.style.borderBottomLeftRadius = data.bottomLeft + \"px;\";\r\n            this.delayPanel.style.borderBottomLeftRadius = data.bottomLeft + \"px;\";\r\n        }\r\n    }\r\n    GetProgress() {\r\n        return parseInt(this.foregroundPanel.style.width.split(\"%\")[0], 10);\r\n    }\r\n    GetParent() {\r\n        return this.parent;\r\n    }\r\n}\r\n","import LayoutController from \"./layout/layoutController\";\r\nimport util, { tables } from \"./util\";\r\nvar RewardTypes;\r\n(function (RewardTypes) {\r\n    RewardTypes[RewardTypes[\"FAVOR\"] = 0] = \"FAVOR\";\r\n    RewardTypes[RewardTypes[\"SHARD\"] = 1] = \"SHARD\";\r\n    RewardTypes[RewardTypes[\"ITEM\"] = 2] = \"ITEM\";\r\n    RewardTypes[RewardTypes[\"KNOWLEDGE\"] = 3] = \"KNOWLEDGE\";\r\n    RewardTypes[RewardTypes[\"VITALITY\"] = 4] = \"VITALITY\";\r\n    RewardTypes[RewardTypes[\"SECRET_SHOP\"] = 5] = \"SECRET_SHOP\";\r\n    RewardTypes[RewardTypes[\"GOLD\"] = 6] = \"GOLD\";\r\n})(RewardTypes || (RewardTypes = {}));\r\n(function () {\r\n    const layout = LayoutController.GetInstance();\r\n    const rewardsMainContainerPanel = layout.GetTopPanel().FindChildrenWithClassTraverse(\"rewards\")[0];\r\n    const rewardsContainerPanel = layout.GetTopPanel().FindChildrenWithClassTraverse(\"rewards-container\")[0];\r\n    const upgradesContainerPanel = layout.GetTopPanel().FindChildrenWithClassTraverse(\"upgrades\")[0];\r\n    const CreateRewardPanel = (isLast) => {\r\n        const panel = $.CreatePanel(\"Panel\", rewardsContainerPanel, \"\");\r\n        panel.BLoadLayoutSnippet(\"Reward\");\r\n        if (isLast) {\r\n            panel.AddClass(\"reward--last\");\r\n        }\r\n        OnPanelCreated(panel);\r\n        return panel;\r\n    };\r\n    const CreateUpgradePanel = (isLast) => {\r\n        const panel = $.CreatePanel(\"Panel\", upgradesContainerPanel, \"\");\r\n        panel.BLoadLayoutSnippet(\"Upgrade\");\r\n        if (isLast) {\r\n            panel.AddClass(\"upgrade--last\");\r\n        }\r\n        OnPanelCreated(panel);\r\n        return panel;\r\n    };\r\n    const OnPanelCreated = (panel) => {\r\n        panel.SetDisableFocusOnMouseDown(true);\r\n        panel.SetPanelEvent(\"onactivate\", () => {\r\n            const playerId = util.getCurrentPlayer();\r\n            GameEvents.SendCustomGameEventToServer(\"custom_npc:apply_favor\", {\r\n                playerIndex: playerId,\r\n                payload: { upgradeId: \"\" }\r\n            });\r\n        });\r\n    };\r\n    const images = {\r\n        [RewardTypes.FAVOR]: {\r\n            src: \"file://{images}/custom_game/shield-9dsfs0d.png\",\r\n            width: 120,\r\n        },\r\n        [RewardTypes.SHARD]: {\r\n            src: \"file://{images}/custom_game/patch_general.png\",\r\n        },\r\n        [RewardTypes.ITEM]: {\r\n            src: \"file://{images}/custom_game/immortal_alt.png\",\r\n            width: 150,\r\n        },\r\n        [RewardTypes.KNOWLEDGE]: {\r\n            src: \"file://{images}/custom_game/book.png\",\r\n        },\r\n        [RewardTypes.VITALITY]: {\r\n            src: \"file://{images}/custom_game/benefactor_bg.png\",\r\n            width: 150,\r\n        },\r\n        [RewardTypes.SECRET_SHOP]: {\r\n            src: \"file://{images}/custom_game/book.png\",\r\n        },\r\n        [RewardTypes.GOLD]: {\r\n            src: \"file://{images}/custom_game/tribute_image.png\",\r\n        },\r\n    };\r\n    const CleanRewards = () => {\r\n        const panels = rewardsContainerPanel.FindChildrenWithClassTraverse(\"reward\");\r\n        panels.forEach((panel) => {\r\n            panel.DeleteAsync(0);\r\n        });\r\n    };\r\n    const CleanUpgrades = () => {\r\n        const panels = upgradesContainerPanel.FindChildrenWithClassTraverse(\"upgrade\");\r\n        panels.forEach((panel) => {\r\n            panel.DeleteAsync(0);\r\n        });\r\n    };\r\n    const HideRewards = () => {\r\n        CleanRewards();\r\n        rewardsMainContainerPanel.style.visibility = \"collapse\";\r\n    };\r\n    const HideUpgrades = () => {\r\n        CleanUpgrades();\r\n        upgradesContainerPanel.style.visibility = \"collapse\";\r\n    };\r\n    const ShowRewards = (rewards) => {\r\n        CleanRewards();\r\n        rewardsMainContainerPanel.style.visibility = \"visible\";\r\n        for (const key in rewards) {\r\n            const panel = CreateRewardPanel(false);\r\n            const reward = rewards[key];\r\n            const titlePanel = panel.FindChildrenWithClassTraverse(\"reward__title\")[0];\r\n            const descriptionPanel = panel.FindChildrenWithClassTraverse(\"reward__description\")[0];\r\n            const imagePanel = panel.FindChildrenWithClassTraverse(\"reward__image\")[0];\r\n            if (reward) {\r\n                titlePanel.text = reward.name;\r\n                descriptionPanel.text = reward.description;\r\n                const image = images[reward.type];\r\n                imagePanel.SetImage(image.src);\r\n                if (image.height) {\r\n                    imagePanel.style.height = image.height + \"px\";\r\n                }\r\n                else {\r\n                    imagePanel.style.height = \"120px\";\r\n                }\r\n                if (image.width) {\r\n                    imagePanel.style.width = image.width + \"px\";\r\n                }\r\n                else {\r\n                    imagePanel.style.width = \"170px\";\r\n                }\r\n                panel.SetPanelEvent(\"onactivate\", () => {\r\n                    const playerId = util.getCurrentPlayer();\r\n                    GameEvents.SendCustomGameEventToServer(\"custom_npc:select_reward\", {\r\n                        playerIndex: playerId,\r\n                        payload: { type: reward.type, }\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    };\r\n    const ShowUpgrades = (upgrades) => {\r\n        CleanUpgrades();\r\n        upgradesContainerPanel.style.visibility = \"visible\";\r\n        let missingPanels = 3;\r\n        for (const key in upgrades) {\r\n            const panel = CreateUpgradePanel(false);\r\n            const upgrade = upgrades[key];\r\n            const titlePanel = panel.FindChildrenWithClassTraverse(\"upgrade__title\")[0];\r\n            const descriptionPanel = panel.FindChildrenWithClassTraverse(\"upgrade__description\")[0];\r\n            const abilityPanel = panel.FindChildrenWithClassTraverse(\"upgrade__ability\")[0];\r\n            titlePanel.text = upgrade.name;\r\n            descriptionPanel.text = upgrade.description;\r\n            if (upgrade.ability) {\r\n                abilityPanel.abilityname = upgrade.ability;\r\n            }\r\n            if (upgrade.abilityIconName) {\r\n                abilityPanel.abilityname = upgrade.abilityIconName;\r\n            }\r\n            panel.SetPanelEvent(\"onactivate\", () => {\r\n                const playerId = util.getCurrentPlayer();\r\n                GameEvents.SendCustomGameEventToServer(\"custom_npc:apply_favor\", {\r\n                    playerIndex: playerId,\r\n                    payload: { upgradeId: upgrade.id, }\r\n                });\r\n            });\r\n            missingPanels--;\r\n        }\r\n        for (let i = 0; i < missingPanels; i++) {\r\n            CreateUpgradePanel(false);\r\n        }\r\n    };\r\n    tables.subscribeToNetTableAndLoadNow(\"custom_npc_rewards\", (table, key, value) => {\r\n        const playerId = util.getCurrentPlayer();\r\n        if (playerId === value.playerId) {\r\n            if (value.rewards) {\r\n                ShowRewards(value.rewards);\r\n            }\r\n            else {\r\n                HideRewards();\r\n            }\r\n        }\r\n    });\r\n    tables.subscribeToNetTableAndLoadNow(\"custom_npc_favors\", (table, key, value) => {\r\n        const playerId = util.getCurrentPlayer();\r\n        if (playerId === value.playerId) {\r\n            if (value.upgrades) {\r\n                ShowUpgrades(value.upgrades);\r\n            }\r\n            else {\r\n                HideUpgrades();\r\n            }\r\n        }\r\n    });\r\n})();\r\n","import LayoutController from \"./layout/layoutController\";\r\nconst layout = LayoutController.GetInstance();\r\nexport class ReadyBar {\r\n    constructor(duration) {\r\n        this.duration = duration;\r\n        this.container = layout.GetTopPanel().FindChildTraverse(\"ready-bar\");\r\n        this.textPanel = this.container.FindChildTraverse(\"ready-bar__title\");\r\n        this.textPanel.text = \"READY?\";\r\n        this.Activate();\r\n    }\r\n    Activate() {\r\n        this.container.style.height = \"200px\";\r\n        this.Update();\r\n    }\r\n    Update() {\r\n        $.Schedule(1.0, () => {\r\n            if (this.duration < 0) {\r\n                this.container.style.height = \"0px\";\r\n                return;\r\n            }\r\n            this.duration = this.duration - 1;\r\n            const text = this.duration > 0 ? this.duration.toString() : \"FIGHT!\";\r\n            this.textPanel.text = text;\r\n            this.Update();\r\n        });\r\n    }\r\n}\r\n","const server = {\r\n    sendActionSignalToServer: (payload) => {\r\n        let playerId = Players.GetLocalPlayer();\r\n        if (Game.IsInToolsMode()) {\r\n            const selectedEntity = Players.GetSelectedEntities(playerId)[0];\r\n            if (selectedEntity) {\r\n                playerId = Entities.GetPlayerOwnerID(selectedEntity);\r\n            }\r\n        }\r\n        const data = {\r\n            playerIndex: playerId,\r\n            payload\r\n        };\r\n        GameEvents.SendCustomGameEventToServer(\"custom_action\", data);\r\n    },\r\n    sendStopAbilitySignalToServer: (abilityEntityIndex) => {\r\n        const payload = {\r\n            abilityEntityIndex,\r\n            type: 1 /* ABILITY */,\r\n            mode: 1 /* STOP */,\r\n        };\r\n        server.sendActionSignalToServer(payload);\r\n    },\r\n    sendStartMovementSignalToServer: (direction) => {\r\n        const payload = {\r\n            direction,\r\n            type: 0 /* MOVEMENT */,\r\n            mode: 0 /* START */,\r\n        };\r\n        server.sendActionSignalToServer(payload);\r\n    },\r\n    sendStopMovementSignalToServer: (direction) => {\r\n        const payload = {\r\n            direction,\r\n            type: 0 /* MOVEMENT */,\r\n            mode: 1 /* STOP */,\r\n        };\r\n        server.sendActionSignalToServer(payload);\r\n    },\r\n};\r\nexport default server;\r\n","import { math, modifiers } from \"./util\";\r\nimport CustomAbilities from \"./customAbilities\";\r\n(function () {\r\n    const customAbilities = CustomAbilities.GetInstance();\r\n    const playerId = Players.GetLocalPlayer();\r\n    let heroIndex = undefined;\r\n    let particleLine = undefined;\r\n    let particleAoe = undefined;\r\n    let particleHalfCircle = undefined;\r\n    const targetIndicatorModifiers = [\r\n        \"modifier_sniper_ultimate_channeling\",\r\n        \"modifier_phantom_counter_banish\",\r\n        \"modifier_nevermore_counter_banish\",\r\n        \"modifier_mars_counter_countering\",\r\n        \"modifier_spectre_counter_countering\",\r\n    ];\r\n    function DEFX(efx) {\r\n        Particles.DestroyParticleEffect(efx, false);\r\n        Particles.ReleaseParticleIndex(efx);\r\n    }\r\n    function GetActiveAbility(heroIndex) {\r\n        let activeAbility = undefined;\r\n        for (let i = 0; i < 10; i++) {\r\n            const abilityIndex = Entities.GetAbility(heroIndex, i);\r\n            if (Abilities.IsInAbilityPhase(abilityIndex)) {\r\n                activeAbility = abilityIndex;\r\n            }\r\n        }\r\n        let activeModifier = false;\r\n        targetIndicatorModifiers.forEach((modifier) => {\r\n            const tempModifier = modifiers.findModifierByName(heroIndex, modifier);\r\n            if (tempModifier) {\r\n                activeModifier = tempModifier;\r\n            }\r\n        });\r\n        if (activeModifier) {\r\n            activeAbility = Buffs.GetAbility(heroIndex, activeModifier);\r\n        }\r\n        return activeAbility;\r\n    }\r\n    function UpdateTargetIndicator() {\r\n        if (Game.IsInToolsMode()) {\r\n            heroIndex = Players.GetSelectedEntities(playerId)[0];\r\n        }\r\n        if (!heroIndex || heroIndex == -1) {\r\n            heroIndex = Players.GetPlayerHeroEntityIndex(playerId);\r\n            if (Game.IsInToolsMode()) {\r\n                heroIndex = Players.GetSelectedEntities(playerId)[0];\r\n            }\r\n            $.Schedule(1 / 144, UpdateTargetIndicator);\r\n            return;\r\n        }\r\n        const active = GetActiveAbility(heroIndex);\r\n        if (active) {\r\n            const data = customAbilities.GetTargetingIndicator(active);\r\n            if (data) {\r\n                const heroOrigin = Entities.GetAbsOrigin(heroIndex);\r\n                const mousePositionScreen = GameUI.GetCursorPosition();\r\n                const mousePosition = Game.ScreenXYToWorld(mousePositionScreen[0], mousePositionScreen[1]);\r\n                const direction = Game.Normalized([\r\n                    (mousePosition[0] - heroOrigin[0]),\r\n                    (mousePosition[1] - heroOrigin[1]),\r\n                    (mousePosition[2] - heroOrigin[2])\r\n                ]);\r\n                const maxRange = Abilities.GetCastRange(active);\r\n                const minRange = Abilities.GetSpecialValueFor(active, \"min_range\");\r\n                const radius = Abilities.GetSpecialValueFor(active, \"radius\");\r\n                let target = undefined;\r\n                let length = 0;\r\n                let type = data.Type;\r\n                if (data.Fixed == 1) {\r\n                    length = maxRange;\r\n                }\r\n                else {\r\n                    length = math.clamp(Game.Length2D(mousePosition, heroOrigin), minRange, maxRange);\r\n                }\r\n                if (data.ModifierName && modifiers.findModifierByName(heroIndex, data.ModifierName)) {\r\n                    const modifierIndex = modifiers.findModifierByName(heroIndex, data.ModifierName);\r\n                    if (modifierIndex) {\r\n                        if (data.ModifierStacks) {\r\n                            const stacks = Buffs.GetStackCount(heroIndex, modifierIndex);\r\n                            if (stacks == data.ModifierStacks) {\r\n                                type = data.ModifierType;\r\n                                if (data.ModifierLength !== undefined) {\r\n                                    length = data.ModifierLength;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (type == \"TARGETING_INDICATOR_AOE\") {\r\n                    if (!particleAoe) {\r\n                        particleAoe = Particles.CreateParticle(\"particles/ui_mouseactions/range_finder_aoe.vpcf\", ParticleAttachment_t.PATTACH_WORLDORIGIN, heroIndex);\r\n                    }\r\n                    target = [\r\n                        heroOrigin[0] + (direction[0] * length),\r\n                        heroOrigin[1] + (direction[1] * length),\r\n                        heroOrigin[2] + (direction[2] * length)\r\n                    ];\r\n                    Particles.SetParticleControl(particleAoe, 0, target);\r\n                    Particles.SetParticleControl(particleAoe, 2, target);\r\n                    Particles.SetParticleControl(particleAoe, 3, [radius, 0, 0]);\r\n                }\r\n                if (type == \"TARGETING_INDICATOR_LINE\" || (type == \"TARGETING_INDICATOR_AOE\" && data.DisplayRange == 1)) {\r\n                    if (!particleLine) {\r\n                        particleLine = Particles.CreateParticle(\"particles/targeting/line.vpcf\", ParticleAttachment_t.PATTACH_WORLDORIGIN, heroIndex);\r\n                    }\r\n                    length = length - radius;\r\n                    target = [\r\n                        heroOrigin[0] + (direction[0] * length),\r\n                        heroOrigin[1] + (direction[1] * length),\r\n                        heroOrigin[2] + (direction[2] * length)\r\n                    ];\r\n                    const target_offset = [\r\n                        target[0] + (direction[0] * 150),\r\n                        target[1] + (direction[1] * 150),\r\n                        target[2] + (direction[2] * 150)\r\n                    ];\r\n                    Particles.SetParticleControl(particleLine, 0, heroOrigin);\r\n                    Particles.SetParticleControl(particleLine, 1, target);\r\n                    Particles.SetParticleControl(particleLine, 2, target_offset);\r\n                }\r\n                if (type == \"TARGETING_INDICATOR_HALF_CIRCLE\") {\r\n                    if (!particleHalfCircle) {\r\n                        particleHalfCircle = Particles.CreateParticle(\"particles/targeting/half_circle.vpcf\", ParticleAttachment_t.PATTACH_WORLDORIGIN, heroIndex);\r\n                    }\r\n                    target = [\r\n                        heroOrigin[0] + (direction[0] * length),\r\n                        heroOrigin[1] + (direction[1] * length),\r\n                        heroOrigin[2] + (direction[2] * length)\r\n                    ];\r\n                    Particles.SetParticleControl(particleHalfCircle, 0, heroOrigin);\r\n                    Particles.SetParticleControl(particleHalfCircle, 1, target);\r\n                    Particles.SetParticleControl(particleHalfCircle, 2, [radius, 0, 0]);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (particleLine) {\r\n                DEFX(particleLine);\r\n                particleLine = undefined;\r\n            }\r\n            if (particleAoe) {\r\n                DEFX(particleAoe);\r\n                particleAoe = undefined;\r\n            }\r\n            if (particleHalfCircle) {\r\n                DEFX(particleHalfCircle);\r\n                particleHalfCircle = undefined;\r\n            }\r\n        }\r\n        $.Schedule(1 / 144, UpdateTargetIndicator);\r\n    }\r\n    UpdateTargetIndicator();\r\n})();\r\n","export var CustomGameState;\r\n(function (CustomGameState) {\r\n    CustomGameState[CustomGameState[\"NONE\"] = 0] = \"NONE\";\r\n    CustomGameState[CustomGameState[\"PRE_WARMUP\"] = 1] = \"PRE_WARMUP\";\r\n    CustomGameState[CustomGameState[\"WARMUP_IN_PROGRESS\"] = 2] = \"WARMUP_IN_PROGRESS\";\r\n    CustomGameState[CustomGameState[\"PRE_ROUND\"] = 3] = \"PRE_ROUND\";\r\n    CustomGameState[CustomGameState[\"ROUND_IN_PROGRESS\"] = 4] = \"ROUND_IN_PROGRESS\";\r\n    CustomGameState[CustomGameState[\"PRE_RUN\"] = 5] = \"PRE_RUN\";\r\n    CustomGameState[CustomGameState[\"RUN_IN_PROGRESS\"] = 6] = \"RUN_IN_PROGRESS\";\r\n    CustomGameState[CustomGameState[\"POST_RUN\"] = 7] = \"POST_RUN\";\r\n})(CustomGameState || (CustomGameState = {}));\r\n","const utils = {\r\n    isEmptyObject(object) {\r\n        return Object.keys(object).length == 0;\r\n    },\r\n    getFirstObjectElement(object) {\r\n        for (const key in object) {\r\n            const element = object[key];\r\n            return element;\r\n        }\r\n    },\r\n    getCurrentPlayer() {\r\n        let playerId = Players.GetLocalPlayer();\r\n        if (Game.IsInToolsMode()) {\r\n            const selectedEntity = Players.GetSelectedEntities(playerId)[0];\r\n            if (selectedEntity) {\r\n                playerId = Entities.GetPlayerOwnerID(selectedEntity);\r\n            }\r\n        }\r\n        return playerId;\r\n    },\r\n};\r\nexport default utils;\r\nexport const colors = {\r\n    local: {\r\n        light: [162, 249, 154],\r\n        dark: [51, 162, 40]\r\n    },\r\n    yellow: {\r\n        light: [249, 246, 154],\r\n        dark: [196, 192, 42]\r\n    },\r\n    lightgreen: {\r\n        light: [154, 249, 224],\r\n        dark: [78, 128, 114]\r\n    },\r\n    pink: {\r\n        light: [197, 77, 168],\r\n        dark: [92, 15, 73]\r\n    },\r\n    orange: {\r\n        light: [255, 108, 0],\r\n        dark: [219, 99, 11]\r\n    },\r\n    blue: {\r\n        light: [27, 113, 230],\r\n        dark: [120, 156, 210]\r\n    },\r\n    gray: {\r\n        light: [240, 240, 240],\r\n        dark: [120, 120, 120]\r\n    },\r\n    yellowRed: {\r\n        light: [219, 213, 30],\r\n        dark: [229, 0, 72]\r\n    },\r\n    Gradient: function (color, opacity = \"1.0\") {\r\n        const colorA = \"rgba(\" + color.light[0] + \",\" + color.light[1] + \",\" + color.light[2] + \",\" + opacity + \")\";\r\n        const colorB = \"rgba(\" + color.dark[0] + \",\" + color.dark[1] + \",\" + color.dark[2] + \",\" + opacity + \")\";\r\n        return \"gradient(linear, 0% 0%, 100% 0%, from(\" + colorA + \"), to(\" + colorB + \"));\";\r\n    }\r\n};\r\nexport const math = {\r\n    clamp(num, min, max) {\r\n        return num < min ? min : num > max ? max : num;\r\n    }\r\n};\r\nexport const modifiers = {\r\n    findModifierByName(entityIndex, name) {\r\n        for (let i = 0; i < Entities.GetNumBuffs(entityIndex); i++) {\r\n            const buffName = Buffs.GetName(entityIndex, Entities.GetBuff(entityIndex, i));\r\n            if (buffName == name) {\r\n                return Entities.GetBuff(entityIndex, i);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n};\r\nexport const entities = {\r\n    isVisibleByLocal(entityIndex) {\r\n        if (modifiers.findModifierByName(entityIndex, \"modifier_visible\")) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n};\r\nexport const panels = {\r\n    createPanelSimple(container, className, type = \"Panel\") {\r\n        return $.CreatePanelWithProperties(type, container, className, {\r\n            class: className,\r\n            hittest: \"true\",\r\n        });\r\n    }\r\n};\r\nexport const tables = {\r\n    subscribeToNetTableAndLoadNow(tableName, callback) {\r\n        CustomNetTables.SubscribeNetTableListener(tableName, callback);\r\n        const data = CustomNetTables.GetAllTableValues(tableName);\r\n        data.forEach((d) => {\r\n            const parsedD = d;\r\n            callback(tableName, parsedD.key, parsedD.value);\r\n        });\r\n    },\r\n    subscribeToNetTableKey(table, key, loadNow, callback) {\r\n        const listener = CustomNetTables.SubscribeNetTableListener(table, function (table, tableKey, data) {\r\n            if (key == tableKey) {\r\n                if (!data) {\r\n                    return;\r\n                }\r\n                callback(data);\r\n            }\r\n        });\r\n        if (loadNow) {\r\n            const data = CustomNetTables.GetTableValue(table, key);\r\n            if (data) {\r\n                callback(data);\r\n            }\r\n        }\r\n        return listener;\r\n    }\r\n};\r\n"],"sourceRoot":""}