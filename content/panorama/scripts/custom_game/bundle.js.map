{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAA8C;AACF;AACa;AACzD,eAAe,4EAA4B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oCAAoC;AACrC;AACA,MAAM,WAAW;AACjB,MAAM,WAAW;AACjB,MAAM,WAAW;AACjB,MAAM,WAAW;AACjB,MAAM,WAAW;AACjB,MAAM,WAAW;AACjB,MAAM,WAAW;AACjB,MAAM,WAAW;AACjB,MAAM,WAAW;AACjB,MAAM,WAAW;AACjB,MAAM,WAAW;AACjB,MAAM,+BAA+B;AACrC,MAAM,+BAA+B;AACrC,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,yDAAe,gBAAgB,mEAA0B,mBAAmB,kEAAyB;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAAe,gBAAgB,mEAA0B,gCAAgC,uEAA8B;AAC/H;AACA;AACA,yDAAe,YAAY,8DAAqB,aAAa;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AClFoC;AACW;AACP;AACxC,kBAAkB,8DAAqB;AACxB;AACf;AACA;AACA,qBAAqB,yCAAM;AAC3B,qBAAqB,2DAAwB;AAC7C,2BAA2B,2DAAwB;AACnD,2BAA2B,2DAAwB;AACnD,+BAA+B,2DAAwB;AACvD,oCAAoC,2DAAwB;AAC5D,6CAA6C,2DAAwB;AACrE,oCAAoC,2DAAwB;AAC5D,kCAAkC,2DAAwB;AAC1D,gCAAgC,2DAAwB;AACxD,wBAAwB,OAAO;AAC/B,+BAA+B,2DAAwB;AACvD;AACA,+CAA+C,kDAAe;AAC9D;AACA,8CAA8C,OAAO;AACrD;AACA,0BAA0B,gEAAM;AAChC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA,wBAAwB,cAAc;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACvDyC;AACA;AAC1B;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2DAAwB;AACnD,0BAA0B,2DAAwB;AAClD,0BAA0B,2DAAwB;AAClD;AACA;AACA;AACA,qCAAqC,oDAAW;AAChD,8BAA8B,kDAAe;AAC7C;AACA;AACA;AACA,SAAS;AACT,qCAAqC,oDAAW;AAChD,8BAA8B,kDAAe,CAAC,8CAAW;AACzD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,YAAY;AAC3D;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,YAAY;AAC/D,mDAAmD,WAAW;AAC9D;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2DAAwB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC9KyC;AACR;AAClB;AACf;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,kDAAe,CAAC,8CAAW;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA,iCAAiC,+BAA+B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oDAAW;AAC3C,8BAA8B,kDAAe,CAAC,8CAAW;AACzD,SAAS;AACT;AACA,oCAAoC,WAAW;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxE6B;AACtB;AACP;AACA;AACA,iBAAiB,2CAAS,wBAAwB,iEAAiE;AACnH;AACA;AACA;AACA;AACA;;;;;;;;;;;ACTa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;ACxFY;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;;;;;;;;;;;;;;;;AClB+B;AACjB;AACf;AACA;AACA;AACA,QAAQ,gEAA6B;AACrC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC/BgC;AACjB;AACf;AACA;AACA;AACA;AACA,QAAQ,uEAAoC;AAC5C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC7D8B;AACf;AACf;AACA,QAAQ,+EAAsC;AAC9C;AACA;AACA,QAAQ,8EAAqC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6EAAoC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACjEoC;AACW;AACY;AACnB;AACxC,kBAAkB,8DAAqB;AACxB;AACf;AACA;AACA,qBAAqB,yCAAM;AAC3B,8BAA8B,2DAAwB;AACtD,yBAAyB,2DAAwB;AACjD,0BAA0B,2DAAwB;AAClD,4BAA4B,2DAAwB;AACpD,4BAA4B,2DAAwB;AACpD,4BAA4B,2DAAwB;AACpD,8BAA8B,2DAAwB;AACtD;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA,aAAa;AACb;AACA,2BAA2B,2DAAwB;AACnD,+BAA+B,2DAAwB;AACvD,2BAA2B,2DAAwB;AACnD,yBAAyB,2DAAwB;AACjD;AACA,4BAA4B,sEAAY;AACxC;AACA;AACA;AACA,2BAA2B,kDAAe,CAAC,8CAAW;AACtD;AACA,aAAa;AACb;AACA,0BAA0B,gEAAM;AAChC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yCAAyC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AClFyH;AAClH;AACP;AACA,QAAQ,6DAAqB;AAC7B,QAAQ,8DAAsB;AAC9B;AACA;AACA;AACA,QAAQ,8DAAsB;AAC9B,QAAQ,+DAAuB;AAC/B;AACA;AACA,2CAA2C,sBAAsB,GAAG,KAAK;AACzE;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AChB+C;AACE;AACjD,uBAAuB,mEAA0B;AACjD,wBAAwB,oEAA2B;AACpC;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AClMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oCAAoC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACM;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;;;;;;;;;;;;;;;;;ACrDyC;AACL;AACrB;AACf;AACA,+BAA+B,oDAAW,yCAAyC;AACnF;AACA;AACA;AACA;AACA;AACA,4BAA4B,+DAA4B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;ACzC4C;AAC7B;AACf;AACA,qBAAqB,2DAAwB;AAC7C;AACA;AACA,8BAA8B,2DAAwB;AACtD,4BAA4B,2DAAwB;AACpD,+BAA+B,2DAAwB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+DAA4B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;AC7B4C;AAC7B;AACf;AACA,qBAAqB,2DAAwB;AAC7C;AACA;AACA,+BAA+B,2DAAwB;AACvD,+BAA+B,2DAAwB;AACvD;AACA;AACA;AACA,4BAA4B,+DAA4B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CkC;AACJ;AACA;AACiB;AACjB;AACE;AACE;AACJ;AACkB;AACX;AACD;AACwB;AAC5D;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC,kBAAkB,8DAAqB;AACxB,2BAA2B,iDAAQ;AAClD;AACA;AACA;AACA;AACA;AACA,qBAAqB,yCAAM;AAC3B,wBAAwB,2DAAwB;AAChD,wBAAwB,2DAAwB;AAChD,wBAAwB,2DAAwB;AAChD,4BAA4B,2DAAwB;AACpD,+BAA+B,2DAAwB;AACvD,2BAA2B,2DAAwB;AACnD,yBAAyB,2DAAwB;AACjD,2BAA2B,2DAAwB;AACnD,8BAA8B,2DAAwB;AACtD,yBAAyB,2DAAwB;AACjD,8BAA8B,2DAAwB;AACtD,6BAA6B,2DAAwB;AACrD;AACA,4BAA4B,uEAAY;AACxC;AACA;AACA;AACA,2BAA2B,kDAAe,CAAC,8CAAW;AACtD;AACA,aAAa;AACb,8BAA8B,uEAAY;AAC1C;AACA;AACA;AACA,2BAA2B,kDAAe,CAAC,mDAAgB;AAC3D;AACA,aAAa;AACb;AACA,0BAA0B,+CAAM;AAChC,0BAA0B,+CAAM;AAChC,2BAA2B,+CAAM;AACjC,0BAA0B,gEAAM;AAChC;AACA;AACA,SAAS;AACT,6BAA6B,mDAAS;AACtC;AACA;AACA;AACA,gCAAgC,iDAAQ;AACxC;AACA;AACA;AACA,8BAA8B,+CAAM;AACpC;AACA;AACA;AACA,+BAA+B,gDAAO;AACtC;AACA;AACA;AACA;AACA,gBAAgB,2DAAkB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,2DAAkB;AAC/B,kCAAkC,mEAA0B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iEAAiE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvK8C;AACY;AAC7B;AAC7B;AACA;AACA;AACe;AACf;AACA;AACA;AACA,qBAAqB,sEAAY;AACjC,8BAA8B,2CAAS,SAAS,mBAAmB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+DAA4B;AACjD,kDAAkD,4DAAyB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxEyC;AAC1B;AACf;AACA,qBAAqB,2DAAwB;AAC7C,0BAA0B,2DAAwB;AAClD;AACA,gCAAgC,kDAAe;AAC/C;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACXiC;AAClB;AACf;AACA,qBAAqB,2DAAwB;AAC7C,0BAA0B,2DAAwB;AAClD,yBAAyB,2DAAwB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AClB4C;AAC7B;AACf;AACA,qBAAqB,2DAAwB;AAC7C;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B,6BAA6B,2DAAwB;AACrD;AACA;AACA;AACA;AACA,4BAA4B,+DAA4B;AACxD;AACA;AACA;AACA,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC/CyC;AACG;AACrC;AACP;AACA;AACA;AACA,CAAC,sCAAsC;AAChC;AACP;AACA;AACA;AACA,CAAC,sCAAsC;AACxB;AACf;AACA;AACA,qBAAqB,2DAAwB;AAC7C;AACA,yBAAyB,2DAAwB;AACjD,yBAAyB,2DAAwB;AACjD,6BAA6B,2DAAwB;AACrD,yBAAyB,2DAAwB;AACjD,+BAA+B,oDAAW;AAC1C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,+DAA4B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,yBAAyB;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,qBAAqB;AACrB;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;;;;;;;;;;;;;;;;;;;ACnPkC;AACJ;AACiB;AACC;AAChD;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC;AACA;AACA;AACA;AACA,CAAC,4BAA4B;AACd,2BAA2B,iDAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gDAAa;AAClC,wBAAwB,2DAAwB;AAChD,wBAAwB,2DAAwB;AAChD,wBAAwB,2DAAwB;AAChD,+BAA+B,2DAAwB;AACvD,2BAA2B,2DAAwB;AACnD,0BAA0B,+CAAM;AAChC,0BAA0B,gEAAM;AAChC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,2DAAkB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iEAAiE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACrIe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F;AAC1F;AACA;AACA,4FAA4F;AAC5F;AACA;AACA,wFAAwF;AACxF;AACA;AACA,8FAA8F;AAC9F;AACA;AACA;AACA;AACA,kFAAkF;AAClF,kFAAkF;AAClF,6EAA6E;AAC7E;AACA;AACA,gFAAgF;AAChF,gFAAgF;AAChF,2EAA2E;AAC3E;AACA;AACA,wFAAwF;AACxF,wFAAwF;AACxF,mFAAmF;AACnF;AACA;AACA,sFAAsF;AACtF,sFAAsF;AACtF,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AClIyD;AACnB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC;AACA,mBAAmB,4EAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8DAAqB;AAClD;AACA;AACA,2BAA2B;AAC3B,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,0BAA0B,OAAO;AACjC;AACA,SAAS;AACT;AACA,0BAA0B,OAAO;AACjC,SAAS;AACT;AACA,0BAA0B,OAAO;AACjC;AACA,SAAS;AACT;AACA,0BAA0B,OAAO;AACjC,SAAS;AACT;AACA,0BAA0B,OAAO;AACjC;AACA,SAAS;AACT;AACA,0BAA0B,OAAO;AACjC,SAAS;AACT;AACA,0BAA0B,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,8DAAqB;AAC1D;AACA;AACA,mCAAmC;AACnC,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,8DAAqB;AACtD;AACA;AACA,+BAA+B;AAC/B,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA,IAAI,uEAAoC;AACxC,yBAAyB,8DAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,uEAAoC;AACxC,yBAAyB,8DAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;;;;;;;;;;;;;;;;ACpLwD;AACzD,eAAe,4EAA4B;AACpC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;ACxCtB;AACA;AACA,oRAAoR;AACpR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,cAAc;AAC1D,oDAAoD,yBAAyB,6EAA6E,MAAM,+EAA+E;AAC/O;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F,cAAc,YAAY;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kBAAkB;;;;;;;;;;;;;;AC5JsB;AACO;AAChD;AACA,4BAA4B,oEAA2B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+DAA4B;AAC7D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6CAAU;AACvC;AACA,yCAAyC,+DAA4B;AACrE,0CAA0C,+DAA4B;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;AC1JM;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0CAA0C;;;;;;;;;;;;;;;;;;;;;ACV3C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK,EAAC;AACd;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,2FAA2F;AAC3F;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA,wBAAwB,uCAAuC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UCvHA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNwC;AACO;AACU;AACN;AACT;AACF;AACF;AACvB;AACY;AACR;AAC2B;AACJ;AACJ;AACa;AACnD;AACA,2BAA2B,oEAA0B;AACrD,mBAAmB,4EAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gBAAgB;AACvD,qCAAqC,+BAA+B;AACpE;AACA;AACA;AACA;AACA;AACA,iDAAiD,8DAAY;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,qDAAY;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,+DAAY;AAC7D;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI,uEAAoC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,oDAAW;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI,gEAA6B;AACjC;AACA;AACA,kCAAkC,oDAAe;AACjD;AACA,qBAAqB,8DAAyB;AAC9C,gBAAgB,gDAAQ;AACxB;AACA,qBAAqB,sEAAiC;AACtD;AACA;AACA;AACA,qBAAqB,uEAAkC;AACvD;AACA;AACA,KAAK;AACL,IAAI,gEAA6B;AACjC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,gEAA6B;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,cAAc,MAAM,MAAM;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,yBAAyB,8DAAqB;AAC9C;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,yBAAyB,8DAAqB;AAC9C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC","sources":["webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/actions.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/allianceBar.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/alliances.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/commonComponents/health.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/commonComponents/multipleBars.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/components/topLevelRoot.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/controllers/cameraController.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/controllers/mousePositionController.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/customAbilities.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/customEntities.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/heroController.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/heroInfoCard.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/hotkeys.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/layout/layoutController.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/mouse.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/overhead/castpoint.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/overhead/charges.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/overhead/cooldown.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/overhead/heroOverhead.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/overhead/overhead.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/overhead/player.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/overhead/recast.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/overhead/stacks.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/overhead/status.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/overhead/unitOverhead.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/progressBar.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/pve.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/readyBar.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/server.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/std.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/targetIndicator.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/types.js","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/util.js","webpack://amethyst/webpack/bootstrap","webpack://amethyst/webpack/runtime/compat get default export","webpack://amethyst/webpack/runtime/define property getters","webpack://amethyst/webpack/runtime/hasOwnProperty shorthand","webpack://amethyst/webpack/runtime/make namespace object","webpack://amethyst/../../../../Program Files (x86)/Steam/steamapps/common/dota 2 beta/content/dota_addons/amethyst/panorama/scripts/custom_game/index.js"],"sourcesContent":["import HeroController from \"./heroController\";\nimport { registerKeyBind } from \"./hotkeys\";\nimport LayoutController from \"./layout/layoutController\";\nconst layout = LayoutController.GetInstance();\nvar MovementCode;\n(function (MovementCode) {\n    MovementCode[\"MOVE_UP\"] = \"MOVE_UP\";\n    MovementCode[\"MOVE_LEFT\"] = \"MOVE_LEFT\";\n    MovementCode[\"MOVE_DOWN\"] = \"MOVE_DOWN\";\n    MovementCode[\"MOVE_RIGHT\"] = \"MOVE_RIGHT\";\n    MovementCode[\"BASIC_ATTACK\"] = \"BASIC_ATTACK\";\n    MovementCode[\"SECOND_ATTACK\"] = \"SECOND_ATTACK\";\n    MovementCode[\"MOBILITY\"] = \"MOBILITY\";\n    MovementCode[\"COUNTER\"] = \"COUNTER\";\n    MovementCode[\"SPECIAL_ATTACK\"] = \"SPECIAL_ATTACK\";\n    MovementCode[\"EXTRA\"] = \"EXTRA\";\n    MovementCode[\"ULTIMATE\"] = \"ULTIMATE\";\n    MovementCode[\"EX_ONE\"] = \"EX_ONE\";\n    MovementCode[\"EX_TWO\"] = \"EX_TWO\";\n    MovementCode[\"CANCEL\"] = \"CANCEL\";\n})(MovementCode || (MovementCode = {}));\nconst allKeys = [\n    { code: \"W\" },\n    { code: \"A\" },\n    { code: \"S\" },\n    { code: \"D\" },\n    { code: \"R\" },\n    { code: \"E\" },\n    { code: \"F\" },\n    { code: \"Q\" },\n    { code: \"C\" },\n    { code: \"1\" },\n    { code: \"2\" },\n    { code: \"Space\", label: \"SPACE\" },\n    { code: \"MOUSE_1\", label: \"LMB\" },\n    { code: \"MOUSE_2\", label: \"RMB\" }\n];\nconst getKeyByKeyCode = (keys, keyCode) => {\n    return keys.find(key => key.code == keyCode);\n};\nfunction defineMovementAction(keyCode, movementCode) {\n    function getDirectionFromMovementCode(code) {\n        let direction = [0, 0];\n        if (code == \"MOVE_UP\") {\n            direction = [0, 1];\n        }\n        if (code == \"MOVE_DOWN\") {\n            direction = [0, -1];\n        }\n        if (code == \"MOVE_LEFT\") {\n            direction = [-1, 0];\n        }\n        if (code == \"MOVE_RIGHT\") {\n            direction = [1, 0];\n        }\n        return direction;\n    }\n    const direction = getDirectionFromMovementCode(movementCode);\n    registerKeyBind(keyCode, () => HeroController.StartMoving(direction), () => HeroController.StopMoving(direction));\n}\nfunction defineAbilityAction(keyCode, slotIndex, showEffects = true) {\n    var _a;\n    const key = getKeyByKeyCode(allKeys, keyCode);\n    if (key) {\n        const label = (_a = key.label) !== null && _a !== void 0 ? _a : key.code;\n        layout.ChangeAbilityTextBySlotIndex(label, slotIndex);\n        registerKeyBind(keyCode, () => HeroController.CastAbility(slotIndex, showEffects), () => HeroController.StopCastAbility(slotIndex));\n    }\n}\nregisterKeyBind(\"C\", () => HeroController.Cancel(), () => { });\ndefineMovementAction(\"W\", MovementCode.MOVE_UP);\ndefineMovementAction(\"A\", MovementCode.MOVE_LEFT);\ndefineMovementAction(\"S\", MovementCode.MOVE_DOWN);\ndefineMovementAction(\"D\", MovementCode.MOVE_RIGHT);\ndefineAbilityAction(\"R\", 6);\ndefineAbilityAction(\"F\", 5);\ndefineAbilityAction(\"E\", 4);\ndefineAbilityAction(\"Q\", 3);\ndefineAbilityAction(\"1\", 7);\ndefineAbilityAction(\"2\", 8);\ndefineAbilityAction(\"Space\", 2);\ndefineAbilityAction(\"MOUSE_1\", 0, false);\ndefineAbilityAction(\"MOUSE_2\", 1);\n","import Alliances from \"./alliances\";\nimport Health from \"./commonComponents/health\";\nimport { colors, panels } from \"./util\";\nconst alliances = Alliances.GetInstance();\nexport default class AllianceBar {\n    constructor(container, allianceData) {\n        const alliance = alliances.findAllianceByName(allianceData.name);\n        this.color = colors[alliance.GetColor()];\n        this.panel = panels.createPanelSimple(container, \"alliance-bar\");\n        this.healthPanel = panels.createPanelSimple(this.panel, \"alliance-bar__health\");\n        this.bottomPanel = panels.createPanelSimple(this.panel, \"alliance-bar__bottom\");\n        const amethystsPanel = panels.createPanelSimple(this.bottomPanel, \"alliance-bar__amethysts\");\n        const scoreContainerPanel = panels.createPanelSimple(this.bottomPanel, \"alliance-bar__score-container\");\n        const amethystsImageContainerPanel = panels.createPanelSimple(amethystsPanel, \"alliance-bar__amethysts-image-container\");\n        const amethystsImagePanel = panels.createPanelSimple(amethystsImageContainerPanel, \"alliance-bar__amethysts-image\", \"Image\");\n        this.amethystsTextPanel = panels.createPanelSimple(amethystsPanel, \"alliance-bar__amethysts-text\", \"Label\");\n        this.scorePointsPanel = panels.createPanelSimple(scoreContainerPanel, \"alliance-bar__score-points\");\n        for (let i = 0; i < 5; i++) {\n            const pointPanel = panels.createPanelSimple(this.scorePointsPanel, \"alliance-bar__score-point\");\n            pointPanel.SetHasClass(\"alliance-bar__score-point--disabled\", true);\n            pointPanel.style.backgroundColor = colors.Gradient(this.color);\n        }\n        amethystsImagePanel.SetImage(\"file://{images}/custom_game/amethyst.png\");\n        this.amethystsTextPanel.text = \"X0\";\n        this.health = new Health(this.healthPanel, {\n            color: this.color,\n            fontSize: \"15px\",\n            usePercentage: true,\n            showValue: true\n        });\n        this.UpdateData(allianceData);\n    }\n    UpdateData(allianceData) {\n        this.UpdateAmethysts(allianceData.amethysts);\n        this.health.Update(allianceData.health, 30, allianceData.max_health, allianceData.shield);\n        for (let i = 0; i < allianceData.score; i++) {\n            this.scorePointsPanel.GetChild(i).SetHasClass(\"alliance-bar__score-point--inactive\", false);\n            this.scorePointsPanel.GetChild(i).SetHasClass(\"alliance-bar__score-point--active\", true);\n        }\n    }\n    UpdateMaxScore(maxScore) {\n        for (let i = 0; i < maxScore; i++) {\n            if (!this.scorePointsPanel.GetChild(i).BHasClass(\"alliance-bar__score-point--active\")) {\n                this.scorePointsPanel.GetChild(i).SetHasClass(\"alliance-bar__score-point--disabled\", false);\n                this.scorePointsPanel.GetChild(i).SetHasClass(\"alliance-bar__score-point--inactive\", true);\n            }\n        }\n    }\n    UpdateAmethysts(amount) {\n        this.amethystsTextPanel.text = \"X\" + amount.toString();\n    }\n}\n","class Alliance {\n    constructor(name, color, teams) {\n        this.name = name;\n        this.color = color;\n        this.teams = teams;\n    }\n    GetName() {\n        return this.name;\n    }\n    IsLocal() {\n        const localPlayerId = Game.GetLocalPlayerID();\n        const localPlayerTeam = Players.GetTeam(localPlayerId);\n        let isLocal = false;\n        this.teams.forEach(team => {\n            if (team == localPlayerTeam) {\n                isLocal = true;\n            }\n        });\n        return isLocal;\n    }\n    GetColor() {\n        return this.IsLocal() ? \"local\" : this.color;\n    }\n}\nexport default class Alliances {\n    constructor() {\n        this.alliances = [\n            new Alliance(\"DOTA_ALLIANCE_RADIANT\", \"orange\", [DOTATeam_t.DOTA_TEAM_GOODGUYS, DOTATeam_t.DOTA_TEAM_BADGUYS]),\n            new Alliance(\"DOTA_ALLIANCE_DIRE\", \"yellow\", [DOTATeam_t.DOTA_TEAM_CUSTOM_1, DOTATeam_t.DOTA_TEAM_CUSTOM_2]),\n            new Alliance(\"DOTA_ALLIANCE_LEGION\", \"blue\", [DOTATeam_t.DOTA_TEAM_CUSTOM_3, DOTATeam_t.DOTA_TEAM_CUSTOM_4]),\n            new Alliance(\"DOTA_ALLIANCE_VOID\", \"pink\", [DOTATeam_t.DOTA_TEAM_CUSTOM_5, DOTATeam_t.DOTA_TEAM_CUSTOM_6])\n        ];\n        //\n    }\n    static GetInstance() {\n        if (!Alliances.instance) {\n            Alliances.instance = new Alliances();\n        }\n        return Alliances.instance;\n    }\n    findAllianceByName(name) {\n        return this.alliances.filter(alliance => alliance.name == name)[0];\n    }\n    findAllianceByTeam(team) {\n        let returnAlliance = undefined;\n        this.alliances.forEach(alliance => {\n            alliance.teams.forEach(allianceTeam => {\n                if (allianceTeam == team) {\n                    returnAlliance = alliance;\n                }\n            });\n        });\n        return returnAlliance;\n    }\n}\nAlliances.GetInstance();\n","import ProgressBar from \"../progressBar\";\nimport { colors, panels } from \"../util\";\nexport default class Health {\n    constructor(container, data) {\n        this.cellsPanels = [];\n        this.borderRadius = \"3\";\n        this.active = true;\n        const fontSize = data.fontSize ? data.fontSize : \"13px\";\n        const showValue = data.showValue ? data.showValue : false;\n        const usePercentage = data.usePercentage ? data.usePercentage : false;\n        this.rounded = data.rounded ? data.rounded : false;\n        this.maxTreshold = data.maxTreshold ? data.maxTreshold : 30;\n        this.shieldOnFront = data.shieldOnFront ? data.shieldOnFront : false;\n        this.color = data.color;\n        this.showValue = showValue;\n        this.usePercentage = usePercentage;\n        this.healthPanel = panels.createPanelSimple(container, \"health\");\n        this.cellsPanel = panels.createPanelSimple(container, \"health__cells\");\n        this.valuePanel = panels.createPanelSimple(container, \"health__value\", \"Label\");\n        if (!this.shieldOnFront) {\n            this.healthPanel.style.flowChildren = \"right\";\n        }\n        this.healthProgressBar = new ProgressBar(\"health__progress-bar\", this.healthPanel, {\n            foreground_color: colors.Gradient(this.color),\n            delayed: true,\n            background_color: \"black\",\n            border_radius: this.rounded ? this.borderRadius + \"px\" : \"0\"\n        });\n        this.shieldProgressBar = new ProgressBar(\"shield__progress-bar\", this.healthPanel, {\n            foreground_color: colors.Gradient(colors.gray),\n            background_color: \"black\",\n            border_radius: this.rounded ? this.borderRadius + \"px\" : \"0\"\n        });\n        this.healthPanel.style.height = \"100%\";\n        this.healthPanel.style.width = \"100%\";\n        this.cellsPanel.style.flowChildren = \"right\";\n        this.cellsPanel.style.height = \"100%\";\n        this.cellsPanel.style.width = \"100%\";\n        this.cellsPanel.style.borderRadius = this.rounded ? this.borderRadius + \"px\" : \"0\";\n        if (this.showValue) {\n            this.valuePanel.style.align = \"center center\";\n            this.valuePanel.style.textShadow = \"0px 0px 8px 7.0 #000000b0\";\n            this.valuePanel.style.color = \"#FAFAFA\";\n            this.valuePanel.style.fontSize = fontSize;\n            this.valuePanel.style.fontFamily = \"Radiance, FZLanTingHei-R-GBK, TH Sarabun New, Gulim,MingLiU\";\n        }\n        else {\n            this.valuePanel.style.visibility = \"collapse\";\n        }\n    }\n    Activate() {\n        this.healthPanel.style.visibility = \"visible\";\n        this.active = true;\n    }\n    Deactivate() {\n        this.healthPanel.style.visibility = \"collapse\";\n        this.active = false;\n    }\n    Update(health, treshold, maxHealth, shield) {\n        if (!this.active) {\n            return;\n        }\n        const healeableAmount = this.maxTreshold - treshold;\n        const potentialHealth = health + healeableAmount;\n        let healthPanelWidth;\n        let healthProgress;\n        let healthTotalWidth;\n        if (shield <= 0) {\n            this.shieldProgressBar.SetVisibility(\"collapse\");\n            this.healthProgressBar.SetBorder({ right: \"1\" });\n            if (this.rounded) {\n                this.healthProgressBar.SetBorderRadius({\n                    topRight: this.borderRadius,\n                    bottomRight: this.borderRadius\n                });\n                this.shieldProgressBar.SetBorderRadius({\n                    topLeft: this.borderRadius,\n                    bottomLeft: this.borderRadius\n                });\n            }\n            healthPanelWidth = (100 * potentialHealth) / maxHealth;\n            if (potentialHealth == 0) {\n                healthProgress = 0;\n            }\n            else {\n                healthProgress = (100 * health) / potentialHealth;\n            }\n            healthTotalWidth = 100;\n        }\n        else {\n            if (this.shieldOnFront) {\n                healthTotalWidth = 100;\n                const shieldTotalWidth = (100 * shield) / maxHealth;\n                this.shieldProgressBar.SetTotalWidth(shieldTotalWidth);\n            }\n            else {\n                this.healthProgressBar.SetBorder({ right: \"0\" });\n                this.shieldProgressBar.SetBorder({ left: \"0\" });\n                if (this.rounded) {\n                    this.healthProgressBar.SetBorderRadius({\n                        topRight: \"0\",\n                        bottomRight: \"0\"\n                    });\n                    this.shieldProgressBar.SetBorderRadius({\n                        topLeft: \"0\",\n                        bottomLeft: \"0\"\n                    });\n                }\n                healthTotalWidth = (100 * health) / (maxHealth + shield);\n                const shieldTotalWidth = (100 * (maxHealth + shield - health)) / (maxHealth + shield);\n                this.shieldProgressBar.SetTotalWidth(shieldTotalWidth);\n            }\n            this.shieldProgressBar.SetVisibility(\"visible\");\n            healthPanelWidth = 100;\n            healthProgress = 100;\n            const shieldProgress = (100 * shield) / (shield + healeableAmount);\n            const shieldPanelWidth = (100 * (shield + healeableAmount)) / (maxHealth + shield - health);\n            this.shieldProgressBar.SetProgress(shieldProgress);\n            this.shieldProgressBar.SetPanelWidth(shieldPanelWidth);\n        }\n        this.healthProgressBar.SetTotalWidth(healthTotalWidth);\n        this.healthProgressBar.SetPanelWidth(healthPanelWidth);\n        this.healthProgressBar.SetProgress(healthProgress);\n        if (this.showValue) {\n            let value = health.toString();\n            if (this.usePercentage) {\n                value = Math.floor((100 * potentialHealth) / maxHealth).toString() + \"%\";\n            }\n            this.valuePanel.text = value;\n        }\n        if (this.shieldOnFront) {\n            this.UpdateCellsShieldOnFront(health, maxHealth);\n        }\n        else {\n            this.UpdateCells(health, healeableAmount, maxHealth, shield);\n        }\n    }\n    UpdateCellsShieldOnFront(health, maxHealth) {\n        this.UpdateCells(health, health, maxHealth, 0);\n    }\n    UpdateCells(health, healeableAmount, maxHealth, shield) {\n        const potentialHealthPoints = health + shield + healeableAmount;\n        const cellsTotalWidth = (100 * potentialHealthPoints) / (maxHealth + shield);\n        this.cellsPanel.style.width = cellsTotalWidth + \"%\";\n        const rest = potentialHealthPoints % this.maxTreshold;\n        const cells = Math.ceil(potentialHealthPoints / this.maxTreshold);\n        while (this.cellsPanels.length < cells) {\n            this.AddCell();\n        }\n        while (this.cellsPanels.length > cells) {\n            this.RemoveCell();\n        }\n        this.cellsPanels.forEach((panel, i) => {\n            let cellWidth = this.GetCellWidth(this.maxTreshold, potentialHealthPoints);\n            if (i == this.cellsPanels.length - 1 && rest > 0) {\n                cellWidth = this.GetCellWidth(rest, potentialHealthPoints);\n            }\n            panel.style.width = cellWidth + \"%\";\n        });\n    }\n    GetCellWidth(value, potentialHealthPoints) {\n        return (100 * value) / potentialHealthPoints;\n    }\n    AddCell() {\n        const index = this.cellsPanel.GetChildCount();\n        const panel = panels.createPanelSimple(this.cellsPanel, \"cell_panel_\" + index);\n        panel.style.borderRight = \"1px solid rgba(0, 0, 0, 0.6)\";\n        panel.style.height = \"100%\";\n        this.cellsPanels.push(panel);\n    }\n    RemoveCell() {\n        this.cellsPanels[this.cellsPanels.length - 1].DeleteAsync(0);\n        this.cellsPanels.pop();\n    }\n}\n","import ProgressBar from \"../progressBar\";\nimport { colors } from \"../util\";\nexport default class MultipleBars {\n    constructor(container, options) {\n        this.progressBars = [];\n        this.container = container;\n        this.maxValue = options.maxValue;\n        this.fullColor = options.fullColor;\n        this.valuePerCell = options.valuePerCell;\n        this.missingColor = options.missingColor || colors.Gradient(colors.gray);\n        this.className = options.className;\n        this.UpdateCells();\n        this.Update(options.value, options.maxValue);\n    }\n    Update(value, maxValue) {\n        /*if(!IsVisibleByLocal(this.entity_index)){\n            return;\n        }*/\n        if (maxValue != this.maxValue) {\n            this.maxValue = maxValue;\n            this.UpdateCells();\n        }\n        const fixedValue = parseInt(value.toFixed(), 10);\n        const fullPanels = Math.floor(fixedValue / this.valuePerCell);\n        const missingValue = fixedValue % this.valuePerCell;\n        const missingValuePercent = parseInt(((missingValue * 100) / this.valuePerCell).toFixed(), 10);\n        for (let i = 0; i < fullPanels; i++) {\n            this.progressBars[i].SetProgress(100);\n            this.progressBars[i].SetForegroundColor(this.fullColor);\n        }\n        for (let i = fullPanels; i <= this.progressBars.length; i++) {\n            if (this.progressBars[i]) {\n                if (i == fullPanels) {\n                    this.progressBars[i].SetForegroundColor(this.missingColor);\n                    this.progressBars[i].SetProgress(missingValuePercent);\n                }\n                else {\n                    this.progressBars[i].SetProgress(0);\n                }\n            }\n        }\n    }\n    UpdateCells() {\n        const cells = this.maxValue / this.valuePerCell;\n        while (this.progressBars.length < cells) {\n            this.AddCell();\n        }\n        while (this.progressBars.length > cells) {\n            this.RemoveCell();\n        }\n        this.SetWidths();\n    }\n    AddCell() {\n        const index = this.progressBars.length;\n        const progressBar = new ProgressBar(this.className + \"__progress-bar__\" + index, this.container, {\n            foreground_color: colors.Gradient(colors.blue)\n        });\n        if (index > 0) {\n            progressBar.SetBorder({ left: \"0\" });\n        }\n        this.progressBars.push(progressBar);\n    }\n    SetWidths() {\n        const width = (100 * this.valuePerCell) / this.maxValue;\n        this.progressBars.forEach(bar => {\n            bar.SetTotalWidth(width);\n        });\n    }\n    RemoveCell() {\n        this.progressBars[this.progressBars.length - 1].SetVisibility(\"collapse\");\n        this.progressBars.pop();\n    }\n}\n","import { std } from \"../std\";\nexport function toplevelRoot(options) {\n    const className = typeof options == \"string\" ? options : options === null || options === void 0 ? void 0 : options.className;\n    const visible = typeof options == \"object\" ? options.visible : true;\n    const root = std.panel($.GetContextPanel(), { hitTest: false, class: \"fullscreen\" /* S.fullscreen */, visible });\n    if (className) {\n        root.AddClass(className);\n    }\n    return root;\n}\n","\"use strict\";\n(function () {\n    const LERP_INITIAL = 0.1;\n    const LERP_FAST = 0.05;\n    const thinkInterval = 0.01;\n    const cameraOffsetY = -120;\n    const cameraDistance = 0;\n    const cameraDistanceLerp = 30;\n    let cameraDistanceActual = 0;\n    let playerId = Players.GetLocalPlayer();\n    let hero = Players.GetPlayerHeroEntityIndex(playerId);\n    let heroOrigin = Entities.GetAbsOrigin(hero);\n    let initialized = false;\n    function Update() {\n        heroOrigin = Entities.GetAbsOrigin(hero);\n        if (!heroOrigin) {\n            playerId = Players.GetLocalPlayer();\n            hero = Players.GetPlayerHeroEntityIndex(playerId);\n            $.Schedule(thinkInterval, Update);\n            return;\n        }\n        if (Game.IsInToolsMode()) {\n            const heroIndex = Players.GetSelectedEntities(playerId)[0];\n            if (heroIndex) {\n                heroOrigin = Entities.GetAbsOrigin(heroIndex);\n            }\n        }\n        if (initialized === false) {\n            GameUI.SetCameraTargetPosition(heroOrigin, 0.0);\n            initialized = true;\n            $.Schedule(thinkInterval, Update);\n            return;\n        }\n        UpdatePosition();\n        UpdateDistance();\n        $.Schedule(thinkInterval, Update);\n    }\n    function UpdatePosition() {\n        const mousePosition = GameUI.GetCursorPosition();\n        const sw = Game.GetScreenWidth();\n        const sh = Game.GetScreenHeight();\n        let cameraPosition = [];\n        let cameraPositionLerp = LERP_INITIAL;\n        let heroScreenX = Game.WorldToScreenX(heroOrigin[0], heroOrigin[1], heroOrigin[2]);\n        let heroScreenY = Game.WorldToScreenY(heroOrigin[0], heroOrigin[1], heroOrigin[2]);\n        if (heroScreenX == -1 && heroScreenY == -1) {\n            cameraPosition = heroOrigin;\n            cameraPositionLerp = LERP_FAST;\n        }\n        else {\n            if (heroScreenX < 0) {\n                heroScreenX = 0;\n                cameraPositionLerp = LERP_FAST;\n            }\n            if (heroScreenX > sw) {\n                heroScreenX = sw;\n                cameraPositionLerp = LERP_FAST;\n            }\n            if (heroScreenY < 0) {\n                heroScreenY = 0;\n                cameraPositionLerp = LERP_FAST;\n            }\n            if (heroScreenY > sh) {\n                heroScreenY = sh;\n                cameraPositionLerp = LERP_FAST;\n            }\n            const distanceX = heroScreenX - mousePosition[0];\n            const distanceY = heroScreenY - mousePosition[1] + cameraOffsetY;\n            const newScreenPosX = heroScreenX + (distanceX * -1) / 2.5;\n            const newScreenPosY = heroScreenY + (distanceY * -1) / 2.5;\n            if (!GameUI.GetScreenWorldPosition([newScreenPosX, newScreenPosY])) {\n                return;\n            }\n            cameraPosition = Game.ScreenXYToWorld(newScreenPosX, newScreenPosY);\n        }\n        GameUI.SetCameraTargetPosition(cameraPosition, cameraPositionLerp);\n    }\n    function UpdateDistance() {\n        // Smooth camera distance changes\n        if (cameraDistanceActual < cameraDistance) {\n            cameraDistanceActual = cameraDistanceActual + cameraDistanceLerp;\n        }\n        else if (cameraDistanceActual > cameraDistance) {\n            cameraDistanceActual = cameraDistanceActual - cameraDistanceLerp;\n        }\n        GameUI.SetCameraLookAtPositionHeightOffset(cameraDistanceActual);\n    }\n    Update();\n})();\n","\"use strict\";\n(function () {\n    const thinkInterval = 0.01;\n    function Update() {\n        const mousePositionScreen = GameUI.GetCursorPosition();\n        const mousePosition = Game.ScreenXYToWorld(mousePositionScreen[0], mousePositionScreen[1]);\n        const data = {\n            x: mousePosition[0],\n            y: mousePosition[1],\n            z: mousePosition[2],\n            playerId: Players.GetLocalPlayer()\n        };\n        GameEvents.SendCustomGameEventToServer(\"update_mouse_position\", data);\n        $.Schedule(thinkInterval, () => {\n            Update();\n        });\n    }\n    Update();\n})();\n","import { tables } from \"./util\";\nexport default class CustomAbilities {\n    constructor() {\n        this.abilities = {};\n        const tableName = \"main\";\n        tables.subscribeToNetTableKey(tableName, \"abilities\", true, (data) => {\n            for (const key in data) {\n                this.abilities[key] = data[key];\n            }\n        });\n    }\n    static GetInstance() {\n        if (!CustomAbilities.instance) {\n            CustomAbilities.instance = new CustomAbilities();\n        }\n        return CustomAbilities.instance;\n    }\n    GetTargetingIndicator(abilityIndex) {\n        const abilityName = Abilities.GetAbilityName(abilityIndex);\n        if (this.abilities[abilityName].targetingIndicator) {\n            return this.abilities[abilityName].targetingIndicator;\n        }\n        return undefined;\n    }\n    GetEnergyCost(abilityIndex) {\n        const abilityName = Abilities.GetAbilityName(abilityIndex);\n        if (this.abilities[abilityName]) {\n            return this.abilities[abilityName].energyCost;\n        }\n        return 0;\n    }\n}\n","import { tables } from \"./util\";\nexport default class CustomEntities {\n    constructor() {\n        this.onUpdateCallbacks = [];\n        this.entities = [];\n        const tableName = \"units\";\n        tables.subscribeToNetTableAndLoadNow(tableName, (table, key, value) => {\n            const entity = value;\n            this.SetEntity(entity);\n        });\n    }\n    static GetInstance() {\n        if (!CustomEntities.instance) {\n            CustomEntities.instance = new CustomEntities();\n        }\n        return CustomEntities.instance;\n    }\n    SetEntity(entity) {\n        const index = this.GetEntityArrayIndex(entity.entityIndex);\n        if (index !== undefined) {\n            this.UpdateEntity(index, entity);\n        }\n        else {\n            this.entities.push(entity);\n        }\n        this.onUpdateCallbacks.forEach(callback => {\n            callback(entity);\n        });\n    }\n    GetEntity(entityIndex) {\n        return this.entities.filter(entity => entity.entityIndex === entityIndex)[0];\n    }\n    UpdateEntity(index, entity) {\n        this.entities = [...this.entities.slice(0, index), ...this.entities.slice(index + 1)];\n        this.entities.push(entity);\n    }\n    OnReload() {\n        const tableName = \"units\";\n        const data = CustomNetTables.GetAllTableValues(tableName);\n        data.forEach(d => {\n            const parsedD = d;\n            this.SetEntity(parsedD.value);\n        });\n    }\n    AddCallback(callback) {\n        this.onUpdateCallbacks.push(callback);\n    }\n    GetEntityArrayIndex(entityIndex) {\n        let index = undefined;\n        this.entities.forEach((entity, i) => {\n            if (entity.entityIndex === entityIndex) {\n                index = i;\n            }\n        });\n        return index;\n    }\n    IsBeingSelectedByLocal(entityIndex) {\n        const localPlayerId = Game.GetLocalPlayerID();\n        const selectedEntity = Players.GetSelectedEntities(localPlayerId)[0];\n        return selectedEntity === entityIndex;\n    }\n}\n","import server from \"./server\";\nexport default class HeroController {\n    static StartMoving(direction) {\n        server.sendStartMovementSignalToServer(direction);\n    }\n    static StopMoving(direction) {\n        server.sendStopMovementSignalToServer(direction);\n    }\n    static Cancel() {\n        const playerId = Players.GetLocalPlayer();\n        const heroIndex = Players.GetPlayerHeroEntityIndex(playerId);\n        const order = {\n            OrderType: dotaunitorder_t.DOTA_UNIT_ORDER_STOP,\n            TargetIndex: heroIndex,\n            ShowEffects: false,\n            QueueBehavior: OrderQueueBehavior_t.DOTA_ORDER_QUEUE_NEVER\n        };\n        Game.PrepareUnitOrders(order);\n    }\n    static StopCastAbility(slotIndex) {\n        const playerId = Players.GetLocalPlayer();\n        const heroIndex = Players.GetPlayerHeroEntityIndex(playerId);\n        const abilityEntityIndex = Entities.GetAbility(heroIndex, slotIndex);\n        server.sendStopAbilitySignalToServer(abilityEntityIndex);\n    }\n    static CastAbility(slotIndex, showEffects = true) {\n        const playerId = Players.GetLocalPlayer();\n        let heroIndex = Players.GetPlayerHeroEntityIndex(playerId);\n        if (Game.IsInToolsMode()) {\n            heroIndex = Players.GetSelectedEntities(playerId)[0];\n        }\n        const abilityEntityIndex = Entities.GetAbility(heroIndex, slotIndex);\n        if (!Abilities.IsInAbilityPhase(abilityEntityIndex)) {\n            if (!showEffects) {\n                if (!Abilities.IsCooldownReady(abilityEntityIndex)) {\n                    return;\n                }\n            }\n            const mousePositionScreen = GameUI.GetCursorPosition();\n            const mousePosition = Game.ScreenXYToWorld(mousePositionScreen[0], mousePositionScreen[1]);\n            const abilityBehavior = Abilities.GetBehavior(abilityEntityIndex);\n            if (abilityBehavior & DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_POINT) {\n                const order = {\n                    OrderType: dotaunitorder_t.DOTA_UNIT_ORDER_CAST_POSITION,\n                    TargetIndex: heroIndex,\n                    Position: mousePosition,\n                    QueueBehavior: OrderQueueBehavior_t.DOTA_ORDER_QUEUE_NEVER,\n                    ShowEffects: showEffects,\n                    AbilityIndex: abilityEntityIndex\n                };\n                Game.PrepareUnitOrders(order);\n            }\n            if (abilityBehavior & DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_NO_TARGET) {\n                const order = {\n                    OrderType: dotaunitorder_t.DOTA_UNIT_ORDER_CAST_NO_TARGET,\n                    TargetIndex: heroIndex,\n                    Position: mousePosition,\n                    QueueBehavior: OrderQueueBehavior_t.DOTA_ORDER_QUEUE_NEVER,\n                    ShowEffects: showEffects,\n                    AbilityIndex: abilityEntityIndex\n                };\n                Game.PrepareUnitOrders(order);\n            }\n        }\n    }\n}\n","import Alliances from \"./alliances\";\nimport Health from \"./commonComponents/health\";\nimport MultipleBars from \"./commonComponents/multipleBars\";\nimport { colors, panels } from \"./util\";\nconst alliances = Alliances.GetInstance();\nexport default class HeroInfoCard {\n    constructor(heroData, alliancePanel) {\n        const alliance = alliances.findAllianceByTeam(heroData.teamId);\n        this.color = colors[alliance.GetColor()];\n        this.containerPanel = panels.createPanelSimple(alliancePanel, \"hero-info-card\");\n        this.leftPanel = panels.createPanelSimple(this.containerPanel, \"hero-info-card__left\");\n        this.rightPanel = panels.createPanelSimple(this.containerPanel, \"hero-info-card__right\");\n        this.leftTopPanel = panels.createPanelSimple(this.leftPanel, \"hero-info-card__top\");\n        this.leftMidPanel = panels.createPanelSimple(this.leftPanel, \"hero-info-card__mid\");\n        this.leftBotPanel = panels.createPanelSimple(this.leftPanel, \"hero-info-card__bot\");\n        this.abilitiesPanel = panels.createPanelSimple(this.rightPanel, \"hero-info-card__abilities\");\n        if (heroData.allianceName == \"DOTA_ALLIANCE_DIRE\") {\n            this.containerPanel.SetHasClass(\"hero-info-card--right\", true);\n            this.abilitiesPanel.SetHasClass(\"hero-info-card__abilities--right\", true);\n        }\n        for (let i = 0; i < 9; i++) {\n            $.CreatePanelWithProperties(\"DOTAAbilityImage\", this.abilitiesPanel, \"hero-info-card__ability_\" + i, {\n                class: \"hero-info-card__ability\"\n            });\n        }\n        const imagePanel = panels.createPanelSimple(this.leftTopPanel, \"hero-info-card__image\", \"DOTAHeroImage\");\n        const resourcesPanel = panels.createPanelSimple(this.leftMidPanel, \"hero-info-card-resources\");\n        this.healthPanel = panels.createPanelSimple(resourcesPanel, \"hero-info-card-resources__health\");\n        this.manaPanel = panels.createPanelSimple(resourcesPanel, \"hero-info-card-resources__mana\");\n        if (alliance.IsLocal()) {\n            this.mana = new MultipleBars(this.manaPanel, {\n                value: heroData.mana,\n                maxValue: heroData.maxMana,\n                className: \"mana\",\n                fullColor: colors.Gradient(colors.blue),\n                valuePerCell: 25\n            });\n        }\n        this.health = new Health(this.healthPanel, {\n            color: this.color,\n            fontSize: \"13px\",\n            showValue: true\n        });\n        imagePanel.heroname = heroData.name;\n        this.UpdateData(heroData);\n    }\n    UpdateData(heroData) {\n        this.health.Update(heroData.health, heroData.treshold, heroData.maxHealth, heroData.shield);\n        if (this.mana) {\n            this.mana.Update(heroData.mana, heroData.maxMana);\n        }\n        this.UpdateAbilities(heroData.abilities);\n    }\n    UpdateAbilities(abilities) {\n        const upgradedAbilities = [];\n        let iterator = 0;\n        for (const index in abilities) {\n            const ability = abilities[index];\n            if (ability.level >= 2) {\n                upgradedAbilities.push(ability);\n            }\n        }\n        for (let i = 0; i < this.abilitiesPanel.GetChildCount(); i++) {\n            const tmpPanel = this.abilitiesPanel.GetChild(i);\n            if (upgradedAbilities[iterator]) {\n                tmpPanel.style.width = \"40px\";\n                tmpPanel.style.marginRight = \"5px\";\n                tmpPanel.abilityname = upgradedAbilities[iterator].name;\n                tmpPanel.SetPanelEvent(\"onmouseover\", () => {\n                    $.DispatchEvent(\"DOTAShowAbilityTooltipForEntityIndex\", tmpPanel, tmpPanel.abilityname, Players.GetLocalPlayerPortraitUnit());\n                });\n                tmpPanel.SetPanelEvent(\"onmouseout\", () => {\n                    $.DispatchEvent(\"DOTAHideAbilityTooltip\", tmpPanel);\n                });\n                iterator++;\n            }\n            else {\n                tmpPanel.style.width = \"0px\";\n                tmpPanel.style.marginRight = \"0px\";\n            }\n        }\n    }\n}\n","import { setOnLeftClickPressed, setOnLeftClickReleased, setOnRightClickPressed, setOnRightClickReleased } from \"./mouse\";\nexport function registerKeyBind(code, onPressed, onReleased) {\n    if (code == \"MOUSE_1\") {\n        setOnLeftClickPressed(() => onPressed());\n        setOnLeftClickReleased(() => onReleased());\n        return;\n    }\n    if (code == \"MOUSE_2\") {\n        setOnRightClickPressed(() => onPressed());\n        setOnRightClickReleased(() => onReleased());\n        return;\n    }\n    const commandName = `Custom_Key_Bind_${Date.now().toString()}_${code}`;\n    Game.AddCommand(\"+\" + commandName, onPressed, \"\", 0);\n    Game.AddCommand(\"-\" + commandName, onReleased, \"\", 0);\n    Game.CreateCustomKeyBind(code, \"+\" + commandName);\n}\n","import CustomEntities from \"../customEntities\";\nimport CustomAbilities from \"../customAbilities\";\nconst customEntities = CustomEntities.GetInstance();\nconst customAbilities = CustomAbilities.GetInstance();\nexport default class LayoutController {\n    constructor() {\n        let topPanel = $.GetContextPanel();\n        while (topPanel.GetParent() != null) {\n            const upperPanel = topPanel.GetParent();\n            if (upperPanel) {\n                topPanel = upperPanel;\n            }\n        }\n        this.topPanel = topPanel;\n        this.dimmerPanel = $.CreatePanelWithProperties(\"Panel\", this.topPanel, \"customDimmer\", {\n            class: \"customDimmer\",\n            hittest: \"false\",\n            hittestchildren: \"false\"\n        });\n        this.dimmerPanel.style.height = \"100%\";\n        this.dimmerPanel.style.width = \"100%\";\n        this.dimmerPanel.style.backgroundColor = \"rgb(0, 0, 0)\";\n        this.dimmerPanel.style.opacity = \"0.0\";\n        this.dimmerPanel.style.transitionProperty = \"opacity\";\n        this.dimmerPanel.style.transitionDuration = \"0.5s\";\n        this.dimmerPanel.style.zIndex = -1;\n    }\n    static GetInstance() {\n        if (!LayoutController.instance) {\n            LayoutController.instance = new LayoutController();\n        }\n        return LayoutController.instance;\n    }\n    ShowDimmer() {\n        this.dimmerPanel.style.opacity = \"0.85\";\n    }\n    HideDimmer() {\n        this.dimmerPanel.style.opacity = \"0.0\";\n    }\n    GetTopPanel() {\n        return this.topPanel;\n    }\n    ChangeAbilityTextBySlotIndex(text, slotIndex) {\n        const boxName = \"Ability\" + slotIndex;\n        this.ChangeAbilityTextByBoxName(text, boxName);\n    }\n    ChangeAbilityTextByBoxName(text, boxName) {\n        const abilityPanel = this.topPanel.FindChildTraverse(boxName);\n        if (abilityPanel) {\n            const hotkey = abilityPanel.FindChildTraverse(\"HotkeyText\");\n            if (hotkey) {\n                hotkey.text = text;\n                hotkey.GetParent().visible = true;\n            }\n            else {\n                $.Schedule(2.0, () => {\n                    this.ChangeAbilityTextByBoxName(text, boxName);\n                });\n                return;\n            }\n        }\n        else {\n            $.Schedule(2.0, () => {\n                this.ChangeAbilityTextByBoxName(text, boxName);\n            });\n            return;\n        }\n    }\n    //MOVe this sOmeWhere\n    IsLocalSelectingOwnedUnit() {\n        const localPlayerId = Game.GetLocalPlayerID();\n        let selectedPlayerId = undefined;\n        const selectedEntity = Players.GetSelectedEntities(localPlayerId)[0];\n        if (selectedEntity) {\n            selectedPlayerId = Entities.GetPlayerOwnerID(selectedEntity);\n        }\n        return selectedPlayerId === localPlayerId;\n    }\n    UpdateCurrency() {\n        $.Schedule(0.03, () => {\n            if (this.UpdateCurrencyVisibility()) {\n                this.UpdateCurrencyValues();\n            }\n            this.UpdateCurrency();\n        });\n    }\n    UpdateCurrencyVisibility() {\n        if (!this.IsLocalSelectingOwnedUnit()) {\n            for (let i = 0; i < 9; i++) {\n                this.DisableAbilityEnergy(i);\n            }\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    UpdateCurrencyValues() {\n        const localPlayerId = Game.GetLocalPlayerID();\n        const selectedEntity = Players.GetSelectedEntities(localPlayerId)[0];\n        const entityData = customEntities.GetEntity(selectedEntity);\n        if (entityData) {\n            for (let i = 0; i < 9; i++) {\n                const abilityPanel = this.topPanel.FindChildTraverse(\"Ability\" + i);\n                if (abilityPanel) {\n                    const abilityIndex = Entities.GetAbility(selectedEntity, i);\n                    const abilityEnergyCost = customAbilities.GetEnergyCost(abilityIndex);\n                    const abilityManaCost = Abilities.GetManaCost(abilityIndex);\n                    this.UpdateResourceBoxOnAbility(abilityPanel, abilityManaCost, abilityEnergyCost);\n                    if (abilityEnergyCost > 0) {\n                        this.UpdateAbilityEnergy(abilityPanel, abilityEnergyCost, entityData.energy);\n                    }\n                }\n            }\n        }\n    }\n    UpdateResourceBoxOnAbility(abilityPanel, abilityManaCost, abilityEnergyCost) {\n        if (abilityManaCost > 0 || abilityEnergyCost > 0) {\n            abilityPanel.SetHasClass(\"no_mana_cost\", false);\n            const manaCost = abilityPanel.FindChildTraverse(\"ManaCost\");\n            const bevel = abilityPanel.FindChildTraverse(\"AbilityBevel\");\n            const image = abilityPanel.FindChildTraverse(\"AbilityImage\");\n            if (abilityEnergyCost > 0) {\n                manaCost.text = abilityEnergyCost.toString();\n                manaCost.style.color = \"rgb(233, 53, 53)\";\n            }\n            if (abilityManaCost > 0) {\n                manaCost.text = abilityManaCost.toString();\n                manaCost.style.color = \"#57b7ff\";\n                bevel.style.washColor = \"#6095FD\";\n                //image.style.washColor = '#57b7ff';\n            }\n        }\n        else {\n            abilityPanel.SetHasClass(\"no_mana_cost\", true);\n        }\n    }\n    UpdateAbilityEnergy(abilityPanel, abilityEnergyCost, entityEnergy) {\n        const image = abilityPanel.FindChildTraverse(\"AbilityImage\");\n        const bevel = abilityPanel.FindChildTraverse(\"AbilityBevel\");\n        const abilityButton = abilityPanel.FindChildTraverse(\"AbilityButton\");\n        if (entityEnergy >= abilityEnergyCost) {\n            abilityButton.style.preTransformScale2d = \"1.0\";\n            image.style.washColor = \"#bc591600\";\n            bevel.style.washColor = \"#bc591600\";\n        }\n        else {\n            abilityButton.style.preTransformScale2d = \"0.9\";\n            image.style.washColor = \"#bc5916\";\n            bevel.style.washColor = \"#bc5916\";\n        }\n    }\n    DisableAbilityEnergy(slotIndex) {\n        const abilityPanel = this.topPanel.FindChildTraverse(\"Ability\" + slotIndex);\n        if (abilityPanel) {\n            abilityPanel.SetHasClass(\"energy\", false);\n            abilityPanel.SetHasClass(\"no_mana_cost\", true);\n        }\n    }\n    EnablePanel(panelName) {\n        const panel = this.topPanel.FindChildTraverse(panelName);\n        if (panel) {\n            panel.style.visibility = \"visible\";\n        }\n    }\n    CollapsePanel(panelName) {\n        const panel = this.topPanel.FindChildTraverse(panelName);\n        if (panel) {\n            panel.style.visibility = \"collapse\";\n        }\n    }\n    CollapsePanelByClass(className) {\n        const panel = this.topPanel.FindChildrenWithClassTraverse(className)[0];\n        if (panel) {\n            panel.style.visibility = \"collapse\";\n        }\n    }\n    SetPanelMargin(panelName, margins) {\n        const panel = this.topPanel.FindChildTraverse(panelName);\n        if (panel) {\n            if (margins.bottom) {\n                panel.style.marginBottom = margins.bottom;\n            }\n            if (margins.right) {\n                panel.style.marginRight = margins.right;\n            }\n            if (margins.bottom) {\n                panel.style.marginBottom = margins.bottom;\n            }\n            if (margins.left) {\n                panel.style.marginLeft = margins.left;\n            }\n        }\n    }\n}\n","let onLeftClickPressed = () => { };\nlet onLeftClickReleased = () => { };\nlet onRightClickPressed = () => { };\nlet onRightClickReleased = () => { };\nvar MouseButtons;\n(function (MouseButtons) {\n    MouseButtons[MouseButtons[\"LEFT_CLICK\"] = 0] = \"LEFT_CLICK\";\n    MouseButtons[MouseButtons[\"RIGHT_CLICK\"] = 1] = \"RIGHT_CLICK\";\n})(MouseButtons || (MouseButtons = {}));\nGameUI.SetMouseCallback((event, value) => {\n    if (event === \"pressed\") {\n        if (value === MouseButtons.LEFT_CLICK) {\n            if (GameUI.IsControlDown()) {\n                return false;\n            }\n            onLeftClickPressed();\n            const reTry = () => {\n                if (GameUI.IsMouseDown(MouseButtons.LEFT_CLICK)) {\n                    onLeftClickPressed();\n                    $.Schedule(0.05, reTry);\n                }\n            };\n            $.Schedule(0.05, reTry);\n            return true;\n        }\n        if (value === MouseButtons.RIGHT_CLICK) {\n            onRightClickPressed();\n            return true;\n        }\n    }\n    if (event === \"released\") {\n        if (value === MouseButtons.LEFT_CLICK) {\n            onLeftClickReleased();\n            return true;\n        }\n        if (value === MouseButtons.RIGHT_CLICK) {\n            onRightClickReleased();\n            return true;\n        }\n    }\n    return false;\n});\nexport function setOnLeftClickPressed(action) {\n    onLeftClickPressed = action;\n}\nexport function setOnRightClickPressed(action) {\n    onRightClickPressed = action;\n}\nexport function setOnLeftClickReleased(action) {\n    onLeftClickReleased = action;\n}\nexport function setOnRightClickReleased(action) {\n    onRightClickReleased = action;\n}\n","import ProgressBar from \"../progressBar\";\nimport { modifiers } from \"../util\";\nexport default class Castpoint {\n    constructor(container, entityIndex) {\n        this.progressBar = new ProgressBar(\"castpoint__progress-bar\", container, {});\n        this.entityIndex = entityIndex;\n        this.container = container;\n        this.Update();\n    }\n    Update() {\n        let modifierIndex = modifiers.findModifierByName(this.entityIndex, \"modifier_casting\");\n        if (modifierIndex) {\n            modifierIndex = modifierIndex;\n            const duration = Buffs.GetDuration(this.entityIndex, modifierIndex);\n            const remaining = Buffs.GetRemainingTime(this.entityIndex, modifierIndex);\n            let progressRatio = 1;\n            if (remaining && duration) {\n                progressRatio = remaining / duration;\n            }\n            if (isNaN(progressRatio)) {\n                progressRatio = 1;\n            }\n            progressRatio = 1 - progressRatio;\n            this.progressBar.SetProgress(progressRatio * 100);\n            this.progressBar.SetForegroundColor(\"#FAFAFA\");\n            this.container.style.opacity = \"1.0\";\n        }\n        else {\n            const fillness = this.progressBar.GetProgress();\n            if (fillness < 100) {\n                this.progressBar.SetForegroundColor(\"rgb(238, 53, 0)\");\n            }\n            else {\n                this.progressBar.SetForegroundColor(\"rgb(51, 162, 40)\");\n            }\n            this.container.style.opacity = \"0.0\";\n        }\n        $.Schedule(0.03, () => {\n            this.Update();\n        });\n    }\n}\n","import { modifiers, panels } from \"../util\";\nexport default class Charges {\n    constructor(container, entityIndex, modifierName) {\n        this.panel = panels.createPanelSimple(container, \"charges\");\n        this.entityIndex = entityIndex;\n        this.modifierName = modifierName;\n        const textPanelLeft = panels.createPanelSimple(this.panel, \"charges__text\", \"Label\");\n        this.textPanelMid = panels.createPanelSimple(this.panel, \"charges__text charges__text--number\", \"Label\");\n        const textPanelRight = panels.createPanelSimple(this.panel, \"charges__text\", \"Label\");\n        textPanelLeft.text = \"(\";\n        this.textPanelMid.text = \"0\";\n        textPanelRight.text = \")\";\n        this.Update();\n    }\n    Update() {\n        let modifierIndex = modifiers.findModifierByName(this.entityIndex, this.modifierName);\n        if (modifierIndex) {\n            modifierIndex = modifierIndex;\n            const ammount = Buffs.GetStackCount(this.entityIndex, modifierIndex);\n            this.textPanelMid.text = ammount.toString();\n            this.textPanelMid.style.color = \"#FAFAFA\";\n            if (ammount == 0) {\n                this.textPanelMid.style.color = \"rgba(238, 53, 0, 1.0)\";\n            }\n        }\n        $.Schedule(0.03, () => {\n            this.Update();\n        });\n    }\n}\n","import { modifiers, panels } from \"../util\";\nexport default class Cooldown {\n    constructor(container, entityIndex, modifierName) {\n        this.panel = panels.createPanelSimple(container, \"cooldown\");\n        this.entityIndex = entityIndex;\n        this.modifierName = modifierName;\n        this.backgroundPanel = panels.createPanelSimple(this.panel, \"cooldown__background\");\n        this.foregroundPanel = panels.createPanelSimple(this.panel, \"cooldown__foreground\");\n        this.Update();\n    }\n    Update() {\n        let modifierIndex = modifiers.findModifierByName(this.entityIndex, this.modifierName);\n        if (modifierIndex) {\n            modifierIndex = modifierIndex;\n            const duration = Buffs.GetDuration(this.entityIndex, modifierIndex);\n            if (duration == -1) {\n                this.foregroundPanel.style.clip = \"radial(50% 50%, 0deg, \" + 360 + \"deg)\";\n                this.foregroundPanel.style.backgroundColor = \"rgb(162, 249, 154)\";\n                $.Schedule(0.03, () => {\n                    this.Update();\n                });\n                return;\n            }\n            const remaining = Buffs.GetRemainingTime(this.entityIndex, modifierIndex);\n            let progressRatio = 1;\n            if (remaining && duration) {\n                progressRatio = remaining / duration;\n            }\n            if (isNaN(progressRatio)) {\n                progressRatio = 1;\n            }\n            progressRatio = 1 - progressRatio;\n            const degree = 360 * progressRatio;\n            this.foregroundPanel.style.clip = \"radial(50% 50%, 0deg, \" + degree + \"deg)\";\n            this.foregroundPanel.style.backgroundColor = \"rgb(238, 53, 0)\";\n            if (degree == 360) {\n                this.foregroundPanel.style.backgroundColor = \"rgb(162, 249, 154)\";\n            }\n        }\n        $.Schedule(0.03, () => {\n            this.Update();\n        });\n    }\n    GetPanel() {\n        return this.panel;\n    }\n}\n","import Overhead from \"./overhead\";\nimport Recast from \"./recast\";\nimport Status from \"./status\";\nimport util, { colors, panels } from \"../util\";\nimport Player from \"./player\";\nimport Charges from \"./charges\";\nimport Cooldown from \"./cooldown\";\nimport Stacks from \"./stacks\";\nimport Health from \"../commonComponents/health\";\nimport Alliances from \"../alliances\";\nimport Castpoint from \"./castpoint\";\nimport MultipleBars from \"../commonComponents/multipleBars\";\nvar StatusScope;\n(function (StatusScope) {\n    StatusScope[StatusScope[\"STATUS_SCOPE_PUBLIC\"] = 1] = \"STATUS_SCOPE_PUBLIC\";\n    StatusScope[StatusScope[\"STATUS_SCOPE_LOCAL\"] = 2] = \"STATUS_SCOPE_LOCAL\";\n})(StatusScope || (StatusScope = {}));\nconst alliances = Alliances.GetInstance();\nexport default class HeroOverhead extends Overhead {\n    constructor(heroData) {\n        super(heroData.entityIndex);\n        const alliance = alliances.findAllianceByTeam(heroData.teamId);\n        const localPlayerId = Game.GetLocalPlayerID();\n        this.isLocalPlayer = localPlayerId == heroData.playerId;\n        this.color = colors[alliance.GetColor()];\n        this.topPanel = panels.createPanelSimple(this.containerPanel, \"unit-overhead__top\");\n        this.midPanel = panels.createPanelSimple(this.containerPanel, \"unit-overhead__mid\");\n        this.botPanel = panels.createPanelSimple(this.containerPanel, \"unit-overhead__bot unit-overhead__bot--hero\");\n        this.chargesPanel = panels.createPanelSimple(this.botPanel, \"unit-overhead-charges\");\n        const resourcesPanel = panels.createPanelSimple(this.botPanel, \"unit-overhead-resources\");\n        this.healthPanel = panels.createPanelSimple(resourcesPanel, \"unit-overhead-resources__health\");\n        this.manaPanel = panels.createPanelSimple(resourcesPanel, \"unit-overhead-resources__mana\");\n        this.energyPanel = panels.createPanelSimple(resourcesPanel, \"unit-overhead-resources__energy\");\n        this.castpointPanel = panels.createPanelSimple(resourcesPanel, \"unit-overhead-resources__castpoint\");\n        this.ammoPanel = panels.createPanelSimple(this.botPanel, \"unit-overhead-ammo\");\n        this.stackbarsPanel = panels.createPanelSimple(this.ammoPanel, \"unit-overhead-ammo__stackbars\");\n        this.cooldownPanel = panels.createPanelSimple(this.ammoPanel, \"unit-overhead-ammo__cooldown\");\n        if (alliance.IsLocal()) {\n            this.mana = new MultipleBars(this.manaPanel, {\n                value: heroData.mana,\n                maxValue: heroData.maxMana,\n                className: \"mana\",\n                fullColor: colors.Gradient(colors.blue),\n                valuePerCell: 25\n            });\n            this.energy = new MultipleBars(this.energyPanel, {\n                value: heroData.energy,\n                maxValue: heroData.maxEnergy,\n                className: \"energy\",\n                fullColor: colors.Gradient(colors.yellowRed),\n                valuePerCell: heroData.energyPerCell || 100\n            });\n        }\n        this.recast = new Recast(this.topPanel);\n        this.status = new Status(this.midPanel, heroData.entityIndex);\n        const player = new Player(this.midPanel, heroData.playerId, this.color);\n        this.health = new Health(this.healthPanel, {\n            color: this.color,\n            rounded: true\n        });\n        this.castpoint = new Castpoint(this.castpointPanel, heroData.entityIndex);\n        this.midSwitchPanel = new SwitchPanel(player.GetPanel(), this.status.GetPanel());\n        this.botSwitchPanel = new SwitchPanel(this.cooldownPanel, this.stackbarsPanel);\n        if (heroData.cooldown && this.isLocalPlayer) {\n            this.cooldown = new Cooldown(this.cooldownPanel, heroData.entityIndex, heroData.cooldown);\n            this.botSwitchPanel.SetState(0);\n        }\n        if (heroData.stackbars && this.isLocalPlayer) {\n            this.stacks = new Stacks(this.ammoPanel, heroData.entityIndex, heroData.stackbars);\n            this.botSwitchPanel.SetState(1);\n        }\n        if (heroData.charges && this.isLocalPlayer) {\n            this.charges = new Charges(this.chargesPanel, heroData.entityIndex, heroData.charges);\n        }\n        this.UpdateData(heroData);\n    }\n    ShouldShowStatus(status) {\n        return !util.isEmptyObject(status);\n    }\n    GetCurrentStatus(status) {\n        let currentStatus = undefined;\n        for (const modifierName in status) {\n            const tempStatus = status[modifierName];\n            if (!currentStatus || tempStatus.priority > currentStatus.priority) {\n                if (tempStatus.scope == StatusScope.STATUS_SCOPE_LOCAL) {\n                    if (this.isLocalPlayer) {\n                        currentStatus = tempStatus;\n                    }\n                }\n                else {\n                    currentStatus = tempStatus;\n                }\n            }\n        }\n        return currentStatus;\n    }\n    UpdateData(heroData) {\n        if (!util.isEmptyObject(heroData.recast) && this.isLocalPlayer) {\n            const currentRecast = util.getFirstObjectElement(heroData.recast);\n            this.recast.Activate(currentRecast.ability_name, currentRecast.key);\n        }\n        else {\n            this.recast.Deactivate();\n        }\n        if (this.ShouldShowStatus(heroData.status)) {\n            const currentStatus = this.GetCurrentStatus(heroData.status);\n            if (currentStatus) {\n                const { label, style_name, trigger, modifier_name, max_stacks, content } = currentStatus;\n                if (!this.status.HasData()) {\n                    this.status.SetData(label, style_name, trigger, modifier_name, max_stacks, content);\n                }\n                if (!this.status.IsActive()) {\n                    this.status.Activate();\n                }\n                this.midSwitchPanel.SetState(1);\n            }\n            else {\n                this.status.Deactivate();\n                this.midSwitchPanel.SetState(0);\n            }\n        }\n        else {\n            this.status.Deactivate();\n            this.midSwitchPanel.SetState(0);\n        }\n        this.health.Update(heroData.health, heroData.treshold, heroData.maxHealth, heroData.shield);\n        if (this.mana) {\n            this.mana.Update(heroData.mana, heroData.maxMana);\n        }\n        if (this.energy) {\n            this.energy.Update(heroData.energy, heroData.maxEnergy);\n        }\n    }\n}\nclass SwitchPanel {\n    constructor(firstPanel, secondPanel) {\n        this.childrens = [];\n        this.state = 1;\n        this.AddPanel(firstPanel);\n        this.AddPanel(secondPanel);\n        this.Switch();\n    }\n    ShutDownBoth() {\n        this.childrens[0].style.visibility = \"collapse\";\n        this.childrens[1].style.visibility = \"collapse\";\n        this.state = -1;\n    }\n    Switch() {\n        if (this.state == 0) {\n            this.childrens[0].style.visibility = \"collapse\";\n            this.childrens[1].style.visibility = \"visible\";\n            this.state = 1;\n        }\n        else {\n            this.childrens[1].style.visibility = \"collapse\";\n            this.childrens[0].style.visibility = \"visible\";\n            this.state = 0;\n        }\n    }\n    SetState(state) {\n        if (this.state != state) {\n            this.Switch();\n        }\n    }\n    AddPanel(panel) {\n        this.childrens.push(panel);\n    }\n}\n","import { modifiers, entities } from \"../util\";\nimport { toplevelRoot } from \"../components/topLevelRoot\";\nimport { std } from \"../std\";\nconst screenWidth = Game.GetScreenWidth();\nconst sreenHeight = Game.GetScreenHeight();\nconst scale = 1080 / sreenHeight;\nexport default class Overhead {\n    constructor(entiyIndex) {\n        this.thinkInterval = 0.03;\n        this.entityIndex = entiyIndex;\n        const root = toplevelRoot(\"overheadHUD\");\n        this.containerPanel = std.panel(root, { class: \"overhead\" });\n        this.ScheduleUpdate();\n    }\n    ScheduleUpdate() {\n        if (this.UpdateVisibility()) {\n            this.UpdatePosition();\n        }\n        $.Schedule(this.thinkInterval, () => {\n            this.ScheduleUpdate();\n        });\n    }\n    UpdatePosition() {\n        const origin = Entities.GetAbsOrigin(this.entityIndex);\n        const offset = Entities.GetHealthBarOffset(this.entityIndex);\n        const wx = Game.WorldToScreenX(origin[0], origin[1], origin[2] + offset);\n        const wy = Game.WorldToScreenY(origin[0], origin[1], origin[2] + offset);\n        const check = Game.ScreenXYToWorld(wx, wy);\n        if (check[1] != 0) {\n            if (wy > sreenHeight || wx < 0 || wx > screenWidth || wy < 0) {\n                this.SoftHide();\n                return false;\n            }\n            const x = scale *\n                Math.min(screenWidth - this.containerPanel.actuallayoutwidth, Math.max(0, wx - this.containerPanel.actuallayoutwidth / 2));\n            const y = scale *\n                Math.min(sreenHeight - this.containerPanel.actuallayoutheight, Math.max(0, wy - this.containerPanel.actuallayoutheight));\n            this.containerPanel.style.position = x + \"px \" + y + \"px 0px;\";\n            if (this.containerPanel.actuallayoutwidth == 0 && this.containerPanel.actuallayoutheight == 0) {\n                this.SoftHide();\n                return true;\n            }\n        }\n        else {\n            this.SoftHide();\n            return false;\n        }\n        return true;\n    }\n    UpdateVisibility() {\n        const hide = modifiers.findModifierByName(this.entityIndex, \"modifier_hide_bar\");\n        if (Entities.IsAlive(this.entityIndex) && entities.isVisibleByLocal(this.entityIndex) && !hide) {\n            this.Show();\n            return true;\n        }\n        else {\n            this.Hide();\n            return false;\n        }\n    }\n    SoftHide() {\n        this.containerPanel.style.position = \"-1000px -1000px 0px;\";\n    }\n    Hide() {\n        this.containerPanel.SetHasClass(\"overhead--hide\", true);\n    }\n    Show() {\n        this.containerPanel.SetHasClass(\"overhead--hide\", false);\n    }\n    SetWidth(width) {\n        this.containerPanel.style.width = width + \"px\";\n    }\n}\n","import { colors, panels } from \"../util\";\nexport default class Player {\n    constructor(container, playerId, color) {\n        this.panel = panels.createPanelSimple(container, \"player-name\");\n        const textPanel = panels.createPanelSimple(this.panel, \"player-name__text\", \"Label\");\n        textPanel.text = Players.GetPlayerName(playerId);\n        textPanel.style.color = colors.Gradient(color);\n    }\n    GetPanel() {\n        return this.panel;\n    }\n}\n","import { panels } from \"../util\";\nexport default class Recast {\n    constructor(container) {\n        this.panel = panels.createPanelSimple(container, \"recast\");\n        this.imagePanel = panels.createPanelSimple(this.panel, \"recast__image\", \"DOTAAbilityImage\");\n        this.textPanel = panels.createPanelSimple(this.panel, \"recast__text\", \"Label\");\n        this.imagePanel.abilityname = \"\";\n        this.textPanel.text = \"Hello\";\n        this.Deactivate();\n    }\n    Deactivate() {\n        this.panel.SetHasClass(\"recast--deactivated\", true);\n    }\n    Activate(abilityName, key) {\n        this.imagePanel.abilityname = abilityName;\n        this.textPanel.text = key;\n        this.panel.SetHasClass(\"recast--deactivated\", false);\n    }\n}\n","import { modifiers, panels } from \"../util\";\nexport default class Stacks {\n    constructor(container, entityIndex, modifierName) {\n        this.panel = panels.createPanelSimple(container, \"stacks\");\n        this.entityIndex = entityIndex;\n        this.modifierName = modifierName;\n        const stackPanels = [];\n        for (let i = 0; i < 4; i++) {\n            stackPanels.push(panels.createPanelSimple(this.panel, \"stacks__stack\"));\n        }\n        this.Update();\n    }\n    Update() {\n        let modifierIndex = modifiers.findModifierByName(this.entityIndex, this.modifierName);\n        if (modifierIndex) {\n            modifierIndex = modifierIndex;\n            const stacks = Buffs.GetStackCount(this.entityIndex, modifierIndex);\n            for (let i = 0; i < 4; i++) {\n                if (i < stacks) {\n                    this.FillStack(i);\n                }\n                else {\n                    this.EmptyStack(i);\n                }\n            }\n        }\n        else {\n            for (let i = 0; i < 4; i++) {\n                this.EmptyStack(i);\n            }\n        }\n        $.Schedule(0.03, () => {\n            this.Update();\n        });\n    }\n    ChangeStackState(index, full) {\n        this.panel.GetChild(index).SetHasClass(\"stacks__stack--empty\", !full);\n    }\n    EmptyStack(index) {\n        this.ChangeStackState(index, false);\n    }\n    FillStack(index) {\n        this.ChangeStackState(index, true);\n    }\n    GetPanel() {\n        return this.panel;\n    }\n}\n","import ProgressBar from \"../progressBar\";\nimport { modifiers, panels } from \"../util\";\nexport var StatusTrigger;\n(function (StatusTrigger) {\n    StatusTrigger[StatusTrigger[\"STATUS_TRIGGER_DURATION\"] = 1] = \"STATUS_TRIGGER_DURATION\";\n    StatusTrigger[StatusTrigger[\"STATUS_TRIGGER_STACKS\"] = 2] = \"STATUS_TRIGGER_STACKS\";\n})(StatusTrigger || (StatusTrigger = {}));\nexport var StatusContent;\n(function (StatusContent) {\n    StatusContent[StatusContent[\"STATUS_CONTENT_CLEAROUT\"] = 1] = \"STATUS_CONTENT_CLEAROUT\";\n    StatusContent[StatusContent[\"STATUS_CONTENT_FILLUP\"] = 2] = \"STATUS_CONTENT_FILLUP\";\n})(StatusContent || (StatusContent = {}));\nexport default class Status {\n    constructor(container, entityIndex) {\n        this.active = true;\n        this.panel = panels.createPanelSimple(container, \"status\");\n        this.entityIndex = entityIndex;\n        const topPanel = panels.createPanelSimple(this.panel, \"status__top\");\n        const botPanel = panels.createPanelSimple(this.panel, \"status__bot\");\n        this.textGlowPanel = panels.createPanelSimple(topPanel, \"status__text status__text--glow\", \"Label\");\n        this.textPanel = panels.createPanelSimple(topPanel, \"status__text\", \"Label\");\n        this.progressBar = new ProgressBar(\"status__progress-bar\", botPanel, {\n            background_color: \"rgba(0, 0, 0, 0.9)\"\n        });\n        this.SetText(\"Status\");\n    }\n    SetText(text) {\n        this.textGlowPanel.text = text.toUpperCase();\n        this.textPanel.text = text.toUpperCase();\n    }\n    IsActive() {\n        return this.active;\n    }\n    Activate() {\n        this.active = true;\n        this.panel.style.visibility = \"visible\";\n        this.Update();\n    }\n    HasData() {\n        return this.modifierName !== undefined;\n    }\n    SetData(text, style, trigger, modifierName, maxStacks, content) {\n        this.modifierName = modifierName;\n        this.trigger = trigger;\n        this.maxStacks = maxStacks;\n        this.style = style;\n        this.content = content;\n        this.SetText(text);\n    }\n    Deactivate() {\n        this.modifierName = undefined;\n        this.trigger = undefined;\n        this.maxStacks = undefined;\n        this.style = undefined;\n        this.panel.style.visibility = \"collapse\";\n        this.active = false;\n        this.SetText(\"Status\");\n    }\n    Update() {\n        if (!this.active || !this.HasData()) {\n            return;\n        }\n        else {\n            let modifierIndex = modifiers.findModifierByName(this.entityIndex, this.modifierName);\n            if (modifierIndex) {\n                modifierIndex = modifierIndex;\n                const progressRatio = this.GetProgressRatio(this.entityIndex, modifierIndex, this.content, this.trigger, this.maxStacks);\n                this.progressBar.SetProgress(progressRatio * 100);\n                const style = (styles[this.style] && styles[this.style]) || styles[\"Generic\"];\n                this.progressBar.SetForegroundColor(style.backgroundColor || \"#FAFAFA\");\n                this.textGlowPanel.style.textShadow = style.textShadow || \"none\";\n                this.textPanel.style.color = style.color || \"#FAFAFA\";\n            }\n            $.Schedule(0.03, () => {\n                this.Update();\n            });\n        }\n    }\n    GetPanel() {\n        return this.panel;\n    }\n    GetProgressRatio(entityIndex, modifierIndex, content, trigger, maxStacks) {\n        let progressRatio = 1;\n        if (trigger == StatusTrigger.STATUS_TRIGGER_DURATION) {\n            const duration = Buffs.GetDuration(entityIndex, modifierIndex);\n            const remaining = Buffs.GetRemainingTime(entityIndex, modifierIndex);\n            if (remaining && duration) {\n                progressRatio = remaining / duration;\n            }\n            if (isNaN(progressRatio)) {\n                progressRatio = 1;\n            }\n            if (content == StatusContent.STATUS_CONTENT_FILLUP) {\n                progressRatio = 1 - progressRatio;\n            }\n        }\n        else if (trigger == StatusTrigger.STATUS_TRIGGER_STACKS) {\n            const stacks = Buffs.GetStackCount(entityIndex, modifierIndex) || 0;\n            if (maxStacks) {\n                progressRatio = stacks / maxStacks;\n            }\n            if (isNaN(progressRatio)) {\n                progressRatio = 1;\n            }\n            if (content == StatusContent.STATUS_CONTENT_FILLUP) {\n                progressRatio = 1 - progressRatio;\n            }\n        }\n        return progressRatio;\n    }\n}\nconst SKY_BLUE = \"#84f4eb\";\nconst LIGHT_GREEN = \"#b2f7bd\";\nconst PURPLE = \"#C655C4\";\nconst BLUE = \"#3b55ed\";\nconst LIGHT_BLUE = \"#81c3f9\";\nconst RED = \"#ed4747\";\nconst ORANGE = \"#E55C34\";\nconst styles = {};\nstyles[\"Generic\"] = {\n    backgroundColor: \"#F5E767\",\n    textShadow: CreateTextShadow(\"#F5E767\")\n};\nstyles[\"Heal\"] = { backgroundColor: LIGHT_GREEN, color: LIGHT_GREEN };\nstyles[\"Mana\"] = { backgroundColor: LIGHT_BLUE, color: LIGHT_BLUE };\nstyles[\"Ultimate\"] = {\n    backgroundColor: \"#F5E767\",\n    textShadow: CreateTextShadow(\"#F5E767\")\n};\nstyles[\"Recast\"] = {\n    backgroundColor: \"#ADC6DE\",\n    textShadow: CreateTextShadow(\"#ADC6DE\")\n};\nstyles[\"Silence\"] = {\n    backgroundColor: \"#C5FAFF\",\n    textShadow: CreateTextShadow(\"#FFBF20\")\n};\nstyles[\"Adrenaline\"] = { backgroundColor: \"#CEDCFF\", color: \"#CEDCFF\" };\nstyles[\"Shield\"] = { backgroundColor: \"#E8C070\" };\nstyles[\"Counter\"] = {\n    backgroundColor: \"#9DBDEC\",\n    textShadow: CreateTextShadow(\"#9DBDEC\")\n};\nstyles[\"Stun\"] = {\n    backgroundColor: \"#ABD5FF\",\n    textShadow: CreateTextShadow(\"#ABD5FF\")\n};\nstyles[\"Slow\"] = { backgroundColor: \"#C2AB71\", color: \"#C2AB71\" };\nstyles[\"Root\"] = {\n    backgroundColor: \"#94A551\",\n    textShadow: CreateTextShadow(\"#94A551\")\n};\nstyles[\"Channeling\"] = { backgroundColor: \"#F5E767\" };\nstyles[\"Invisible\"] = { backgroundColor: \"#AEB3A3\", color: \"#AEB3A3\" };\nstyles[\"BladeFury\"] = {\n    backgroundColor: ORANGE,\n    textShadow: CreateTextShadow(\"#DC8668\"),\n    color: \"#FFF5D7\"\n};\nstyles[\"Mekansm\"] = { backgroundColor: SKY_BLUE };\nstyles[\"Meteor\"] = { backgroundColor: SKY_BLUE, color: \"#DC8668\" };\nstyles[\"Nullify\"] = {\n    backgroundColor: PURPLE,\n    textShadow: CreateTextShadow(PURPLE)\n};\nstyles[\"Swiftness\"] = { backgroundColor: LIGHT_GREEN, color: LIGHT_GREEN };\nstyles[\"Inhibit\"] = {\n    backgroundColor: BLUE,\n    textShadow: CreateTextShadow(BLUE)\n};\nstyles[\"Sacrifice\"] = {\n    backgroundColor: LIGHT_BLUE,\n    textShadow: CreateTextShadow(RED)\n};\nstyles[\"Flutter\"] = {\n    backgroundColor: LIGHT_GREEN,\n    textShadow: CreateTextShadow(LIGHT_GREEN)\n};\nstyles[\"Fear\"] = {\n    backgroundColor: ORANGE,\n    textShadow: CreateTextShadow(\"#DC8668\"),\n    color: \"#DC8668\"\n};\nstyles[\"PhaseShift\"] = {\n    backgroundColor: LIGHT_BLUE,\n    textShadow: CreateTextShadow(LIGHT_BLUE)\n};\nstyles[\"SpellBlock\"] = {\n    backgroundColor: LIGHT_BLUE,\n    textShadow: CreateTextShadow(RED)\n};\nstyles[\"FairyDust\"] = {\n    backgroundColor: PURPLE,\n    textShadow: CreateTextShadow(LIGHT_BLUE)\n};\nstyles[\"Desolate\"] = { backgroundColor: \"#C655C4\", color: \"#C655C4\" };\nstyles[\"DancingBlades\"] = { backgroundColor: \"#DC8668\", color: \"#DC8668\" };\nstyles[\"Raze\"] = {\n    backgroundColor: ORANGE,\n    textShadow: CreateTextShadow(\"#DC8668\"),\n    color: \"#E8C070\"\n};\nstyles[\"Desolation\"] = {\n    backgroundColor: \"#E55C34\",\n    textShadow: CreateTextShadow(\"#DC8668\"),\n    color: \"#E8C070\"\n};\nstyles[\"StormUnleashed\"] = {\n    backgroundColor: BLUE,\n    textShadow: CreateTextShadow(LIGHT_BLUE),\n    color: SKY_BLUE\n};\nstyles[\"Bleeding\"] = {\n    backgroundColor: ORANGE,\n    textShadow: CreateTextShadow(PURPLE),\n    color: RED\n};\nstyles[\"Revenant\"] = {\n    backgroundColor: ORANGE,\n    textShadow: CreateTextShadow(PURPLE),\n    color: RED\n};\nstyles[\"Ruby\"] = {\n    backgroundColor: ORANGE,\n    textShadow: CreateTextShadow(ORANGE),\n    color: RED\n};\nstyles[\"Darkness\"] = { backgroundColor: \"#DC8668\", color: \"#DC8668\" };\nstyles[\"Sleep\"] = {\n    backgroundColor: \"#CB8CFF\",\n    textShadow: CreateTextShadow(\"#CB8CFF\")\n};\nstyles[\"Sapphire\"] = {\n    backgroundColor: LIGHT_BLUE,\n    color: LIGHT_BLUE,\n    textShadow: CreateTextShadow(BLUE)\n};\nstyles[\"Emerald\"] = {\n    backgroundColor: LIGHT_GREEN,\n    textShadow: CreateTextShadow(LIGHT_GREEN)\n};\nfunction CreateTextShadow(color) {\n    return \"0px 0px 30px 8.0 \" + color + \";\";\n}\n","import Overhead from \"./overhead\";\nimport Status from \"./status\";\nimport util, { colors, panels } from \"../util\";\nimport Health from \"../commonComponents/health\";\nvar StatusScope;\n(function (StatusScope) {\n    StatusScope[StatusScope[\"STATUS_SCOPE_PUBLIC\"] = 1] = \"STATUS_SCOPE_PUBLIC\";\n    StatusScope[StatusScope[\"STATUS_SCOPE_LOCAL\"] = 2] = \"STATUS_SCOPE_LOCAL\";\n})(StatusScope || (StatusScope = {}));\nvar BeenHurt;\n(function (BeenHurt) {\n    BeenHurt[BeenHurt[\"BEEN_HURT\"] = 1] = \"BEEN_HURT\";\n    BeenHurt[BeenHurt[\"NOT_HURT\"] = 0] = \"NOT_HURT\";\n})(BeenHurt || (BeenHurt = {}));\nexport default class UnitOverhead extends Overhead {\n    constructor(unitData) {\n        super(unitData.entityIndex);\n        const localPlayerId = Game.GetLocalPlayerID();\n        this.hideWhenNotHurt = unitData.hideWhenNotHurt ? unitData.hideWhenNotHurt : true;\n        this.active = !this.hideWhenNotHurt;\n        this.isLocalPlayer = localPlayerId == unitData.playerId;\n        this.color = colors.orange;\n        this.topPanel = panels.createPanelSimple(this.containerPanel, \"unit-overhead__top\");\n        this.midPanel = panels.createPanelSimple(this.containerPanel, \"unit-overhead__mid\");\n        this.botPanel = panels.createPanelSimple(this.containerPanel, \"unit-overhead__bot\");\n        const resourcesPanel = panels.createPanelSimple(this.botPanel, \"unit-overhead-resources\");\n        this.healthPanel = panels.createPanelSimple(resourcesPanel, \"unit-overhead-resources__health\");\n        this.status = new Status(this.midPanel, unitData.entityIndex);\n        this.health = new Health(this.healthPanel, {\n            color: this.color,\n            rounded: true,\n            maxTreshold: unitData.maxHealth,\n            shieldOnFront: true\n        });\n        if (unitData.beenHurt === BeenHurt.NOT_HURT && this.hideWhenNotHurt) {\n            this.Hide();\n            this.status.Deactivate();\n            this.health.Deactivate();\n        }\n        this.UpdateData(unitData);\n    }\n    ShouldShowStatus(status) {\n        return !util.isEmptyObject(status);\n    }\n    ShouldActivate(beenHurt) {\n        if (this.hideWhenNotHurt && beenHurt === BeenHurt.NOT_HURT) {\n            return false;\n        }\n        return true;\n    }\n    GetCurrentStatus(status) {\n        let currentStatus = undefined;\n        for (const modifierName in status) {\n            const tempStatus = status[modifierName];\n            if (!currentStatus || tempStatus.priority > currentStatus.priority) {\n                if (tempStatus.scope == StatusScope.STATUS_SCOPE_LOCAL) {\n                    if (this.isLocalPlayer) {\n                        currentStatus = tempStatus;\n                    }\n                }\n                else {\n                    currentStatus = tempStatus;\n                }\n            }\n        }\n        return currentStatus;\n    }\n    UpdateData(unitData) {\n        if (!this.active) {\n            if (this.ShouldActivate(unitData.beenHurt)) {\n                this.Show();\n                this.status.Activate();\n                this.health.Activate();\n                this.active = true;\n            }\n            else {\n                return;\n            }\n        }\n        if (this.ShouldShowStatus(unitData.status)) {\n            const currentStatus = this.GetCurrentStatus(unitData.status);\n            if (currentStatus) {\n                const { label, style_name, trigger, modifier_name, max_stacks, content } = currentStatus;\n                if (!this.status.HasData()) {\n                    this.status.SetData(label, style_name, trigger, modifier_name, max_stacks, content);\n                }\n                if (!this.status.IsActive()) {\n                    this.status.Activate();\n                }\n            }\n            else {\n                this.status.Deactivate();\n            }\n        }\n        else {\n            this.status.Deactivate();\n        }\n        this.health.Update(unitData.health, unitData.health, unitData.maxHealth, unitData.shield);\n    }\n}\nclass SwitchPanel {\n    constructor(firstPanel, secondPanel) {\n        this.childrens = [];\n        this.state = 1;\n        this.AddPanel(firstPanel);\n        this.AddPanel(secondPanel);\n        this.Switch();\n    }\n    ShutDownBoth() {\n        this.childrens[0].style.visibility = \"collapse\";\n        this.childrens[1].style.visibility = \"collapse\";\n        this.state = -1;\n    }\n    Switch() {\n        if (this.state == 0) {\n            this.childrens[0].style.visibility = \"collapse\";\n            this.childrens[1].style.visibility = \"visible\";\n            this.state = 1;\n        }\n        else {\n            this.childrens[1].style.visibility = \"collapse\";\n            this.childrens[0].style.visibility = \"visible\";\n            this.state = 0;\n        }\n    }\n    SetState(state) {\n        if (this.state != state) {\n            this.Switch();\n        }\n    }\n    AddPanel(panel) {\n        this.childrens.push(panel);\n    }\n}\n","export default class ProgressBar {\n    constructor(id, parent, data) {\n        this.cellWidth = undefined;\n        this.id = id;\n        this.parent = parent;\n        const foreground_color = data.foreground_color || \"#FAFAFA\";\n        const background_color = data.background_color || \"rgba(36, 42, 53, 0.8)\";\n        const font_size = data.font_size || \"12px\";\n        const delayed = data.delayed || false;\n        const show_value = data.show_value || false;\n        const border_radius = data.border_radius || \"0\";\n        this.panel = $.CreatePanelWithProperties(\"Panel\", parent, id, {\n            class: \"ProgressBar\",\n            hittest: \"false\",\n            hittestchildren: \"false\"\n        });\n        this.resizablePanel = $.CreatePanelWithProperties(\"Panel\", this.panel, \"id\", {\n            id: \"ProgressBar__Resizable\",\n            class: \"ProgressBar__Resizable\",\n            hittest: \"false\",\n            hittestchildren: \"false\"\n        });\n        this.fixedPanel = $.CreatePanelWithProperties(\"Panel\", this.panel, \"id\", {\n            class: \"ProgressBar__Fixed\",\n            id: \"ProgressBar__Fixed\",\n            hittest: \"false\",\n            hittestchildren: \"false\"\n        });\n        this.backgroundPanel = $.CreatePanelWithProperties(\"Panel\", this.resizablePanel, \"id\", {\n            id: \"ProgressBar__Background\",\n            class: \"ProgressBar__Background\",\n            hittest: \"false\",\n            hittestchildren: \"false\"\n        });\n        this.textPanel = $.CreatePanelWithProperties(\"Label\", this.fixedPanel, \"id\", {\n            id: \"ProgressBar__Text\",\n            class: \"ProgressBar__Text\",\n            hittest: \"false\",\n            hittestchildren: \"false\",\n            text: \"-\"\n        });\n        this.cellsPanel = $.CreatePanelWithProperties(\"Panel\", this.fixedPanel, \"id\", {\n            id: \"ProgressBar__Cells\",\n            class: \"ProgressBar__Cells\",\n            hittest: \"false\",\n            hittestchildren: \"false\"\n        });\n        this.delayPanel = $.CreatePanelWithProperties(\"Panel\", this.backgroundPanel, \"id\", {\n            id: \"ProgressBar__Delay\",\n            class: \"ProgressBar__Delay\",\n            hittest: \"false\",\n            hittestchildren: \"false\"\n        });\n        this.foregroundPanel = $.CreatePanelWithProperties(\"Panel\", this.backgroundPanel, \"id\", {\n            id: \"ProgressBar__Foreground\",\n            class: \"ProgressBar__Foreground\",\n            hittest: \"false\",\n            hittestchildren: \"false\"\n        });\n        this.foregroundPanel.style.width = \"0%\";\n        this.foregroundPanel.style.borderRadius = border_radius;\n        this.delayPanel.style.borderRadius = border_radius;\n        this.backgroundPanel.style.borderRadius = border_radius;\n        this.delayPanel.style.visibility = (delayed && \"visible\") || \"collapse\";\n        this.textPanel.style.visibility = (show_value && \"visible\") || \"collapse\";\n        this.textPanel.style.fontSize = font_size;\n        this.backgroundPanel.style.backgroundColor = background_color;\n        this.foregroundPanel.style.backgroundColor = foreground_color;\n    }\n    SetTotalWidth(width) {\n        this.panel.style.width = width + \"%\";\n    }\n    SetPanelWidth(width) {\n        this.resizablePanel.style.width = width + \"%\";\n    }\n    SetProgress(progress) {\n        this.foregroundPanel.style.width = progress.toString() + \"%\";\n        this.delayPanel.style.width = progress.toString() + \"%\";\n    }\n    SetValue(value) {\n        this.textPanel.text = value;\n    }\n    SetForegroundColor(color) {\n        this.foregroundPanel.style.backgroundColor = color;\n    }\n    SetVisibility(visibility) {\n        this.panel.style.visibility = visibility;\n    }\n    SetBorder(data) {\n        if (data.left) {\n            this.backgroundPanel.style.borderLeft = data.left + \"px solid rgb(36, 42, 53);\";\n        }\n        if (data.right) {\n            this.backgroundPanel.style.borderRight = data.right + \"px solid rgb(36, 42, 53);\";\n        }\n        if (data.top) {\n            this.backgroundPanel.style.borderTop = data.top + \"px solid rgb(36, 42, 53);\";\n        }\n        if (data.bottom) {\n            this.backgroundPanel.style.borderBottom = data.bottom + \"px solid rgb(36, 42, 53);\";\n        }\n    }\n    SetBorderRadius(data) {\n        if (data.topRight) {\n            this.backgroundPanel.style.borderTopRightRadius = data.topRight + \"px;\";\n            this.foregroundPanel.style.borderTopRightRadius = data.topRight + \"px;\";\n            this.delayPanel.style.borderTopRightRadius = data.topRight + \"px;\";\n        }\n        if (data.topLeft) {\n            this.backgroundPanel.style.borderTopLeftRadius = data.topLeft + \"px;\";\n            this.foregroundPanel.style.borderTopLeftRadius = data.topLeft + \"px;\";\n            this.delayPanel.style.borderTopLeftRadius = data.topLeft + \"px;\";\n        }\n        if (data.bottomRight) {\n            this.backgroundPanel.style.borderBottomRightRadius = data.bottomRight + \"px;\";\n            this.foregroundPanel.style.borderBottomRightRadius = data.bottomRight + \"px;\";\n            this.delayPanel.style.borderBottomRightRadius = data.bottomRight + \"px;\";\n        }\n        if (data.bottomLeft) {\n            this.backgroundPanel.style.borderBottomLeftRadius = data.bottomLeft + \"px;\";\n            this.foregroundPanel.style.borderBottomLeftRadius = data.bottomLeft + \"px;\";\n            this.delayPanel.style.borderBottomLeftRadius = data.bottomLeft + \"px;\";\n        }\n    }\n    GetProgress() {\n        return parseInt(this.foregroundPanel.style.width.split(\"%\")[0], 10);\n    }\n    GetParent() {\n        return this.parent;\n    }\n}\n","import LayoutController from \"./layout/layoutController\";\nimport util, { tables } from \"./util\";\nvar RewardTypes;\n(function (RewardTypes) {\n    RewardTypes[RewardTypes[\"FAVOR\"] = 0] = \"FAVOR\";\n    RewardTypes[RewardTypes[\"SHARD\"] = 1] = \"SHARD\";\n    RewardTypes[RewardTypes[\"ITEM\"] = 2] = \"ITEM\";\n    RewardTypes[RewardTypes[\"KNOWLEDGE\"] = 3] = \"KNOWLEDGE\";\n    RewardTypes[RewardTypes[\"VITALITY\"] = 4] = \"VITALITY\";\n    RewardTypes[RewardTypes[\"SECRET_SHOP\"] = 5] = \"SECRET_SHOP\";\n    RewardTypes[RewardTypes[\"GOLD\"] = 6] = \"GOLD\";\n})(RewardTypes || (RewardTypes = {}));\n(function () {\n    const layout = LayoutController.GetInstance();\n    const rewardsMainContainerPanel = layout.GetTopPanel().FindChildrenWithClassTraverse(\"rewards\")[0];\n    const rewardsContainerPanel = layout.GetTopPanel().FindChildrenWithClassTraverse(\"rewards-container\")[0];\n    const upgradesContainerPanel = layout.GetTopPanel().FindChildrenWithClassTraverse(\"upgrades\")[0];\n    const CreateRewardPanel = (isLast) => {\n        const panel = $.CreatePanel(\"Panel\", rewardsContainerPanel, \"\");\n        panel.BLoadLayoutSnippet(\"Reward\");\n        if (isLast) {\n            panel.AddClass(\"reward--last\");\n        }\n        OnPanelCreated(panel);\n        return panel;\n    };\n    const CreateUpgradePanel = (isLast) => {\n        const panel = $.CreatePanel(\"Panel\", upgradesContainerPanel, \"\");\n        panel.BLoadLayoutSnippet(\"Upgrade\");\n        if (isLast) {\n            panel.AddClass(\"upgrade--last\");\n        }\n        OnPanelCreated(panel);\n        return panel;\n    };\n    const OnPanelCreated = (panel) => {\n        panel.SetDisableFocusOnMouseDown(true);\n        panel.SetPanelEvent(\"onactivate\", () => {\n            const playerId = util.getCurrentPlayer();\n            GameEvents.SendCustomGameEventToServer(\"custom_npc:apply_favor\", {\n                playerIndex: playerId,\n                payload: { upgradeId: \"\" }\n            });\n        });\n    };\n    const images = {\n        [RewardTypes.FAVOR]: {\n            src: \"file://{images}/custom_game/shield-9dsfs0d.png\",\n            width: 120\n        },\n        [RewardTypes.SHARD]: {\n            src: \"file://{images}/custom_game/patch_general.png\"\n        },\n        [RewardTypes.ITEM]: {\n            src: \"file://{images}/custom_game/immortal_alt.png\",\n            width: 150\n        },\n        [RewardTypes.KNOWLEDGE]: {\n            src: \"file://{images}/custom_game/book.png\"\n        },\n        [RewardTypes.VITALITY]: {\n            src: \"file://{images}/custom_game/benefactor_bg.png\",\n            width: 150\n        },\n        [RewardTypes.SECRET_SHOP]: {\n            src: \"file://{images}/custom_game/book.png\"\n        },\n        [RewardTypes.GOLD]: {\n            src: \"file://{images}/custom_game/tribute_image.png\"\n        }\n    };\n    const CleanRewards = () => {\n        const panels = rewardsContainerPanel.FindChildrenWithClassTraverse(\"reward\");\n        panels.forEach(panel => {\n            panel.DeleteAsync(0);\n        });\n    };\n    const CleanUpgrades = () => {\n        const panels = upgradesContainerPanel.FindChildrenWithClassTraverse(\"upgrade\");\n        panels.forEach(panel => {\n            panel.DeleteAsync(0);\n        });\n    };\n    const HideRewards = () => {\n        CleanRewards();\n        rewardsMainContainerPanel.style.visibility = \"collapse\";\n    };\n    const HideUpgrades = () => {\n        CleanUpgrades();\n        upgradesContainerPanel.style.visibility = \"collapse\";\n    };\n    const ShowRewards = (rewards) => {\n        CleanRewards();\n        rewardsMainContainerPanel.style.visibility = \"visible\";\n        for (const key in rewards) {\n            const panel = CreateRewardPanel(false);\n            const reward = rewards[key];\n            const titlePanel = panel.FindChildrenWithClassTraverse(\"reward__title\")[0];\n            const descriptionPanel = panel.FindChildrenWithClassTraverse(\"reward__description\")[0];\n            const imagePanel = panel.FindChildrenWithClassTraverse(\"reward__image\")[0];\n            if (reward) {\n                titlePanel.text = reward.name;\n                descriptionPanel.text = reward.description;\n                const image = images[reward.type];\n                imagePanel.SetImage(image.src);\n                if (image.height) {\n                    imagePanel.style.height = image.height + \"px\";\n                }\n                else {\n                    imagePanel.style.height = \"120px\";\n                }\n                if (image.width) {\n                    imagePanel.style.width = image.width + \"px\";\n                }\n                else {\n                    imagePanel.style.width = \"170px\";\n                }\n                panel.SetPanelEvent(\"onactivate\", () => {\n                    const playerId = util.getCurrentPlayer();\n                    GameEvents.SendCustomGameEventToServer(\"custom_npc:select_reward\", {\n                        playerIndex: playerId,\n                        payload: { type: reward.type }\n                    });\n                });\n            }\n        }\n    };\n    const ShowUpgrades = (upgrades) => {\n        CleanUpgrades();\n        upgradesContainerPanel.style.visibility = \"visible\";\n        let missingPanels = 3;\n        for (const key in upgrades) {\n            const panel = CreateUpgradePanel(false);\n            const upgrade = upgrades[key];\n            const titlePanel = panel.FindChildrenWithClassTraverse(\"upgrade__title\")[0];\n            const descriptionPanel = panel.FindChildrenWithClassTraverse(\"upgrade__description\")[0];\n            const abilityPanel = panel.FindChildrenWithClassTraverse(\"upgrade__ability\")[0];\n            titlePanel.text = upgrade.name;\n            descriptionPanel.text = upgrade.description;\n            if (upgrade.ability) {\n                abilityPanel.abilityname = upgrade.ability;\n            }\n            if (upgrade.abilityIconName) {\n                abilityPanel.abilityname = upgrade.abilityIconName;\n            }\n            panel.SetPanelEvent(\"onactivate\", () => {\n                const playerId = util.getCurrentPlayer();\n                GameEvents.SendCustomGameEventToServer(\"custom_npc:apply_favor\", {\n                    playerIndex: playerId,\n                    payload: { upgradeId: upgrade.id }\n                });\n            });\n            missingPanels--;\n        }\n        for (let i = 0; i < missingPanels; i++) {\n            CreateUpgradePanel(false);\n        }\n    };\n    tables.subscribeToNetTableAndLoadNow(\"custom_npc_rewards\", (table, key, value) => {\n        const playerId = util.getCurrentPlayer();\n        if (playerId === value.playerId) {\n            if (value.rewards) {\n                ShowRewards(value.rewards);\n            }\n            else {\n                HideRewards();\n            }\n        }\n    });\n    tables.subscribeToNetTableAndLoadNow(\"custom_npc_favors\", (table, key, value) => {\n        const playerId = util.getCurrentPlayer();\n        if (playerId === value.playerId) {\n            if (value.upgrades) {\n                ShowUpgrades(value.upgrades);\n            }\n            else {\n                HideUpgrades();\n            }\n        }\n    });\n})();\n","import LayoutController from \"./layout/layoutController\";\nconst layout = LayoutController.GetInstance();\nexport class ReadyBar {\n    constructor(duration) {\n        this.duration = duration;\n        this.container = layout.GetTopPanel().FindChildTraverse(\"ready-bar\");\n        this.textPanel = this.container.FindChildTraverse(\"ready-bar__title\");\n        this.textPanel.text = \"READY?\";\n        this.Activate();\n    }\n    Activate() {\n        this.container.style.height = \"200px\";\n        this.Update();\n    }\n    Update() {\n        $.Schedule(1.0, () => {\n            if (this.duration < 0) {\n                this.container.style.height = \"0px\";\n                return;\n            }\n            this.duration = this.duration - 1;\n            const text = this.duration > 0 ? this.duration.toString() : \"FIGHT!\";\n            this.textPanel.text = text;\n            this.Update();\n        });\n    }\n}\n","const server = {\n    sendActionSignalToServer: (payload) => {\n        let playerId = Players.GetLocalPlayer();\n        if (Game.IsInToolsMode()) {\n            const selectedEntity = Players.GetSelectedEntities(playerId)[0];\n            if (selectedEntity) {\n                playerId = Entities.GetPlayerOwnerID(selectedEntity);\n            }\n        }\n        const data = {\n            playerIndex: playerId,\n            payload\n        };\n        GameEvents.SendCustomGameEventToServer(\"custom_action\", data);\n    },\n    sendStopAbilitySignalToServer: (abilityEntityIndex) => {\n        const payload = {\n            abilityEntityIndex,\n            type: 1 /* Custom_ActionTypes.ABILITY */,\n            mode: 1 /* Custom_ActionModes.STOP */\n        };\n        server.sendActionSignalToServer(payload);\n    },\n    sendStartMovementSignalToServer: (direction) => {\n        const payload = {\n            direction,\n            type: 0 /* Custom_ActionTypes.MOVEMENT */,\n            mode: 0 /* Custom_ActionModes.START */\n        };\n        server.sendActionSignalToServer(payload);\n    },\n    sendStopMovementSignalToServer: (direction) => {\n        const payload = {\n            direction,\n            type: 0 /* Custom_ActionTypes.MOVEMENT */,\n            mode: 1 /* Custom_ActionModes.STOP */\n        };\n        server.sendActionSignalToServer(payload);\n    }\n};\nexport default server;\n","function panelTyped(type, parent, options) {\n    var _a, _b;\n    const panel = $.CreatePanelWithProperties(type, parent, (_a = options === null || options === void 0 ? void 0 : options.id) !== null && _a !== void 0 ? _a : \"\", (_b = options === null || options === void 0 ? void 0 : options.properties) !== null && _b !== void 0 ? _b : {});\n    if (options) {\n        if (typeof options.class == \"string\")\n            panel.AddClass(options.class);\n        if (typeof options.class == \"object\") {\n            for (const cl of options.class) {\n                panel.AddClass(cl);\n            }\n        }\n        if (options.hitTest != undefined) {\n            panel.hittest = options.hitTest;\n        }\n        if (options.visible != undefined) {\n            panel.visible = options.visible;\n        }\n    }\n    return panel;\n}\nexport var std;\n(function (std) {\n    function image(parent, options) {\n        const image = panelTyped(\"Image\", parent, options);\n        if (options) {\n            if (options.src)\n                image.SetImage(options.src);\n            if (options.scaling)\n                image.SetScaling(options.scaling);\n        }\n        return image;\n    }\n    std.image = image;\n    function panel(parent, options) {\n        return panelTyped(\"Panel\", parent, options);\n    }\n    std.panel = panel;\n    function button(parent, options) {\n        return panelTyped(\"Button\", parent, options);\n    }\n    std.button = button;\n    function toggleButton(parent, options) {\n        return panelTyped(\"ToggleButton\", parent, options);\n    }\n    std.toggleButton = toggleButton;\n    function radioButton(parent, options) {\n        return panelTyped(\"RadioButton\", parent, options);\n    }\n    std.radioButton = radioButton;\n    function label(parent, options) {\n        const label = panelTyped(\"Label\", parent, options);\n        if (options) {\n            if (options.html)\n                label.html = options.html;\n            if (options.text) {\n                if (typeof options.text == \"string\") {\n                    label.text = options.text;\n                }\n                else {\n                    for (const [key, value] of Object.entries(options.text)) {\n                        if (key == \"token\")\n                            continue;\n                        if (typeof value == \"number\") {\n                            label.SetDialogVariableInt(key, value);\n                        }\n                        else {\n                            label.SetDialogVariable(key, value);\n                        }\n                    }\n                    label.text = $.Localize(options.text.token, label);\n                }\n            }\n        }\n        return label;\n    }\n    std.label = label;\n    function input(parent, options) {\n        var _a, _b;\n        const input = panelTyped(\"TextEntry\", parent, options\n            ? Object.assign(Object.assign({}, options), { properties: options.properties\n                    ? Object.assign(Object.assign({}, options.properties), { textmode: (_a = options.textmode) !== null && _a !== void 0 ? _a : \"normal\" }) : { textmode: (_b = options.textmode) !== null && _b !== void 0 ? _b : \"normal\" } }) : undefined);\n        if (options && options.text) {\n            input.text = options.text;\n        }\n        return input;\n    }\n    std.input = input;\n    function progressBar(parent, options) {\n        const panel = panelTyped(\"ProgressBar\", parent, options);\n        if (options) {\n            if (options.min)\n                panel.min = options.min;\n            if (options.max)\n                panel.max = options.max;\n            if (options.value)\n                panel.value = options.value;\n        }\n        return panel;\n    }\n    std.progressBar = progressBar;\n    function scenePanel(parent, options) {\n        const panel = panelTyped(\"DOTAScenePanel\", parent, options);\n        if (options) {\n            if (options.hero)\n                panel.SetUnit(options.hero, \"default\", true);\n        }\n        return panel;\n    }\n    std.scenePanel = scenePanel;\n    function particleScenePanel(parent, options) {\n        var _a, _b, _c, _d, _e;\n        const properties = {};\n        if (options) {\n            properties.particleName = options.particleName;\n            properties.particleOnly = String((_a = options.particleonly) !== null && _a !== void 0 ? _a : false);\n            properties.cameraOrigin = (_b = options.cameraOrigin) !== null && _b !== void 0 ? _b : \"0 0 50\";\n            properties.lookAt = (_c = options.lookAt) !== null && _c !== void 0 ? _c : \"0 0 0\";\n            properties.fov = (_d = options.fov) !== null && _d !== void 0 ? _d : \"90\";\n            properties.startActive = String((_e = options.startActive) !== null && _e !== void 0 ? _e : true);\n        }\n        return panelTyped(\"DOTAParticleScenePanel\", parent, Object.assign(Object.assign({}, options), { properties }));\n    }\n    std.particleScenePanel = particleScenePanel;\n    function heroImage(parent, options) {\n        const panel = panelTyped(\"DOTAHeroImage\", parent, options);\n        if (options) {\n            if (options.hero)\n                panel.heroname = options.hero;\n            if (options.style)\n                panel.heroimagestyle = options.style;\n        }\n        return panel;\n    }\n    std.heroImage = heroImage;\n    function abilityImage(parent, options) {\n        const panel = panelTyped(\"DOTAAbilityImage\", parent, options);\n        if (options) {\n            if (options.ability)\n                panel.abilityname = options.ability;\n            if (options.scaling)\n                panel.SetScaling(options.scaling);\n        }\n        return panel;\n    }\n    std.abilityImage = abilityImage;\n    function avatarImage(parent, options) {\n        const panel = panelTyped(\"DOTAAvatarImage\", parent, options);\n        panel.style.width = \"100%;\";\n        panel.style.height = \"100%;\";\n        if (options) {\n            if (options.steamid)\n                panel.steamid = options.steamid;\n        }\n        return panel;\n    }\n    std.avatarImage = avatarImage;\n})(std || (std = {}));\n","import { math, modifiers } from \"./util\";\nimport CustomAbilities from \"./customAbilities\";\n(function () {\n    const customAbilities = CustomAbilities.GetInstance();\n    const playerId = Players.GetLocalPlayer();\n    let heroIndex = undefined;\n    let particleLine = undefined;\n    let particleAoe = undefined;\n    let particleHalfCircle = undefined;\n    const targetIndicatorModifiers = [\n        \"modifier_sniper_ultimate_channeling\",\n        \"modifier_phantom_counter_banish\",\n        \"modifier_nevermore_counter_banish\",\n        \"modifier_mars_counter_countering\",\n        \"modifier_spectre_counter_countering\"\n    ];\n    function DEFX(efx) {\n        Particles.DestroyParticleEffect(efx, false);\n        Particles.ReleaseParticleIndex(efx);\n    }\n    function GetActiveAbility(heroIndex) {\n        let activeAbility = undefined;\n        for (let i = 0; i < 10; i++) {\n            const abilityIndex = Entities.GetAbility(heroIndex, i);\n            if (Abilities.IsInAbilityPhase(abilityIndex)) {\n                activeAbility = abilityIndex;\n            }\n        }\n        let activeModifier = false;\n        targetIndicatorModifiers.forEach(modifier => {\n            const tempModifier = modifiers.findModifierByName(heroIndex, modifier);\n            if (tempModifier) {\n                activeModifier = tempModifier;\n            }\n        });\n        if (activeModifier) {\n            activeAbility = Buffs.GetAbility(heroIndex, activeModifier);\n        }\n        return activeAbility;\n    }\n    function UpdateTargetIndicator() {\n        if (Game.IsInToolsMode()) {\n            heroIndex = Players.GetSelectedEntities(playerId)[0];\n        }\n        if (!heroIndex || heroIndex == -1) {\n            heroIndex = Players.GetPlayerHeroEntityIndex(playerId);\n            if (Game.IsInToolsMode()) {\n                heroIndex = Players.GetSelectedEntities(playerId)[0];\n            }\n            $.Schedule(1 / 144, UpdateTargetIndicator);\n            return;\n        }\n        const active = GetActiveAbility(heroIndex);\n        if (active) {\n            const data = customAbilities.GetTargetingIndicator(active);\n            if (data) {\n                const heroOrigin = Entities.GetAbsOrigin(heroIndex);\n                const mousePositionScreen = GameUI.GetCursorPosition();\n                const mousePosition = Game.ScreenXYToWorld(mousePositionScreen[0], mousePositionScreen[1]);\n                const direction = Game.Normalized([\n                    mousePosition[0] - heroOrigin[0],\n                    mousePosition[1] - heroOrigin[1],\n                    mousePosition[2] - heroOrigin[2]\n                ]);\n                const maxRange = Abilities.GetCastRange(active);\n                const minRange = Abilities.GetSpecialValueFor(active, \"min_range\");\n                const radius = Abilities.GetSpecialValueFor(active, \"radius\");\n                let target = undefined;\n                let length = 0;\n                let type = data.Type;\n                if (data.Fixed == 1) {\n                    length = maxRange;\n                }\n                else {\n                    length = math.clamp(Game.Length2D(mousePosition, heroOrigin), minRange, maxRange);\n                }\n                if (data.ModifierName && modifiers.findModifierByName(heroIndex, data.ModifierName)) {\n                    const modifierIndex = modifiers.findModifierByName(heroIndex, data.ModifierName);\n                    if (modifierIndex) {\n                        if (data.ModifierStacks) {\n                            const stacks = Buffs.GetStackCount(heroIndex, modifierIndex);\n                            if (stacks == data.ModifierStacks) {\n                                type = data.ModifierType;\n                                if (data.ModifierLength !== undefined) {\n                                    length = data.ModifierLength;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (type == \"TARGETING_INDICATOR_AOE\") {\n                    if (!particleAoe) {\n                        particleAoe = Particles.CreateParticle(\"particles/ui_mouseactions/range_finder_aoe.vpcf\", ParticleAttachment_t.PATTACH_WORLDORIGIN, heroIndex);\n                    }\n                    target = [\n                        heroOrigin[0] + direction[0] * length,\n                        heroOrigin[1] + direction[1] * length,\n                        heroOrigin[2] + direction[2] * length\n                    ];\n                    Particles.SetParticleControl(particleAoe, 0, target);\n                    Particles.SetParticleControl(particleAoe, 2, target);\n                    Particles.SetParticleControl(particleAoe, 3, [radius, 0, 0]);\n                }\n                if (type == \"TARGETING_INDICATOR_LINE\" || (type == \"TARGETING_INDICATOR_AOE\" && data.DisplayRange == 1)) {\n                    if (!particleLine) {\n                        particleLine = Particles.CreateParticle(\"particles/targeting/line.vpcf\", ParticleAttachment_t.PATTACH_WORLDORIGIN, heroIndex);\n                    }\n                    length = length - radius;\n                    target = [\n                        heroOrigin[0] + direction[0] * length,\n                        heroOrigin[1] + direction[1] * length,\n                        heroOrigin[2] + direction[2] * length\n                    ];\n                    const target_offset = [\n                        target[0] + direction[0] * 150,\n                        target[1] + direction[1] * 150,\n                        target[2] + direction[2] * 150\n                    ];\n                    Particles.SetParticleControl(particleLine, 0, heroOrigin);\n                    Particles.SetParticleControl(particleLine, 1, target);\n                    Particles.SetParticleControl(particleLine, 2, target_offset);\n                }\n                if (type == \"TARGETING_INDICATOR_HALF_CIRCLE\") {\n                    if (!particleHalfCircle) {\n                        particleHalfCircle = Particles.CreateParticle(\"particles/targeting/half_circle.vpcf\", ParticleAttachment_t.PATTACH_WORLDORIGIN, heroIndex);\n                    }\n                    target = [\n                        heroOrigin[0] + direction[0] * length,\n                        heroOrigin[1] + direction[1] * length,\n                        heroOrigin[2] + direction[2] * length\n                    ];\n                    Particles.SetParticleControl(particleHalfCircle, 0, heroOrigin);\n                    Particles.SetParticleControl(particleHalfCircle, 1, target);\n                    Particles.SetParticleControl(particleHalfCircle, 2, [radius, 0, 0]);\n                }\n            }\n        }\n        else {\n            if (particleLine) {\n                DEFX(particleLine);\n                particleLine = undefined;\n            }\n            if (particleAoe) {\n                DEFX(particleAoe);\n                particleAoe = undefined;\n            }\n            if (particleHalfCircle) {\n                DEFX(particleHalfCircle);\n                particleHalfCircle = undefined;\n            }\n        }\n        $.Schedule(1 / 144, UpdateTargetIndicator);\n    }\n    UpdateTargetIndicator();\n})();\n","export var CustomGameState;\n(function (CustomGameState) {\n    CustomGameState[CustomGameState[\"NONE\"] = 0] = \"NONE\";\n    CustomGameState[CustomGameState[\"PRE_WARMUP\"] = 1] = \"PRE_WARMUP\";\n    CustomGameState[CustomGameState[\"WARMUP_IN_PROGRESS\"] = 2] = \"WARMUP_IN_PROGRESS\";\n    CustomGameState[CustomGameState[\"PRE_ROUND\"] = 3] = \"PRE_ROUND\";\n    CustomGameState[CustomGameState[\"ROUND_IN_PROGRESS\"] = 4] = \"ROUND_IN_PROGRESS\";\n    CustomGameState[CustomGameState[\"PRE_RUN\"] = 5] = \"PRE_RUN\";\n    CustomGameState[CustomGameState[\"RUN_IN_PROGRESS\"] = 6] = \"RUN_IN_PROGRESS\";\n    CustomGameState[CustomGameState[\"POST_RUN\"] = 7] = \"POST_RUN\";\n})(CustomGameState || (CustomGameState = {}));\n","const utils = {\n    isEmptyObject(object) {\n        return Object.keys(object).length == 0;\n    },\n    getFirstObjectElement(object) {\n        for (const key in object) {\n            const element = object[key];\n            return element;\n        }\n    },\n    getCurrentPlayer() {\n        let playerId = Players.GetLocalPlayer();\n        if (Game.IsInToolsMode()) {\n            const selectedEntity = Players.GetSelectedEntities(playerId)[0];\n            if (selectedEntity) {\n                playerId = Entities.GetPlayerOwnerID(selectedEntity);\n            }\n        }\n        return playerId;\n    }\n};\nexport default utils;\nexport const colors = {\n    local: {\n        light: [162, 249, 154],\n        dark: [51, 162, 40]\n    },\n    yellow: {\n        light: [249, 246, 154],\n        dark: [196, 192, 42]\n    },\n    lightgreen: {\n        light: [154, 249, 224],\n        dark: [78, 128, 114]\n    },\n    pink: {\n        light: [197, 77, 168],\n        dark: [92, 15, 73]\n    },\n    orange: {\n        light: [255, 108, 0],\n        dark: [219, 99, 11]\n    },\n    blue: {\n        light: [27, 113, 230],\n        dark: [120, 156, 210]\n    },\n    gray: {\n        light: [240, 240, 240],\n        dark: [120, 120, 120]\n    },\n    yellowRed: {\n        light: [219, 213, 30],\n        dark: [229, 0, 72]\n    },\n    Gradient: function (color, opacity = \"1.0\") {\n        const colorA = \"rgba(\" + color.light[0] + \",\" + color.light[1] + \",\" + color.light[2] + \",\" + opacity + \")\";\n        const colorB = \"rgba(\" + color.dark[0] + \",\" + color.dark[1] + \",\" + color.dark[2] + \",\" + opacity + \")\";\n        return \"gradient(linear, 0% 0%, 100% 0%, from(\" + colorA + \"), to(\" + colorB + \"));\";\n    }\n};\nexport const math = {\n    clamp(num, min, max) {\n        return num < min ? min : num > max ? max : num;\n    }\n};\nexport const modifiers = {\n    findModifierByName(entityIndex, name) {\n        for (let i = 0; i < Entities.GetNumBuffs(entityIndex); i++) {\n            const buffName = Buffs.GetName(entityIndex, Entities.GetBuff(entityIndex, i));\n            if (buffName == name) {\n                return Entities.GetBuff(entityIndex, i);\n            }\n        }\n        return false;\n    }\n};\nexport const entities = {\n    isVisibleByLocal(entityIndex) {\n        if (modifiers.findModifierByName(entityIndex, \"modifier_visible\") !== false) {\n            return true;\n        }\n        return false;\n    }\n};\nexport const panels = {\n    createPanelSimple(container, className, type = \"Panel\") {\n        return $.CreatePanelWithProperties(type, container, className, {\n            class: className,\n            hittest: \"true\"\n        });\n    }\n};\nexport const tables = {\n    subscribeToNetTableAndLoadNow(tableName, callback) {\n        CustomNetTables.SubscribeNetTableListener(tableName, callback);\n        const data = CustomNetTables.GetAllTableValues(tableName);\n        data.forEach(d => {\n            const parsedD = d;\n            callback(tableName, parsedD.key, parsedD.value);\n        });\n    },\n    subscribeToNetTableKey(table, key, loadNow, callback) {\n        const listener = CustomNetTables.SubscribeNetTableListener(table, function (table, tableKey, data) {\n            if (key == tableKey) {\n                if (!data) {\n                    return;\n                }\n                callback(data);\n            }\n        });\n        if (loadNow) {\n            const data = CustomNetTables.GetTableValue(table, key);\n            if (data) {\n                callback(data);\n            }\n        }\n        return listener;\n    }\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import \"./controllers/cameraController\";\nimport \"./controllers/mousePositionController\";\nimport LayoutController from \"./layout/layoutController\";\nimport HeroOverhead from \"./overhead/heroOverhead\";\nimport HeroInfoCard from \"./heroInfoCard\";\nimport AllianceBar from \"./allianceBar\";\nimport util, { tables } from \"./util\";\nimport \"./pve\";\nimport \"./targetIndicator\";\nimport \"./actions\";\nimport CustomEntities from \"./customEntities\";\nimport { CustomGameState } from \"./types\";\nimport { ReadyBar } from \"./readyBar\";\nimport UnitOverhead from \"./overhead/unitOverhead\";\n(function () {\n    const customEntities = CustomEntities.GetInstance();\n    const layout = LayoutController.GetInstance();\n    const refunder = $(\"#refunder\");\n    const gameStatePanel = $(\"#game-state\");\n    const clockPanel = $(\"#top-bar__clock-text\");\n    const pvePanels = layout.GetTopPanel().FindChildrenWithClassTraverse(\"pve\");\n    const pvpPanels = layout.GetTopPanel().FindChildrenWithClassTraverse(\"pvp\");\n    const currentLevelPanel = $(\"#current-room\");\n    const currentStagePanel = $(\"#current-stage\");\n    const enemiesCountPanel = $(\"#enemies-count\");\n    const nextRewardPanel = $(\"#next-reward\");\n    const roomPhasePanel = $(\"#room-phase\");\n    const roomTypePanel = $(\"#room-type\");\n    const refunderButton = $(\"#refunder__button\");\n    const refunderPanel = $(\"#refunder\");\n    const customHotkeysPanel = $(\"#custom-hotkeys\");\n    const hideShowButton = $(\"#custom-hotkeys__hide-show-button\");\n    const swapButton = $(\"#custom-hotkeys__swap-button\");\n    const customHotkeysAllRowsPanel = $(\"#custom-hotkeys__hotkeys\");\n    const customHotkeysTextPanel = hideShowButton.FindChildrenWithClassTraverse(\"custom-hotkeys__button-text\")[0];\n    const heroOverheads = {};\n    const unitOverheads = {};\n    const heroInfoCards = {};\n    const allianceBars = {};\n    let customHotkeysShowing = true;\n    let maxScore = 3;\n    GameUI.SetDefaultUIEnabled(DotaDefaultUIElement_t.DOTA_DEFAULT_UI_TOP_TIMEOFDAY, false);\n    GameUI.SetDefaultUIEnabled(DotaDefaultUIElement_t.DOTA_DEFAULT_UI_TOP_HEROES, false);\n    GameUI.SetDefaultUIEnabled(DotaDefaultUIElement_t.DOTA_DEFAULT_UI_FLYOUT_SCOREBOARD, false);\n    GameUI.SetDefaultUIEnabled(DotaDefaultUIElement_t.DOTA_DEFAULT_UI_ACTION_MINIMAP, false);\n    GameUI.SetDefaultUIEnabled(DotaDefaultUIElement_t.DOTA_DEFAULT_UI_ENDGAME, false);\n    GameUI.SetDefaultUIEnabled(DotaDefaultUIElement_t.DOTA_DEFAULT_UI_HERO_SELECTION_TEAMS, false);\n    GameUI.SetDefaultUIEnabled(DotaDefaultUIElement_t.DOTA_DEFAULT_UI_INVENTORY_ITEMS, false);\n    GameUI.SetDefaultUIEnabled(DotaDefaultUIElement_t.DOTA_DEFAULT_UI_INVENTORY_SHOP, false);\n    layout.CollapsePanel(\"level_stats_frame\");\n    layout.CollapsePanel(\"inventory_tpscroll_container\");\n    layout.CollapsePanel(\"inventory_neutral_slot_container\");\n    layout.CollapsePanelByClass(\"AbilityInsetShadowRight\");\n    layout.CollapsePanel(\"StatBranch\");\n    layout.CollapsePanel(\"health_mana\");\n    layout.CollapsePanel(\"AghsStatusContainer\");\n    const rightFlarePanel = layout.GetTopPanel().FindChildTraverse(\"right_flare\");\n    rightFlarePanel.style.width = \"52px\";\n    rightFlarePanel.style.height = \"97px\";\n    rightFlarePanel.style.marginRight = \"244px\";\n    const centerWithStatsPanel = layout.GetTopPanel().FindChildTraverse(\"center_with_stats\");\n    centerWithStatsPanel.style.horizontalAlign = \"left\";\n    centerWithStatsPanel.style.marginLeft = \"80px\";\n    const buffContainerPanel = layout.GetTopPanel().FindChildTraverse(\"BuffContainer\");\n    buffContainerPanel.style.width = \"40%\";\n    const abilitiesAndStatsBranchPanel = layout.GetTopPanel().FindChildTraverse(\"AbilitiesAndStatBranch\");\n    abilitiesAndStatsBranchPanel.style.marginBottom = \"-15px\";\n    const centerBgPanel = layout.GetTopPanel().FindChildTraverse(\"center_bg\");\n    centerBgPanel.style.height = \"90px\";\n    layout.SetPanelMargin(\"debuffs\", { bottom: \"95px\" });\n    layout.SetPanelMargin(\"buffs\", { left: \"38.5%\", bottom: \"95px\" });\n    layout.UpdateCurrency();\n    customEntities.AddCallback((value) => {\n        const entityIndex = value.entityIndex;\n        if (value.playerId !== undefined) {\n            if (!heroOverheads[entityIndex]) {\n                heroOverheads[entityIndex] = new HeroOverhead(value);\n            }\n            else {\n                heroOverheads[entityIndex].UpdateData(value);\n            }\n            if (!heroInfoCards[entityIndex]) {\n                let container;\n                const allianceName = value.allianceName;\n                if (allianceName == \"DOTA_ALLIANCE_RADIANT\") {\n                    container = $(\"#alliances-status\").FindChildTraverse(\"alliances-status__radiant\");\n                }\n                if (allianceName == \"DOTA_ALLIANCE_DIRE\") {\n                    container = $(\"#alliances-status\").FindChildTraverse(\"alliances-status__dire\");\n                }\n                if (allianceName == \"DOTA_ALLIANCE_LEGION\") {\n                    container = $(\"#alliances-status\").FindChildTraverse(\"alliances-status__legion\");\n                }\n                if (allianceName == \"DOTA_ALLIANCE_VOID\") {\n                    container = $(\"#alliances-status\").FindChildTraverse(\"alliances-status__void\");\n                }\n                heroInfoCards[entityIndex] = new HeroInfoCard(value, container);\n            }\n            else {\n                heroInfoCards[entityIndex].UpdateData(value);\n            }\n        }\n        else {\n            if (!unitOverheads[entityIndex]) {\n                unitOverheads[entityIndex] = new UnitOverhead(value);\n            }\n            else {\n                unitOverheads[entityIndex].UpdateData(value);\n            }\n        }\n    });\n    customEntities.OnReload();\n    const tableNameAlliance = \"alliances\";\n    tables.subscribeToNetTableAndLoadNow(tableNameAlliance, (table, key, value) => {\n        const allianceName = value.name;\n        if (!allianceBars[allianceName]) {\n            const topBarContainerPanel = $(\"#top-bar\");\n            let topBarPanel = null;\n            if (allianceName == \"DOTA_ALLIANCE_RADIANT\") {\n                topBarPanel = topBarContainerPanel.FindChildTraverse(\"top-bar__radiant\");\n            }\n            if (allianceName == \"DOTA_ALLIANCE_DIRE\") {\n                topBarPanel = topBarContainerPanel.FindChildTraverse(\"top-bar__dire\");\n            }\n            if (allianceName == \"DOTA_ALLIANCE_LEGION\") {\n                topBarPanel = topBarContainerPanel.FindChildTraverse(\"top-bar__legion\");\n            }\n            if (allianceName == \"DOTA_ALLIANCE_VOID\") {\n                topBarPanel = topBarContainerPanel.FindChildTraverse(\"top-bar__void\");\n            }\n            if (topBarPanel) {\n                allianceBars[allianceName] = new AllianceBar(topBarPanel, value);\n                allianceBars[allianceName].UpdateMaxScore(maxScore);\n            }\n        }\n        else {\n            allianceBars[allianceName].UpdateData(value);\n        }\n    });\n    const tableNameMain = \"main\";\n    tables.subscribeToNetTableKey(tableNameMain, \"gameState\", true, function (data) {\n        const state = data.gameState;\n        if (Game.IsInToolsMode()) {\n            gameStatePanel.text = CustomGameState[data.gameState];\n        }\n        if (state == CustomGameState.PRE_ROUND) {\n            new ReadyBar(4.0);\n        }\n        if (state == CustomGameState.ROUND_IN_PROGRESS) {\n            layout.HideDimmer();\n            refunder.style.visibility = \"collapse\";\n        }\n        if (state == CustomGameState.WARMUP_IN_PROGRESS) {\n            refunder.style.visibility = \"visible\";\n        }\n    });\n    tables.subscribeToNetTableKey(tableNameMain, \"maxScore\", true, function (data) {\n        maxScore = data.max_score;\n        for (const allianceName in allianceBars) {\n            const allianceBar = allianceBars[allianceName];\n            allianceBar.UpdateMaxScore(maxScore);\n        }\n    });\n    tables.subscribeToNetTableKey(tableNameMain, \"pve\", true, function (data) {\n        if (Game.IsInToolsMode()) {\n            if (data.nextReward) {\n                nextRewardPanel.text = \"Next reward: \" + data.nextReward;\n            }\n            if (data.roomPhases) {\n                let phasesAsText = \"\";\n                for (const key in data.roomPhases) {\n                    const phase = data.roomPhases[key];\n                    phasesAsText = `${phasesAsText} \\n\\t${phase}`;\n                    if (parseInt(key, 10) === data.roomPhaseIndex + 1) {\n                        phasesAsText = phasesAsText + \" <==\";\n                    }\n                }\n                roomPhasePanel.text = \"Room phases: \" + phasesAsText;\n            }\n            if (data.roomType) {\n                roomTypePanel.text = \"Room type: \" + data.roomType;\n            }\n        }\n        if (data.currentStage) {\n            currentStagePanel.text = \"Stage: \" + data.currentStage;\n        }\n        if (data.currentRoom) {\n            currentLevelPanel.text = \"Room: \" + data.currentRoom;\n        }\n        if (data.remainingEnemies && data.maxEnemies) {\n            enemiesCountPanel.text = \"Killed enemies: \" + data.remainingEnemies + \"/\" + data.maxEnemies;\n        }\n    });\n    function UpdateTime(data) {\n        clockPanel.text =\n            data.timer_minute_10.toString() +\n                data.timer_minute_01.toString() +\n                \":\" +\n                data.timer_second_10.toString() +\n                data.timer_second_01.toString();\n    }\n    GameEvents.Subscribe(\"countdown\", UpdateTime);\n    GameEvents.Subscribe(\"not_enough_energy\", function () {\n        GameUI.SendCustomHUDError(\"Not Enough Energy\", \"versus_screen.towers_nopass\");\n    });\n    refunderButton.SetPanelEvent(\"onactivate\", () => {\n        const playerId = util.getCurrentPlayer();\n        GameEvents.SendCustomGameEventToServer(\"refund_points\", {\n            playerIndex: playerId\n        });\n        refunderPanel.style.visibility = \"collapse\";\n    });\n    customHotkeysPanel.SetPanelEvent(\"onmouseover\", () => {\n        customHotkeysPanel.style.opacity = \"1.0\";\n    });\n    customHotkeysPanel.SetPanelEvent(\"onmouseout\", () => {\n        customHotkeysPanel.style.opacity = \"0.5\";\n    });\n    hideShowButton.SetPanelEvent(\"onactivate\", () => {\n        if (customHotkeysShowing) {\n            customHotkeysPanel.style.width = \"140px\";\n            customHotkeysAllRowsPanel.style.height = \"0px\";\n            customHotkeysTextPanel.text = \"SHOW HOTKEYS\";\n            swapButton.style.visibility = \"collapse\";\n            customHotkeysShowing = false;\n        }\n        else {\n            customHotkeysPanel.style.width = \"340px\";\n            customHotkeysAllRowsPanel.style.height = \"410px\";\n            customHotkeysTextPanel.text = \"HIDE HOTKEYS\";\n            swapButton.style.visibility = \"visible\";\n            customHotkeysShowing = true;\n        }\n    });\n    swapButton.SetPanelEvent(\"onactivate\", () => {\n        SwapRF();\n    });\n    function SwapRF() {\n        const playerId = util.getCurrentPlayer();\n        GameEvents.SendCustomGameEventToServer(\"swap_r_f\", {\n            playerIndex: playerId\n        });\n    }\n    if (Game.GetMapInfo().map_display_name === \"pvp\") {\n        pvePanels.forEach(panel => {\n            panel.style.visibility = \"collapse\";\n        });\n    }\n    else {\n        pvpPanels.forEach(panel => {\n            panel.style.visibility = \"collapse\";\n        });\n    }\n})();\n"],"names":[],"sourceRoot":""}